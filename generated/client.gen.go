// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RuleGroupsServiceGetRuleGroupModelMappingWithBody request with any body
	RuleGroupsServiceGetRuleGroupModelMappingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RuleGroupsServiceGetRuleGroupModelMapping(ctx context.Context, body RuleGroupsServiceGetRuleGroupModelMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupsServiceBulkDeleteRuleGroup request
	RuleGroupsServiceBulkDeleteRuleGroup(ctx context.Context, params *RuleGroupsServiceBulkDeleteRuleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupsServiceListRuleGroups request
	RuleGroupsServiceListRuleGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupsServiceCreateRuleGroupWithBody request with any body
	RuleGroupsServiceCreateRuleGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RuleGroupsServiceCreateRuleGroup(ctx context.Context, body RuleGroupsServiceCreateRuleGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupsServiceGetCompanyUsageLimitsWithBody request with any body
	RuleGroupsServiceGetCompanyUsageLimitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RuleGroupsServiceGetCompanyUsageLimits(ctx context.Context, body RuleGroupsServiceGetCompanyUsageLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupsServiceDeleteRuleGroup request
	RuleGroupsServiceDeleteRuleGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupsServiceGetRuleGroup request
	RuleGroupsServiceGetRuleGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupsServiceUpdateRuleGroupWithBody request with any body
	RuleGroupsServiceUpdateRuleGroupWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RuleGroupsServiceUpdateRuleGroup(ctx context.Context, groupId string, body RuleGroupsServiceUpdateRuleGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events2MetricServiceListE2M request
	Events2MetricServiceListE2M(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events2MetricServiceCreateE2MWithBody request with any body
	Events2MetricServiceCreateE2MWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Events2MetricServiceCreateE2M(ctx context.Context, body Events2MetricServiceCreateE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events2MetricServiceReplaceE2MWithBody request with any body
	Events2MetricServiceReplaceE2MWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Events2MetricServiceReplaceE2M(ctx context.Context, body Events2MetricServiceReplaceE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events2MetricServiceAtomicBatchExecuteE2MWithBody request with any body
	Events2MetricServiceAtomicBatchExecuteE2MWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Events2MetricServiceAtomicBatchExecuteE2M(ctx context.Context, body Events2MetricServiceAtomicBatchExecuteE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events2MetricServiceListLabelsCardinality request
	Events2MetricServiceListLabelsCardinality(ctx context.Context, params *Events2MetricServiceListLabelsCardinalityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events2MetricServiceGetLimits request
	Events2MetricServiceGetLimits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events2MetricServiceDeleteE2M request
	Events2MetricServiceDeleteE2M(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events2MetricServiceGetE2M request
	Events2MetricServiceGetE2M(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnrichmentServiceRemoveEnrichments request
	EnrichmentServiceRemoveEnrichments(ctx context.Context, params *EnrichmentServiceRemoveEnrichmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnrichmentServiceGetEnrichments request
	EnrichmentServiceGetEnrichments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnrichmentServiceAddEnrichmentsWithBody request with any body
	EnrichmentServiceAddEnrichmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnrichmentServiceAddEnrichments(ctx context.Context, body EnrichmentServiceAddEnrichmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnrichmentServiceGetEnrichmentLimit request
	EnrichmentServiceGetEnrichmentLimit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnrichmentServiceGetCompanyEnrichmentSettings request
	EnrichmentServiceGetCompanyEnrichmentSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnrichmentServiceAtomicOverwriteEnrichmentsWithBody request with any body
	EnrichmentServiceAtomicOverwriteEnrichmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnrichmentServiceAtomicOverwriteEnrichments(ctx context.Context, body EnrichmentServiceAtomicOverwriteEnrichmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsTcoServiceGet request
	MetricsTcoServiceGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsTcoServiceAddWithBody request with any body
	MetricsTcoServiceAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetricsTcoServiceAdd(ctx context.Context, body MetricsTcoServiceAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsTcoServiceDeleteWithBody request with any body
	MetricsTcoServiceDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetricsTcoServiceDelete(ctx context.Context, body MetricsTcoServiceDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithBody request with any body
	AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlertSchedulerRuleServiceCreateAlertSchedulerRule(ctx context.Context, body AlertSchedulerRuleServiceCreateAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithBody request with any body
	AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlertSchedulerRuleServiceUpdateAlertSchedulerRule(ctx context.Context, body AlertSchedulerRuleServiceUpdateAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertSchedulerRuleServiceGetBulkAlertSchedulerRule request
	AlertSchedulerRuleServiceGetBulkAlertSchedulerRule(ctx context.Context, params *AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithBody request with any body
	AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlertSchedulerRuleServiceCreateBulkAlertSchedulerRule(ctx context.Context, body AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithBody request with any body
	AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRule(ctx context.Context, body AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertSchedulerRuleServiceDeleteAlertSchedulerRule request
	AlertSchedulerRuleServiceDeleteAlertSchedulerRule(ctx context.Context, alertSchedulerRuleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertSchedulerRuleServiceGetAlertSchedulerRule request
	AlertSchedulerRuleServiceGetAlertSchedulerRule(ctx context.Context, alertSchedulerRuleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextualDataIntegrationServiceSaveContextualDataIntegrationWithBody request with any body
	ContextualDataIntegrationServiceSaveContextualDataIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContextualDataIntegrationServiceSaveContextualDataIntegration(ctx context.Context, body ContextualDataIntegrationServiceSaveContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithBody request with any body
	ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContextualDataIntegrationServiceUpdateContextualDataIntegration(ctx context.Context, body ContextualDataIntegrationServiceUpdateContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextualDataIntegrationServiceTestContextualDataIntegrationWithBody request with any body
	ContextualDataIntegrationServiceTestContextualDataIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContextualDataIntegrationServiceTestContextualDataIntegration(ctx context.Context, body ContextualDataIntegrationServiceTestContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextualDataIntegrationServiceDeleteContextualDataIntegration request
	ContextualDataIntegrationServiceDeleteContextualDataIntegration(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextualDataIntegrationServiceGetContextualDataIntegrations request
	ContextualDataIntegrationServiceGetContextualDataIntegrations(ctx context.Context, params *ContextualDataIntegrationServiceGetContextualDataIntegrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextualDataIntegrationServiceGetContextualDataIntegrationDefinition request
	ContextualDataIntegrationServiceGetContextualDataIntegrationDefinition(ctx context.Context, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContextualDataIntegrationServiceGetContextualDataIntegrationDetails request
	ContextualDataIntegrationServiceGetContextualDataIntegrationDetails(ctx context.Context, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomEnrichmentServiceGetCustomEnrichments request
	CustomEnrichmentServiceGetCustomEnrichments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomEnrichmentServiceCreateCustomEnrichmentWithBody request with any body
	CustomEnrichmentServiceCreateCustomEnrichmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomEnrichmentServiceCreateCustomEnrichment(ctx context.Context, body CustomEnrichmentServiceCreateCustomEnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomEnrichmentServiceUpdateCustomEnrichmentWithBody request with any body
	CustomEnrichmentServiceUpdateCustomEnrichmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomEnrichmentServiceUpdateCustomEnrichment(ctx context.Context, body CustomEnrichmentServiceUpdateCustomEnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomEnrichmentServiceSearchCustomEnrichmentData request
	CustomEnrichmentServiceSearchCustomEnrichmentData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomEnrichmentServiceDeleteCustomEnrichment request
	CustomEnrichmentServiceDeleteCustomEnrichment(ctx context.Context, customEnrichmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomEnrichmentServiceGetCustomEnrichment request
	CustomEnrichmentServiceGetCustomEnrichment(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServiceGetDashboardBySlug request
	DashboardsServiceGetDashboardBySlug(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardCatalogServiceGetDashboardCatalog request
	DashboardCatalogServiceGetDashboardCatalog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServiceCreateDashboardWithBody request with any body
	DashboardsServiceCreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DashboardsServiceCreateDashboard(ctx context.Context, body DashboardsServiceCreateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServiceReplaceDashboardWithBody request with any body
	DashboardsServiceReplaceDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DashboardsServiceReplaceDashboard(ctx context.Context, body DashboardsServiceReplaceDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServiceDeleteDashboard request
	DashboardsServiceDeleteDashboard(ctx context.Context, dashboardId string, params *DashboardsServiceDeleteDashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServiceGetDashboard request
	DashboardsServiceGetDashboard(ctx context.Context, dashboardId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServiceReplaceDefaultDashboardWithBody request with any body
	DashboardsServiceReplaceDefaultDashboardWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DashboardsServiceReplaceDefaultDashboard(ctx context.Context, dashboardId string, body DashboardsServiceReplaceDefaultDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServiceAssignDashboardFolderWithBody request with any body
	DashboardsServiceAssignDashboardFolderWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DashboardsServiceAssignDashboardFolder(ctx context.Context, dashboardId string, body DashboardsServiceAssignDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServicePinDashboardWithBody request with any body
	DashboardsServicePinDashboardWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DashboardsServicePinDashboard(ctx context.Context, dashboardId string, body DashboardsServicePinDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardsServiceUnpinDashboardWithBody request with any body
	DashboardsServiceUnpinDashboardWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DashboardsServiceUnpinDashboard(ctx context.Context, dashboardId string, body DashboardsServiceUnpinDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardFoldersServiceListDashboardFolders request
	DashboardFoldersServiceListDashboardFolders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardFoldersServiceCreateDashboardFolderWithBody request with any body
	DashboardFoldersServiceCreateDashboardFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DashboardFoldersServiceCreateDashboardFolder(ctx context.Context, body DashboardFoldersServiceCreateDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardFoldersServiceReplaceDashboardFolderWithBody request with any body
	DashboardFoldersServiceReplaceDashboardFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DashboardFoldersServiceReplaceDashboardFolder(ctx context.Context, body DashboardFoldersServiceReplaceDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardFoldersServiceDeleteDashboardFolder request
	DashboardFoldersServiceDeleteDashboardFolder(ctx context.Context, folderId string, params *DashboardFoldersServiceDeleteDashboardFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DashboardFoldersServiceGetDashboardFolder request
	DashboardFoldersServiceGetDashboardFolder(ctx context.Context, folderId string, params *DashboardFoldersServiceGetDashboardFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionDeploymentServiceDeployExtensionWithBody request with any body
	ExtensionDeploymentServiceDeployExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtensionDeploymentServiceDeployExtension(ctx context.Context, body ExtensionDeploymentServiceDeployExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionDeploymentServiceGetDeployedExtensions request
	ExtensionDeploymentServiceGetDeployedExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionDeploymentServiceUndeployExtensionWithBody request with any body
	ExtensionDeploymentServiceUndeployExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtensionDeploymentServiceUndeployExtension(ctx context.Context, body ExtensionDeploymentServiceUndeployExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionDeploymentServiceUpdateExtensionWithBody request with any body
	ExtensionDeploymentServiceUpdateExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtensionDeploymentServiceUpdateExtension(ctx context.Context, body ExtensionDeploymentServiceUpdateExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionTestingServiceCleanupTestingRevisionWithBody request with any body
	ExtensionTestingServiceCleanupTestingRevisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtensionTestingServiceCleanupTestingRevision(ctx context.Context, body ExtensionTestingServiceCleanupTestingRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionTestingServiceInitializeTestingRevisionWithBody request with any body
	ExtensionTestingServiceInitializeTestingRevisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtensionTestingServiceInitializeTestingRevision(ctx context.Context, body ExtensionTestingServiceInitializeTestingRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionTestingServiceTestExtensionRevisionWithBody request with any body
	ExtensionTestingServiceTestExtensionRevisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtensionTestingServiceTestExtensionRevision(ctx context.Context, body ExtensionTestingServiceTestExtensionRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionServiceGetAllExtensionsWithBody request with any body
	ExtensionServiceGetAllExtensionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtensionServiceGetAllExtensions(ctx context.Context, body ExtensionServiceGetAllExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtensionServiceGetExtension request
	ExtensionServiceGetExtension(ctx context.Context, id string, params *ExtensionServiceGetExtensionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceListIncidentsWithBody request with any body
	IncidentsServiceListIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceListIncidents(ctx context.Context, body IncidentsServiceListIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceGetIncident request
	IncidentsServiceGetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceGetIncidentEvents request
	IncidentsServiceGetIncidentEvents(ctx context.Context, incidentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceAcknowledgeIncidentsWithBody request with any body
	IncidentsServiceAcknowledgeIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceAcknowledgeIncidents(ctx context.Context, body IncidentsServiceAcknowledgeIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceAssignIncidentsWithBody request with any body
	IncidentsServiceAssignIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceAssignIncidents(ctx context.Context, body IncidentsServiceAssignIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceBatchGetIncident request
	IncidentsServiceBatchGetIncident(ctx context.Context, params *IncidentsServiceBatchGetIncidentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceCloseIncidentsWithBody request with any body
	IncidentsServiceCloseIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceCloseIncidents(ctx context.Context, body IncidentsServiceCloseIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceGetFilterValuesWithBody request with any body
	IncidentsServiceGetFilterValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceGetFilterValues(ctx context.Context, body IncidentsServiceGetFilterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceListIncidentEventsWithBody request with any body
	IncidentsServiceListIncidentEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceListIncidentEvents(ctx context.Context, body IncidentsServiceListIncidentEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceListIncidentEventsFilterValuesWithBody request with any body
	IncidentsServiceListIncidentEventsFilterValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceListIncidentEventsFilterValues(ctx context.Context, body IncidentsServiceListIncidentEventsFilterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceListIncidentEventsTotalCountWithBody request with any body
	IncidentsServiceListIncidentEventsTotalCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceListIncidentEventsTotalCount(ctx context.Context, body IncidentsServiceListIncidentEventsTotalCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceListIncidentAggregationsWithBody request with any body
	IncidentsServiceListIncidentAggregationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceListIncidentAggregations(ctx context.Context, body IncidentsServiceListIncidentAggregationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceResolveIncidentsWithBody request with any body
	IncidentsServiceResolveIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceResolveIncidents(ctx context.Context, body IncidentsServiceResolveIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsServiceUnassignIncidentsWithBody request with any body
	IncidentsServiceUnassignIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsServiceUnassignIncidents(ctx context.Context, body IncidentsServiceUnassignIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceGetIntegrations request
	IntegrationServiceGetIntegrations(ctx context.Context, params *IntegrationServiceGetIntegrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceGetIntegrationDefinition request
	IntegrationServiceGetIntegrationDefinition(ctx context.Context, id string, params *IntegrationServiceGetIntegrationDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceGetDeployedIntegration request
	IntegrationServiceGetDeployedIntegration(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceDeleteIntegration request
	IntegrationServiceDeleteIntegration(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceListManagedIntegrationKeys request
	IntegrationServiceListManagedIntegrationKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceGetManagedIntegrationStatus request
	IntegrationServiceGetManagedIntegrationStatus(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceSaveIntegrationWithBody request with any body
	IntegrationServiceSaveIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IntegrationServiceSaveIntegration(ctx context.Context, body IntegrationServiceSaveIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceUpdateIntegrationWithBody request with any body
	IntegrationServiceUpdateIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IntegrationServiceUpdateIntegration(ctx context.Context, body IntegrationServiceUpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceTestIntegrationWithBody request with any body
	IntegrationServiceTestIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IntegrationServiceTestIntegration(ctx context.Context, body IntegrationServiceTestIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceGetRumApplicationVersionData request
	IntegrationServiceGetRumApplicationVersionData(ctx context.Context, params *IntegrationServiceGetRumApplicationVersionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceSyncRumDataWithBody request with any body
	IntegrationServiceSyncRumDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IntegrationServiceSyncRumData(ctx context.Context, body IntegrationServiceSyncRumDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceGetTemplate request
	IntegrationServiceGetTemplate(ctx context.Context, params *IntegrationServiceGetTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationServiceGetIntegrationDetails request
	IntegrationServiceGetIntegrationDetails(ctx context.Context, id string, params *IntegrationServiceGetIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsConfiguratorPublicServiceGetTenantConfig request
	MetricsConfiguratorPublicServiceGetTenantConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsConfiguratorPublicServiceConfigureTenantWithBody request with any body
	MetricsConfiguratorPublicServiceConfigureTenantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetricsConfiguratorPublicServiceConfigureTenant(ctx context.Context, body MetricsConfiguratorPublicServiceConfigureTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsConfiguratorPublicServiceUpdateWithBody request with any body
	MetricsConfiguratorPublicServiceUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetricsConfiguratorPublicServiceUpdate(ctx context.Context, body MetricsConfiguratorPublicServiceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsConfiguratorPublicServiceDisableArchive request
	MetricsConfiguratorPublicServiceDisableArchive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsConfiguratorPublicServiceEnableArchive request
	MetricsConfiguratorPublicServiceEnableArchive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsConfiguratorPublicServiceValidateBucketWithBody request with any body
	MetricsConfiguratorPublicServiceValidateBucketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetricsConfiguratorPublicServiceValidateBucket(ctx context.Context, body MetricsConfiguratorPublicServiceValidateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceReplaceConnectorWithBody request with any body
	ConnectorsServiceReplaceConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConnectorsServiceReplaceConnector(ctx context.Context, body ConnectorsServiceReplaceConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceListConnectors request
	ConnectorsServiceListConnectors(ctx context.Context, params *ConnectorsServiceListConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceCreateConnectorWithBody request with any body
	ConnectorsServiceCreateConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConnectorsServiceCreateConnector(ctx context.Context, body ConnectorsServiceCreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceDeleteConnector request
	ConnectorsServiceDeleteConnector(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceGetConnector request
	ConnectorsServiceGetConnector(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceBatchGetConnectors request
	ConnectorsServiceBatchGetConnectors(ctx context.Context, params *ConnectorsServiceBatchGetConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceBatchGetConnectorSummaries request
	ConnectorsServiceBatchGetConnectorSummaries(ctx context.Context, params *ConnectorsServiceBatchGetConnectorSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceGetConnectorTypeSummaries request
	ConnectorsServiceGetConnectorTypeSummaries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectorsServiceListConnectorSummaries request
	ConnectorsServiceListConnectorSummaries(ctx context.Context, params *ConnectorsServiceListConnectorSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EntitiesServiceListEntityTypes request
	EntitiesServiceListEntityTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EntitiesServiceListEntitySubTypes request
	EntitiesServiceListEntitySubTypes(ctx context.Context, entityType EntitiesServiceListEntitySubTypesParamsEntityType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestingServiceTestConnectorConfigWithBody request with any body
	TestingServiceTestConnectorConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestingServiceTestConnectorConfig(ctx context.Context, body TestingServiceTestConnectorConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestingServiceTestDestinationWithBody request with any body
	TestingServiceTestDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestingServiceTestDestination(ctx context.Context, body TestingServiceTestDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestingServiceTestExistingConnectorWithBody request with any body
	TestingServiceTestExistingConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestingServiceTestExistingConnector(ctx context.Context, body TestingServiceTestExistingConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestingServiceTestExistingPresetWithBody request with any body
	TestingServiceTestExistingPresetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestingServiceTestExistingPreset(ctx context.Context, body TestingServiceTestExistingPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestingServiceTestPresetConfigWithBody request with any body
	TestingServiceTestPresetConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestingServiceTestPresetConfig(ctx context.Context, body TestingServiceTestPresetConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestingServiceTestRoutingConditionValidWithBody request with any body
	TestingServiceTestRoutingConditionValidWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestingServiceTestRoutingConditionValid(ctx context.Context, body TestingServiceTestRoutingConditionValidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestingServiceTestTemplateRenderWithBody request with any body
	TestingServiceTestTemplateRenderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestingServiceTestTemplateRender(ctx context.Context, body TestingServiceTestTemplateRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceCreateCustomPresetWithBody request with any body
	PresetsServiceCreateCustomPresetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PresetsServiceCreateCustomPreset(ctx context.Context, body PresetsServiceCreateCustomPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceReplaceCustomPresetWithBody request with any body
	PresetsServiceReplaceCustomPresetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PresetsServiceReplaceCustomPreset(ctx context.Context, body PresetsServiceReplaceCustomPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceDeleteCustomPreset request
	PresetsServiceDeleteCustomPreset(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceSetCustomPresetAsDefault request
	PresetsServiceSetCustomPresetAsDefault(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceGetPreset request
	PresetsServiceGetPreset(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceSetPresetAsDefault request
	PresetsServiceSetPresetAsDefault(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceBatchGetPresets request
	PresetsServiceBatchGetPresets(ctx context.Context, params *PresetsServiceBatchGetPresetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceGetDefaultPresetSummary request
	PresetsServiceGetDefaultPresetSummary(ctx context.Context, params *PresetsServiceGetDefaultPresetSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceListPresetSummaries request
	PresetsServiceListPresetSummaries(ctx context.Context, params *PresetsServiceListPresetSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresetsServiceGetSystemDefaultPresetSummary request
	PresetsServiceGetSystemDefaultPresetSummary(ctx context.Context, params *PresetsServiceGetSystemDefaultPresetSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRoutersServiceListGlobalRouters request
	GlobalRoutersServiceListGlobalRouters(ctx context.Context, params *GlobalRoutersServiceListGlobalRoutersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRoutersServiceCreateGlobalRouterWithBody request with any body
	GlobalRoutersServiceCreateGlobalRouterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRoutersServiceCreateGlobalRouter(ctx context.Context, body GlobalRoutersServiceCreateGlobalRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRoutersServiceReplaceGlobalRouterWithBody request with any body
	GlobalRoutersServiceReplaceGlobalRouterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRoutersServiceReplaceGlobalRouter(ctx context.Context, body GlobalRoutersServiceReplaceGlobalRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRoutersServiceDeleteGlobalRouter request
	GlobalRoutersServiceDeleteGlobalRouter(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRoutersServiceGetGlobalRouter request
	GlobalRoutersServiceGetGlobalRouter(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRoutersServiceBatchGetGlobalRouters request
	GlobalRoutersServiceBatchGetGlobalRouters(ctx context.Context, params *GlobalRoutersServiceBatchGetGlobalRoutersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceCreateOutgoingWebhookWithBody request with any body
	OutgoingWebhooksServiceCreateOutgoingWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OutgoingWebhooksServiceCreateOutgoingWebhook(ctx context.Context, body OutgoingWebhooksServiceCreateOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceUpdateOutgoingWebhookWithBody request with any body
	OutgoingWebhooksServiceUpdateOutgoingWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OutgoingWebhooksServiceUpdateOutgoingWebhook(ctx context.Context, body OutgoingWebhooksServiceUpdateOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceListOutgoingWebhookTypes request
	OutgoingWebhooksServiceListOutgoingWebhookTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceGetOutgoingWebhookTypeDetails request
	OutgoingWebhooksServiceGetOutgoingWebhookTypeDetails(ctx context.Context, pType OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsParamsType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceListIbmEventNotificationsInstances request
	OutgoingWebhooksServiceListIbmEventNotificationsInstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceTestOutgoingWebhookWithBody request with any body
	OutgoingWebhooksServiceTestOutgoingWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OutgoingWebhooksServiceTestOutgoingWebhook(ctx context.Context, body OutgoingWebhooksServiceTestOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceTestExistingOutgoingWebhookWithBody request with any body
	OutgoingWebhooksServiceTestExistingOutgoingWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OutgoingWebhooksServiceTestExistingOutgoingWebhook(ctx context.Context, body OutgoingWebhooksServiceTestExistingOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceDeleteOutgoingWebhook request
	OutgoingWebhooksServiceDeleteOutgoingWebhook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceGetOutgoingWebhook request
	OutgoingWebhooksServiceGetOutgoingWebhook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceListOutgoingWebhooks request
	OutgoingWebhooksServiceListOutgoingWebhooks(ctx context.Context, params *OutgoingWebhooksServiceListOutgoingWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceListAllOutgoingWebhooks request
	OutgoingWebhooksServiceListAllOutgoingWebhooks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OutgoingWebhooksServiceListOutboundWebhooksSummary request
	OutgoingWebhooksServiceListOutboundWebhooksSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceGetCompanyPolicies request
	PoliciesServiceGetCompanyPolicies(ctx context.Context, params *PoliciesServiceGetCompanyPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceCreatePolicyWithBody request with any body
	PoliciesServiceCreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesServiceCreatePolicy(ctx context.Context, body PoliciesServiceCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceUpdatePolicyWithBody request with any body
	PoliciesServiceUpdatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesServiceUpdatePolicy(ctx context.Context, body PoliciesServiceUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceDeletePolicy request
	PoliciesServiceDeletePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceGetPolicy request
	PoliciesServiceGetPolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceAtomicOverwriteLogPoliciesWithBody request with any body
	PoliciesServiceAtomicOverwriteLogPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesServiceAtomicOverwriteLogPolicies(ctx context.Context, body PoliciesServiceAtomicOverwriteLogPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceAtomicOverwriteSpanPoliciesWithBody request with any body
	PoliciesServiceAtomicOverwriteSpanPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesServiceAtomicOverwriteSpanPolicies(ctx context.Context, body PoliciesServiceAtomicOverwriteSpanPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceAtomicBatchCreatePolicyWithBody request with any body
	PoliciesServiceAtomicBatchCreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesServiceAtomicBatchCreatePolicy(ctx context.Context, body PoliciesServiceAtomicBatchCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceBulkTestLogPoliciesWithBody request with any body
	PoliciesServiceBulkTestLogPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesServiceBulkTestLogPolicies(ctx context.Context, body PoliciesServiceBulkTestLogPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceReorderPoliciesWithBody request with any body
	PoliciesServiceReorderPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesServiceReorderPolicies(ctx context.Context, body PoliciesServiceReorderPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesServiceTogglePolicyWithBody request with any body
	PoliciesServiceTogglePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesServiceTogglePolicy(ctx context.Context, body PoliciesServiceTogglePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetentionsServiceGetRetentions request
	RetentionsServiceGetRetentions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetentionsServiceUpdateRetentionsWithBody request with any body
	RetentionsServiceUpdateRetentionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetentionsServiceUpdateRetentions(ctx context.Context, body RetentionsServiceUpdateRetentionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetentionsServiceGetRetentionsEnabled request
	RetentionsServiceGetRetentionsEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetentionsServiceActivateRetentionsWithBody request with any body
	RetentionsServiceActivateRetentionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetentionsServiceActivateRetentions(ctx context.Context, body RetentionsServiceActivateRetentionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupSetsList request
	RuleGroupSetsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupSetsCreateWithBody request with any body
	RuleGroupSetsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RuleGroupSetsCreate(ctx context.Context, body RuleGroupSetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupSetsDelete request
	RuleGroupSetsDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupSetsFetch request
	RuleGroupSetsFetch(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RuleGroupSetsUpdateWithBody request with any body
	RuleGroupSetsUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RuleGroupSetsUpdate(ctx context.Context, id string, body RuleGroupSetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScopesServiceGetTeamScopesByIds request
	ScopesServiceGetTeamScopesByIds(ctx context.Context, params *ScopesServiceGetTeamScopesByIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScopesServiceCreateScopeWithBody request with any body
	ScopesServiceCreateScopeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScopesServiceCreateScope(ctx context.Context, body ScopesServiceCreateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScopesServiceUpdateScopeWithBody request with any body
	ScopesServiceUpdateScopeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScopesServiceUpdateScope(ctx context.Context, body ScopesServiceUpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScopesServiceGetTeamScopes request
	ScopesServiceGetTeamScopes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScopesServiceDeleteScope request
	ScopesServiceDeleteScope(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlosServiceListSlos request
	SlosServiceListSlos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlosServiceCreateSloWithBody request with any body
	SlosServiceCreateSloWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlosServiceCreateSlo(ctx context.Context, body SlosServiceCreateSloJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlosServiceReplaceSloWithBody request with any body
	SlosServiceReplaceSloWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlosServiceReplaceSlo(ctx context.Context, body SlosServiceReplaceSloJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlosServiceDeleteSlo request
	SlosServiceDeleteSlo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlosServiceGetSlo request
	SlosServiceGetSlo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlosServiceBatchExecuteSlo request
	SlosServiceBatchExecuteSlo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlosServiceBatchGetSlos request
	SlosServiceBatchGetSlos(ctx context.Context, params *SlosServiceBatchGetSlosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SamlConfigurationServiceSetActiveWithBody request with any body
	SamlConfigurationServiceSetActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SamlConfigurationServiceSetActive(ctx context.Context, body SamlConfigurationServiceSetActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SamlConfigurationServiceGetConfiguration request
	SamlConfigurationServiceGetConfiguration(ctx context.Context, params *SamlConfigurationServiceGetConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SamlConfigurationServiceSetIDPParametersWithBody request with any body
	SamlConfigurationServiceSetIDPParametersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SamlConfigurationServiceSetIDPParameters(ctx context.Context, body SamlConfigurationServiceSetIDPParametersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SamlConfigurationServiceGetSPParameters request
	SamlConfigurationServiceGetSPParameters(ctx context.Context, params *SamlConfigurationServiceGetSPParametersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceGetTeamGroupByName request
	TeamPermissionsMgmtServiceGetTeamGroupByName(ctx context.Context, params *TeamPermissionsMgmtServiceGetTeamGroupByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceCreateTeamGroupWithBody request with any body
	TeamPermissionsMgmtServiceCreateTeamGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamPermissionsMgmtServiceCreateTeamGroup(ctx context.Context, body TeamPermissionsMgmtServiceCreateTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceUpdateTeamGroupWithBody request with any body
	TeamPermissionsMgmtServiceUpdateTeamGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamPermissionsMgmtServiceUpdateTeamGroup(ctx context.Context, body TeamPermissionsMgmtServiceUpdateTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceGetTeamGroups request
	TeamPermissionsMgmtServiceGetTeamGroups(ctx context.Context, params *TeamPermissionsMgmtServiceGetTeamGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceRemoveUsersFromTeamGroups request
	TeamPermissionsMgmtServiceRemoveUsersFromTeamGroups(ctx context.Context, params *TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithBody request with any body
	TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamPermissionsMgmtServiceAddUsersToTeamGroups(ctx context.Context, body TeamPermissionsMgmtServiceAddUsersToTeamGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceDeleteTeamGroup request
	TeamPermissionsMgmtServiceDeleteTeamGroup(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceGetTeamGroup request
	TeamPermissionsMgmtServiceGetTeamGroup(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceGetTeamGroupScope request
	TeamPermissionsMgmtServiceGetTeamGroupScope(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceSetTeamGroupScopeWithBody request with any body
	TeamPermissionsMgmtServiceSetTeamGroupScopeWithBody(ctx context.Context, groupIdId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamPermissionsMgmtServiceSetTeamGroupScope(ctx context.Context, groupIdId int64, body TeamPermissionsMgmtServiceSetTeamGroupScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceRemoveUsersFromTeamGroup request
	TeamPermissionsMgmtServiceRemoveUsersFromTeamGroup(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceGetGroupUsers request
	TeamPermissionsMgmtServiceGetGroupUsers(ctx context.Context, groupIdId int64, params *TeamPermissionsMgmtServiceGetGroupUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamPermissionsMgmtServiceAddUsersToTeamGroupWithBody request with any body
	TeamPermissionsMgmtServiceAddUsersToTeamGroupWithBody(ctx context.Context, groupIdId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamPermissionsMgmtServiceAddUsersToTeamGroup(ctx context.Context, groupIdId int64, body TeamPermissionsMgmtServiceAddUsersToTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsFoldersServiceListViewFolders request
	ViewsFoldersServiceListViewFolders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsFoldersServiceCreateViewFolderWithBody request with any body
	ViewsFoldersServiceCreateViewFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ViewsFoldersServiceCreateViewFolder(ctx context.Context, body ViewsFoldersServiceCreateViewFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsFoldersServiceReplaceViewFolderWithBody request with any body
	ViewsFoldersServiceReplaceViewFolderWithBody(ctx context.Context, folderId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ViewsFoldersServiceReplaceViewFolder(ctx context.Context, folderId openapi_types.UUID, body ViewsFoldersServiceReplaceViewFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsFoldersServiceDeleteViewFolder request
	ViewsFoldersServiceDeleteViewFolder(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsFoldersServiceGetViewFolder request
	ViewsFoldersServiceGetViewFolder(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsServiceListViews request
	ViewsServiceListViews(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsServiceCreateViewWithBody request with any body
	ViewsServiceCreateViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ViewsServiceCreateView(ctx context.Context, body ViewsServiceCreateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsServiceDeleteView request
	ViewsServiceDeleteView(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsServiceGetView request
	ViewsServiceGetView(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsServiceReplaceViewWithBody request with any body
	ViewsServiceReplaceViewWithBody(ctx context.Context, viewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ViewsServiceReplaceView(ctx context.Context, viewId int32, body ViewsServiceReplaceViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsServiceListActions request
	ActionsServiceListActions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsServiceCreateActionWithBody request with any body
	ActionsServiceCreateActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionsServiceCreateAction(ctx context.Context, body ActionsServiceCreateActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsServiceReplaceActionWithBody request with any body
	ActionsServiceReplaceActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionsServiceReplaceAction(ctx context.Context, body ActionsServiceReplaceActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsServiceAtomicBatchExecuteActionsWithBody request with any body
	ActionsServiceAtomicBatchExecuteActionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionsServiceAtomicBatchExecuteActions(ctx context.Context, body ActionsServiceAtomicBatchExecuteActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsServiceOrderActionsWithBody request with any body
	ActionsServiceOrderActionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionsServiceOrderActions(ctx context.Context, body ActionsServiceOrderActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsServiceDeleteAction request
	ActionsServiceDeleteAction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsServiceGetAction request
	ActionsServiceGetAction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DataUsageServiceGetDataUsage request
	DataUsageServiceGetDataUsage(ctx context.Context, params *DataUsageServiceGetDataUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DataUsageServiceGetDailyUsageEvaluationTokensWithBody request with any body
	DataUsageServiceGetDailyUsageEvaluationTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DataUsageServiceGetDailyUsageEvaluationTokens(ctx context.Context, body DataUsageServiceGetDailyUsageEvaluationTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DataUsageServiceGetDailyUsageProcessedGbsWithBody request with any body
	DataUsageServiceGetDailyUsageProcessedGbsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DataUsageServiceGetDailyUsageProcessedGbs(ctx context.Context, body DataUsageServiceGetDailyUsageProcessedGbsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DataUsageServiceGetDailyUsageUnitsWithBody request with any body
	DataUsageServiceGetDailyUsageUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DataUsageServiceGetDailyUsageUnits(ctx context.Context, body DataUsageServiceGetDailyUsageUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DataUsageServiceGetDataUsageMetricsExportStatus request
	DataUsageServiceGetDataUsageMetricsExportStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DataUsageServiceUpdateDataUsageMetricsExportStatusWithBody request with any body
	DataUsageServiceUpdateDataUsageMetricsExportStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DataUsageServiceUpdateDataUsageMetricsExportStatus(ctx context.Context, body DataUsageServiceUpdateDataUsageMetricsExportStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DataUsageServiceGetLogsCount request
	DataUsageServiceGetLogsCount(ctx context.Context, params *DataUsageServiceGetLogsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DataUsageServiceGetSpansCount request
	DataUsageServiceGetSpansCount(ctx context.Context, params *DataUsageServiceGetSpansCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TargetServiceGetTarget request
	TargetServiceGetTarget(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TargetServiceSetTargetWithBody request with any body
	TargetServiceSetTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TargetServiceSetTarget(ctx context.Context, body TargetServiceSetTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TargetServiceValidateTargetWithBody request with any body
	TargetServiceValidateTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TargetServiceValidateTarget(ctx context.Context, body TargetServiceValidateTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertDefsServiceListAlertDefs request
	AlertDefsServiceListAlertDefs(ctx context.Context, params *AlertDefsServiceListAlertDefsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertDefsServiceCreateAlertDefWithBody request with any body
	AlertDefsServiceCreateAlertDefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlertDefsServiceCreateAlertDef(ctx context.Context, body AlertDefsServiceCreateAlertDefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertDefsServiceReplaceAlertDefWithBody request with any body
	AlertDefsServiceReplaceAlertDefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlertDefsServiceReplaceAlertDef(ctx context.Context, body AlertDefsServiceReplaceAlertDefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertDefsServiceGetAlertDefByVersionId request
	AlertDefsServiceGetAlertDefByVersionId(ctx context.Context, alertVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertDefsServiceDeleteAlertDef request
	AlertDefsServiceDeleteAlertDef(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertDefsServiceGetAlertDef request
	AlertDefsServiceGetAlertDef(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertDefsServiceSetActive request
	AlertDefsServiceSetActive(ctx context.Context, id string, params *AlertDefsServiceSetActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertEventServiceGetAlertEventsStats request
	AlertEventServiceGetAlertEventsStats(ctx context.Context, params *AlertEventServiceGetAlertEventsStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertEventServiceGetAlertEvent request
	AlertEventServiceGetAlertEvent(ctx context.Context, id string, params *AlertEventServiceGetAlertEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertDefsServiceDownloadAlerts request
	AlertDefsServiceDownloadAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiKeysServiceCreateApiKeyWithBody request with any body
	ApiKeysServiceCreateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiKeysServiceCreateApiKey(ctx context.Context, body ApiKeysServiceCreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiKeysServiceGetSendDataApiKeys request
	ApiKeysServiceGetSendDataApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiKeysServiceDeleteApiKey request
	ApiKeysServiceDeleteApiKey(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiKeysServiceGetApiKey request
	ApiKeysServiceGetApiKey(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiKeysServiceUpdateApiKeyWithBody request with any body
	ApiKeysServiceUpdateApiKeyWithBody(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiKeysServiceUpdateApiKey(ctx context.Context, keyId string, body ApiKeysServiceUpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsServiceListEvents request
	EventsServiceListEvents(ctx context.Context, params *EventsServiceListEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsServiceBatchGetEvent request
	EventsServiceBatchGetEvent(ctx context.Context, params *EventsServiceBatchGetEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsServiceGetEvent request
	EventsServiceGetEvent(ctx context.Context, id string, params *EventsServiceGetEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsServiceListEventsCount request
	EventsServiceListEventsCount(ctx context.Context, params *EventsServiceListEventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsServiceGetEventsStatistics request
	EventsServiceGetEventsStatistics(ctx context.Context, params *EventsServiceGetEventsStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RuleGroupsServiceGetRuleGroupModelMappingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceGetRuleGroupModelMappingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceGetRuleGroupModelMapping(ctx context.Context, body RuleGroupsServiceGetRuleGroupModelMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceGetRuleGroupModelMappingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceBulkDeleteRuleGroup(ctx context.Context, params *RuleGroupsServiceBulkDeleteRuleGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceBulkDeleteRuleGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceListRuleGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceListRuleGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceCreateRuleGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceCreateRuleGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceCreateRuleGroup(ctx context.Context, body RuleGroupsServiceCreateRuleGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceCreateRuleGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceGetCompanyUsageLimitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceGetCompanyUsageLimitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceGetCompanyUsageLimits(ctx context.Context, body RuleGroupsServiceGetCompanyUsageLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceGetCompanyUsageLimitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceDeleteRuleGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceDeleteRuleGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceGetRuleGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceGetRuleGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceUpdateRuleGroupWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceUpdateRuleGroupRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupsServiceUpdateRuleGroup(ctx context.Context, groupId string, body RuleGroupsServiceUpdateRuleGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupsServiceUpdateRuleGroupRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceListE2M(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceListE2MRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceCreateE2MWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceCreateE2MRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceCreateE2M(ctx context.Context, body Events2MetricServiceCreateE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceCreateE2MRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceReplaceE2MWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceReplaceE2MRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceReplaceE2M(ctx context.Context, body Events2MetricServiceReplaceE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceReplaceE2MRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceAtomicBatchExecuteE2MWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceAtomicBatchExecuteE2MRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceAtomicBatchExecuteE2M(ctx context.Context, body Events2MetricServiceAtomicBatchExecuteE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceAtomicBatchExecuteE2MRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceListLabelsCardinality(ctx context.Context, params *Events2MetricServiceListLabelsCardinalityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceListLabelsCardinalityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceGetLimits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceGetLimitsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceDeleteE2M(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceDeleteE2MRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Events2MetricServiceGetE2M(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvents2MetricServiceGetE2MRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichmentServiceRemoveEnrichments(ctx context.Context, params *EnrichmentServiceRemoveEnrichmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichmentServiceRemoveEnrichmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichmentServiceGetEnrichments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichmentServiceGetEnrichmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichmentServiceAddEnrichmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichmentServiceAddEnrichmentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichmentServiceAddEnrichments(ctx context.Context, body EnrichmentServiceAddEnrichmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichmentServiceAddEnrichmentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichmentServiceGetEnrichmentLimit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichmentServiceGetEnrichmentLimitRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichmentServiceGetCompanyEnrichmentSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichmentServiceGetCompanyEnrichmentSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichmentServiceAtomicOverwriteEnrichmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichmentServiceAtomicOverwriteEnrichmentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichmentServiceAtomicOverwriteEnrichments(ctx context.Context, body EnrichmentServiceAtomicOverwriteEnrichmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichmentServiceAtomicOverwriteEnrichmentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsTcoServiceGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsTcoServiceGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsTcoServiceAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsTcoServiceAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsTcoServiceAdd(ctx context.Context, body MetricsTcoServiceAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsTcoServiceAddRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsTcoServiceDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsTcoServiceDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsTcoServiceDelete(ctx context.Context, body MetricsTcoServiceDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsTcoServiceDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceCreateAlertSchedulerRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceCreateAlertSchedulerRule(ctx context.Context, body AlertSchedulerRuleServiceCreateAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceCreateAlertSchedulerRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceUpdateAlertSchedulerRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceUpdateAlertSchedulerRule(ctx context.Context, body AlertSchedulerRuleServiceUpdateAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceUpdateAlertSchedulerRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceGetBulkAlertSchedulerRule(ctx context.Context, params *AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceGetBulkAlertSchedulerRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceCreateBulkAlertSchedulerRule(ctx context.Context, body AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRule(ctx context.Context, body AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceDeleteAlertSchedulerRule(ctx context.Context, alertSchedulerRuleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceDeleteAlertSchedulerRuleRequest(c.Server, alertSchedulerRuleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertSchedulerRuleServiceGetAlertSchedulerRule(ctx context.Context, alertSchedulerRuleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertSchedulerRuleServiceGetAlertSchedulerRuleRequest(c.Server, alertSchedulerRuleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceSaveContextualDataIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceSaveContextualDataIntegrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceSaveContextualDataIntegration(ctx context.Context, body ContextualDataIntegrationServiceSaveContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceSaveContextualDataIntegrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceUpdateContextualDataIntegrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceUpdateContextualDataIntegration(ctx context.Context, body ContextualDataIntegrationServiceUpdateContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceTestContextualDataIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceTestContextualDataIntegrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceTestContextualDataIntegration(ctx context.Context, body ContextualDataIntegrationServiceTestContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceTestContextualDataIntegrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceDeleteContextualDataIntegration(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest(c.Server, integrationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceGetContextualDataIntegrations(ctx context.Context, params *ContextualDataIntegrationServiceGetContextualDataIntegrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceGetContextualDataIntegrationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceGetContextualDataIntegrationDefinition(ctx context.Context, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContextualDataIntegrationServiceGetContextualDataIntegrationDetails(ctx context.Context, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomEnrichmentServiceGetCustomEnrichments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomEnrichmentServiceGetCustomEnrichmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomEnrichmentServiceCreateCustomEnrichmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomEnrichmentServiceCreateCustomEnrichmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomEnrichmentServiceCreateCustomEnrichment(ctx context.Context, body CustomEnrichmentServiceCreateCustomEnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomEnrichmentServiceCreateCustomEnrichmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomEnrichmentServiceUpdateCustomEnrichmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomEnrichmentServiceUpdateCustomEnrichmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomEnrichmentServiceUpdateCustomEnrichment(ctx context.Context, body CustomEnrichmentServiceUpdateCustomEnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomEnrichmentServiceUpdateCustomEnrichmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomEnrichmentServiceSearchCustomEnrichmentData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomEnrichmentServiceSearchCustomEnrichmentDataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomEnrichmentServiceDeleteCustomEnrichment(ctx context.Context, customEnrichmentId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomEnrichmentServiceDeleteCustomEnrichmentRequest(c.Server, customEnrichmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomEnrichmentServiceGetCustomEnrichment(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomEnrichmentServiceGetCustomEnrichmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceGetDashboardBySlug(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceGetDashboardBySlugRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardCatalogServiceGetDashboardCatalog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardCatalogServiceGetDashboardCatalogRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceCreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceCreateDashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceCreateDashboard(ctx context.Context, body DashboardsServiceCreateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceCreateDashboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceReplaceDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceReplaceDashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceReplaceDashboard(ctx context.Context, body DashboardsServiceReplaceDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceReplaceDashboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceDeleteDashboard(ctx context.Context, dashboardId string, params *DashboardsServiceDeleteDashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceDeleteDashboardRequest(c.Server, dashboardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceGetDashboard(ctx context.Context, dashboardId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceGetDashboardRequest(c.Server, dashboardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceReplaceDefaultDashboardWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceReplaceDefaultDashboardRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceReplaceDefaultDashboard(ctx context.Context, dashboardId string, body DashboardsServiceReplaceDefaultDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceReplaceDefaultDashboardRequest(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceAssignDashboardFolderWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceAssignDashboardFolderRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceAssignDashboardFolder(ctx context.Context, dashboardId string, body DashboardsServiceAssignDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceAssignDashboardFolderRequest(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServicePinDashboardWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServicePinDashboardRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServicePinDashboard(ctx context.Context, dashboardId string, body DashboardsServicePinDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServicePinDashboardRequest(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceUnpinDashboardWithBody(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceUnpinDashboardRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardsServiceUnpinDashboard(ctx context.Context, dashboardId string, body DashboardsServiceUnpinDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardsServiceUnpinDashboardRequest(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardFoldersServiceListDashboardFolders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardFoldersServiceListDashboardFoldersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardFoldersServiceCreateDashboardFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardFoldersServiceCreateDashboardFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardFoldersServiceCreateDashboardFolder(ctx context.Context, body DashboardFoldersServiceCreateDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardFoldersServiceCreateDashboardFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardFoldersServiceReplaceDashboardFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardFoldersServiceReplaceDashboardFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardFoldersServiceReplaceDashboardFolder(ctx context.Context, body DashboardFoldersServiceReplaceDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardFoldersServiceReplaceDashboardFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardFoldersServiceDeleteDashboardFolder(ctx context.Context, folderId string, params *DashboardFoldersServiceDeleteDashboardFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardFoldersServiceDeleteDashboardFolderRequest(c.Server, folderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DashboardFoldersServiceGetDashboardFolder(ctx context.Context, folderId string, params *DashboardFoldersServiceGetDashboardFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDashboardFoldersServiceGetDashboardFolderRequest(c.Server, folderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionDeploymentServiceDeployExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionDeploymentServiceDeployExtensionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionDeploymentServiceDeployExtension(ctx context.Context, body ExtensionDeploymentServiceDeployExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionDeploymentServiceDeployExtensionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionDeploymentServiceGetDeployedExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionDeploymentServiceGetDeployedExtensionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionDeploymentServiceUndeployExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionDeploymentServiceUndeployExtensionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionDeploymentServiceUndeployExtension(ctx context.Context, body ExtensionDeploymentServiceUndeployExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionDeploymentServiceUndeployExtensionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionDeploymentServiceUpdateExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionDeploymentServiceUpdateExtensionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionDeploymentServiceUpdateExtension(ctx context.Context, body ExtensionDeploymentServiceUpdateExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionDeploymentServiceUpdateExtensionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionTestingServiceCleanupTestingRevisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionTestingServiceCleanupTestingRevisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionTestingServiceCleanupTestingRevision(ctx context.Context, body ExtensionTestingServiceCleanupTestingRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionTestingServiceCleanupTestingRevisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionTestingServiceInitializeTestingRevisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionTestingServiceInitializeTestingRevisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionTestingServiceInitializeTestingRevision(ctx context.Context, body ExtensionTestingServiceInitializeTestingRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionTestingServiceInitializeTestingRevisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionTestingServiceTestExtensionRevisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionTestingServiceTestExtensionRevisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionTestingServiceTestExtensionRevision(ctx context.Context, body ExtensionTestingServiceTestExtensionRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionTestingServiceTestExtensionRevisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionServiceGetAllExtensionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionServiceGetAllExtensionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionServiceGetAllExtensions(ctx context.Context, body ExtensionServiceGetAllExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionServiceGetAllExtensionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtensionServiceGetExtension(ctx context.Context, id string, params *ExtensionServiceGetExtensionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtensionServiceGetExtensionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidents(ctx context.Context, body IncidentsServiceListIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceGetIncident(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceGetIncidentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceGetIncidentEvents(ctx context.Context, incidentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceGetIncidentEventsRequest(c.Server, incidentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceAcknowledgeIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceAcknowledgeIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceAcknowledgeIncidents(ctx context.Context, body IncidentsServiceAcknowledgeIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceAcknowledgeIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceAssignIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceAssignIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceAssignIncidents(ctx context.Context, body IncidentsServiceAssignIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceAssignIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceBatchGetIncident(ctx context.Context, params *IncidentsServiceBatchGetIncidentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceBatchGetIncidentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceCloseIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceCloseIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceCloseIncidents(ctx context.Context, body IncidentsServiceCloseIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceCloseIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceGetFilterValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceGetFilterValuesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceGetFilterValues(ctx context.Context, body IncidentsServiceGetFilterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceGetFilterValuesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentEventsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentEvents(ctx context.Context, body IncidentsServiceListIncidentEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentEventsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentEventsFilterValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentEventsFilterValuesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentEventsFilterValues(ctx context.Context, body IncidentsServiceListIncidentEventsFilterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentEventsFilterValuesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentEventsTotalCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentEventsTotalCountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentEventsTotalCount(ctx context.Context, body IncidentsServiceListIncidentEventsTotalCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentEventsTotalCountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentAggregationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentAggregationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceListIncidentAggregations(ctx context.Context, body IncidentsServiceListIncidentAggregationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceListIncidentAggregationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceResolveIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceResolveIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceResolveIncidents(ctx context.Context, body IncidentsServiceResolveIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceResolveIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceUnassignIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceUnassignIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsServiceUnassignIncidents(ctx context.Context, body IncidentsServiceUnassignIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsServiceUnassignIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceGetIntegrations(ctx context.Context, params *IntegrationServiceGetIntegrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceGetIntegrationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceGetIntegrationDefinition(ctx context.Context, id string, params *IntegrationServiceGetIntegrationDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceGetIntegrationDefinitionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceGetDeployedIntegration(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceGetDeployedIntegrationRequest(c.Server, integrationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceDeleteIntegration(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceDeleteIntegrationRequest(c.Server, integrationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceListManagedIntegrationKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceListManagedIntegrationKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceGetManagedIntegrationStatus(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceGetManagedIntegrationStatusRequest(c.Server, integrationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceSaveIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceSaveIntegrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceSaveIntegration(ctx context.Context, body IntegrationServiceSaveIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceSaveIntegrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceUpdateIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceUpdateIntegrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceUpdateIntegration(ctx context.Context, body IntegrationServiceUpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceUpdateIntegrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceTestIntegrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceTestIntegrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceTestIntegration(ctx context.Context, body IntegrationServiceTestIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceTestIntegrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceGetRumApplicationVersionData(ctx context.Context, params *IntegrationServiceGetRumApplicationVersionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceGetRumApplicationVersionDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceSyncRumDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceSyncRumDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceSyncRumData(ctx context.Context, body IntegrationServiceSyncRumDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceSyncRumDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceGetTemplate(ctx context.Context, params *IntegrationServiceGetTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceGetTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationServiceGetIntegrationDetails(ctx context.Context, id string, params *IntegrationServiceGetIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationServiceGetIntegrationDetailsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceGetTenantConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceGetTenantConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceConfigureTenantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceConfigureTenantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceConfigureTenant(ctx context.Context, body MetricsConfiguratorPublicServiceConfigureTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceConfigureTenantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceUpdate(ctx context.Context, body MetricsConfiguratorPublicServiceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceDisableArchive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceDisableArchiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceEnableArchive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceEnableArchiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceValidateBucketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceValidateBucketRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsConfiguratorPublicServiceValidateBucket(ctx context.Context, body MetricsConfiguratorPublicServiceValidateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsConfiguratorPublicServiceValidateBucketRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceReplaceConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceReplaceConnectorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceReplaceConnector(ctx context.Context, body ConnectorsServiceReplaceConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceReplaceConnectorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceListConnectors(ctx context.Context, params *ConnectorsServiceListConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceListConnectorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceCreateConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceCreateConnectorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceCreateConnector(ctx context.Context, body ConnectorsServiceCreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceCreateConnectorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceDeleteConnector(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceDeleteConnectorRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceGetConnector(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceGetConnectorRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceBatchGetConnectors(ctx context.Context, params *ConnectorsServiceBatchGetConnectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceBatchGetConnectorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceBatchGetConnectorSummaries(ctx context.Context, params *ConnectorsServiceBatchGetConnectorSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceBatchGetConnectorSummariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceGetConnectorTypeSummaries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceGetConnectorTypeSummariesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectorsServiceListConnectorSummaries(ctx context.Context, params *ConnectorsServiceListConnectorSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectorsServiceListConnectorSummariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntitiesServiceListEntityTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntitiesServiceListEntityTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EntitiesServiceListEntitySubTypes(ctx context.Context, entityType EntitiesServiceListEntitySubTypesParamsEntityType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEntitiesServiceListEntitySubTypesRequest(c.Server, entityType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestConnectorConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestConnectorConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestConnectorConfig(ctx context.Context, body TestingServiceTestConnectorConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestConnectorConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestDestination(ctx context.Context, body TestingServiceTestDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestExistingConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestExistingConnectorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestExistingConnector(ctx context.Context, body TestingServiceTestExistingConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestExistingConnectorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestExistingPresetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestExistingPresetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestExistingPreset(ctx context.Context, body TestingServiceTestExistingPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestExistingPresetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestPresetConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestPresetConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestPresetConfig(ctx context.Context, body TestingServiceTestPresetConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestPresetConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestRoutingConditionValidWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestRoutingConditionValidRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestRoutingConditionValid(ctx context.Context, body TestingServiceTestRoutingConditionValidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestRoutingConditionValidRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestTemplateRenderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestTemplateRenderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestingServiceTestTemplateRender(ctx context.Context, body TestingServiceTestTemplateRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestingServiceTestTemplateRenderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceCreateCustomPresetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceCreateCustomPresetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceCreateCustomPreset(ctx context.Context, body PresetsServiceCreateCustomPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceCreateCustomPresetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceReplaceCustomPresetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceReplaceCustomPresetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceReplaceCustomPreset(ctx context.Context, body PresetsServiceReplaceCustomPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceReplaceCustomPresetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceDeleteCustomPreset(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceDeleteCustomPresetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceSetCustomPresetAsDefault(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceSetCustomPresetAsDefaultRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceGetPreset(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceGetPresetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceSetPresetAsDefault(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceSetPresetAsDefaultRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceBatchGetPresets(ctx context.Context, params *PresetsServiceBatchGetPresetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceBatchGetPresetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceGetDefaultPresetSummary(ctx context.Context, params *PresetsServiceGetDefaultPresetSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceGetDefaultPresetSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceListPresetSummaries(ctx context.Context, params *PresetsServiceListPresetSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceListPresetSummariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresetsServiceGetSystemDefaultPresetSummary(ctx context.Context, params *PresetsServiceGetSystemDefaultPresetSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresetsServiceGetSystemDefaultPresetSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRoutersServiceListGlobalRouters(ctx context.Context, params *GlobalRoutersServiceListGlobalRoutersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRoutersServiceListGlobalRoutersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRoutersServiceCreateGlobalRouterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRoutersServiceCreateGlobalRouterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRoutersServiceCreateGlobalRouter(ctx context.Context, body GlobalRoutersServiceCreateGlobalRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRoutersServiceCreateGlobalRouterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRoutersServiceReplaceGlobalRouterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRoutersServiceReplaceGlobalRouterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRoutersServiceReplaceGlobalRouter(ctx context.Context, body GlobalRoutersServiceReplaceGlobalRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRoutersServiceReplaceGlobalRouterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRoutersServiceDeleteGlobalRouter(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRoutersServiceDeleteGlobalRouterRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRoutersServiceGetGlobalRouter(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRoutersServiceGetGlobalRouterRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRoutersServiceBatchGetGlobalRouters(ctx context.Context, params *GlobalRoutersServiceBatchGetGlobalRoutersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRoutersServiceBatchGetGlobalRoutersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceCreateOutgoingWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceCreateOutgoingWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceCreateOutgoingWebhook(ctx context.Context, body OutgoingWebhooksServiceCreateOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceCreateOutgoingWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceUpdateOutgoingWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceUpdateOutgoingWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceUpdateOutgoingWebhook(ctx context.Context, body OutgoingWebhooksServiceUpdateOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceUpdateOutgoingWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceListOutgoingWebhookTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceListOutgoingWebhookTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceGetOutgoingWebhookTypeDetails(ctx context.Context, pType OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsParamsType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceListIbmEventNotificationsInstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceListIbmEventNotificationsInstancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceTestOutgoingWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceTestOutgoingWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceTestOutgoingWebhook(ctx context.Context, body OutgoingWebhooksServiceTestOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceTestOutgoingWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceTestExistingOutgoingWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceTestExistingOutgoingWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceTestExistingOutgoingWebhook(ctx context.Context, body OutgoingWebhooksServiceTestExistingOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceDeleteOutgoingWebhook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceDeleteOutgoingWebhookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceGetOutgoingWebhook(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceGetOutgoingWebhookRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceListOutgoingWebhooks(ctx context.Context, params *OutgoingWebhooksServiceListOutgoingWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceListOutgoingWebhooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceListAllOutgoingWebhooks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceListAllOutgoingWebhooksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OutgoingWebhooksServiceListOutboundWebhooksSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceGetCompanyPolicies(ctx context.Context, params *PoliciesServiceGetCompanyPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceGetCompanyPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceCreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceCreatePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceCreatePolicy(ctx context.Context, body PoliciesServiceCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceCreatePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceUpdatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceUpdatePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceUpdatePolicy(ctx context.Context, body PoliciesServiceUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceUpdatePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceDeletePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceDeletePolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceGetPolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceGetPolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceAtomicOverwriteLogPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceAtomicOverwriteLogPoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceAtomicOverwriteLogPolicies(ctx context.Context, body PoliciesServiceAtomicOverwriteLogPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceAtomicOverwriteLogPoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceAtomicOverwriteSpanPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceAtomicOverwriteSpanPoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceAtomicOverwriteSpanPolicies(ctx context.Context, body PoliciesServiceAtomicOverwriteSpanPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceAtomicOverwriteSpanPoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceAtomicBatchCreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceAtomicBatchCreatePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceAtomicBatchCreatePolicy(ctx context.Context, body PoliciesServiceAtomicBatchCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceAtomicBatchCreatePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceBulkTestLogPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceBulkTestLogPoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceBulkTestLogPolicies(ctx context.Context, body PoliciesServiceBulkTestLogPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceBulkTestLogPoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceReorderPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceReorderPoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceReorderPolicies(ctx context.Context, body PoliciesServiceReorderPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceReorderPoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceTogglePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceTogglePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesServiceTogglePolicy(ctx context.Context, body PoliciesServiceTogglePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesServiceTogglePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetentionsServiceGetRetentions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetentionsServiceGetRetentionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetentionsServiceUpdateRetentionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetentionsServiceUpdateRetentionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetentionsServiceUpdateRetentions(ctx context.Context, body RetentionsServiceUpdateRetentionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetentionsServiceUpdateRetentionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetentionsServiceGetRetentionsEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetentionsServiceGetRetentionsEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetentionsServiceActivateRetentionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetentionsServiceActivateRetentionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetentionsServiceActivateRetentions(ctx context.Context, body RetentionsServiceActivateRetentionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetentionsServiceActivateRetentionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupSetsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupSetsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupSetsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupSetsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupSetsCreate(ctx context.Context, body RuleGroupSetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupSetsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupSetsDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupSetsDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupSetsFetch(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupSetsFetchRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupSetsUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupSetsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RuleGroupSetsUpdate(ctx context.Context, id string, body RuleGroupSetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRuleGroupSetsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScopesServiceGetTeamScopesByIds(ctx context.Context, params *ScopesServiceGetTeamScopesByIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScopesServiceGetTeamScopesByIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScopesServiceCreateScopeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScopesServiceCreateScopeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScopesServiceCreateScope(ctx context.Context, body ScopesServiceCreateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScopesServiceCreateScopeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScopesServiceUpdateScopeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScopesServiceUpdateScopeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScopesServiceUpdateScope(ctx context.Context, body ScopesServiceUpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScopesServiceUpdateScopeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScopesServiceGetTeamScopes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScopesServiceGetTeamScopesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScopesServiceDeleteScope(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScopesServiceDeleteScopeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceListSlos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceListSlosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceCreateSloWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceCreateSloRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceCreateSlo(ctx context.Context, body SlosServiceCreateSloJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceCreateSloRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceReplaceSloWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceReplaceSloRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceReplaceSlo(ctx context.Context, body SlosServiceReplaceSloJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceReplaceSloRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceDeleteSlo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceDeleteSloRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceGetSlo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceGetSloRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceBatchExecuteSlo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceBatchExecuteSloRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlosServiceBatchGetSlos(ctx context.Context, params *SlosServiceBatchGetSlosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlosServiceBatchGetSlosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SamlConfigurationServiceSetActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSamlConfigurationServiceSetActiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SamlConfigurationServiceSetActive(ctx context.Context, body SamlConfigurationServiceSetActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSamlConfigurationServiceSetActiveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SamlConfigurationServiceGetConfiguration(ctx context.Context, params *SamlConfigurationServiceGetConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSamlConfigurationServiceGetConfigurationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SamlConfigurationServiceSetIDPParametersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSamlConfigurationServiceSetIDPParametersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SamlConfigurationServiceSetIDPParameters(ctx context.Context, body SamlConfigurationServiceSetIDPParametersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSamlConfigurationServiceSetIDPParametersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SamlConfigurationServiceGetSPParameters(ctx context.Context, params *SamlConfigurationServiceGetSPParametersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSamlConfigurationServiceGetSPParametersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceGetTeamGroupByName(ctx context.Context, params *TeamPermissionsMgmtServiceGetTeamGroupByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceGetTeamGroupByNameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceCreateTeamGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceCreateTeamGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceCreateTeamGroup(ctx context.Context, body TeamPermissionsMgmtServiceCreateTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceCreateTeamGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceUpdateTeamGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceUpdateTeamGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceUpdateTeamGroup(ctx context.Context, body TeamPermissionsMgmtServiceUpdateTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceUpdateTeamGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceGetTeamGroups(ctx context.Context, params *TeamPermissionsMgmtServiceGetTeamGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceGetTeamGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceRemoveUsersFromTeamGroups(ctx context.Context, params *TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceAddUsersToTeamGroups(ctx context.Context, body TeamPermissionsMgmtServiceAddUsersToTeamGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceDeleteTeamGroup(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceDeleteTeamGroupRequest(c.Server, groupIdId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceGetTeamGroup(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceGetTeamGroupRequest(c.Server, groupIdId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceGetTeamGroupScope(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceGetTeamGroupScopeRequest(c.Server, groupIdId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceSetTeamGroupScopeWithBody(ctx context.Context, groupIdId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceSetTeamGroupScopeRequestWithBody(c.Server, groupIdId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceSetTeamGroupScope(ctx context.Context, groupIdId int64, body TeamPermissionsMgmtServiceSetTeamGroupScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceSetTeamGroupScopeRequest(c.Server, groupIdId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceRemoveUsersFromTeamGroup(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest(c.Server, groupIdId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceGetGroupUsers(ctx context.Context, groupIdId int64, params *TeamPermissionsMgmtServiceGetGroupUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceGetGroupUsersRequest(c.Server, groupIdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceAddUsersToTeamGroupWithBody(ctx context.Context, groupIdId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceAddUsersToTeamGroupRequestWithBody(c.Server, groupIdId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamPermissionsMgmtServiceAddUsersToTeamGroup(ctx context.Context, groupIdId int64, body TeamPermissionsMgmtServiceAddUsersToTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest(c.Server, groupIdId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsFoldersServiceListViewFolders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsFoldersServiceListViewFoldersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsFoldersServiceCreateViewFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsFoldersServiceCreateViewFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsFoldersServiceCreateViewFolder(ctx context.Context, body ViewsFoldersServiceCreateViewFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsFoldersServiceCreateViewFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsFoldersServiceReplaceViewFolderWithBody(ctx context.Context, folderId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsFoldersServiceReplaceViewFolderRequestWithBody(c.Server, folderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsFoldersServiceReplaceViewFolder(ctx context.Context, folderId openapi_types.UUID, body ViewsFoldersServiceReplaceViewFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsFoldersServiceReplaceViewFolderRequest(c.Server, folderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsFoldersServiceDeleteViewFolder(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsFoldersServiceDeleteViewFolderRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsFoldersServiceGetViewFolder(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsFoldersServiceGetViewFolderRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsServiceListViews(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsServiceListViewsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsServiceCreateViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsServiceCreateViewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsServiceCreateView(ctx context.Context, body ViewsServiceCreateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsServiceCreateViewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsServiceDeleteView(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsServiceDeleteViewRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsServiceGetView(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsServiceGetViewRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsServiceReplaceViewWithBody(ctx context.Context, viewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsServiceReplaceViewRequestWithBody(c.Server, viewId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsServiceReplaceView(ctx context.Context, viewId int32, body ViewsServiceReplaceViewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsServiceReplaceViewRequest(c.Server, viewId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceListActions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceListActionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceCreateActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceCreateActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceCreateAction(ctx context.Context, body ActionsServiceCreateActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceCreateActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceReplaceActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceReplaceActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceReplaceAction(ctx context.Context, body ActionsServiceReplaceActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceReplaceActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceAtomicBatchExecuteActionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceAtomicBatchExecuteActionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceAtomicBatchExecuteActions(ctx context.Context, body ActionsServiceAtomicBatchExecuteActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceAtomicBatchExecuteActionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceOrderActionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceOrderActionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceOrderActions(ctx context.Context, body ActionsServiceOrderActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceOrderActionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceDeleteAction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceDeleteActionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsServiceGetAction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsServiceGetActionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetDataUsage(ctx context.Context, params *DataUsageServiceGetDataUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetDataUsageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetDailyUsageEvaluationTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetDailyUsageEvaluationTokensRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetDailyUsageEvaluationTokens(ctx context.Context, body DataUsageServiceGetDailyUsageEvaluationTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetDailyUsageEvaluationTokensRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetDailyUsageProcessedGbsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetDailyUsageProcessedGbsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetDailyUsageProcessedGbs(ctx context.Context, body DataUsageServiceGetDailyUsageProcessedGbsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetDailyUsageProcessedGbsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetDailyUsageUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetDailyUsageUnitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetDailyUsageUnits(ctx context.Context, body DataUsageServiceGetDailyUsageUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetDailyUsageUnitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetDataUsageMetricsExportStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetDataUsageMetricsExportStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceUpdateDataUsageMetricsExportStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceUpdateDataUsageMetricsExportStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceUpdateDataUsageMetricsExportStatus(ctx context.Context, body DataUsageServiceUpdateDataUsageMetricsExportStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceUpdateDataUsageMetricsExportStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetLogsCount(ctx context.Context, params *DataUsageServiceGetLogsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetLogsCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DataUsageServiceGetSpansCount(ctx context.Context, params *DataUsageServiceGetSpansCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDataUsageServiceGetSpansCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TargetServiceGetTarget(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTargetServiceGetTargetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TargetServiceSetTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTargetServiceSetTargetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TargetServiceSetTarget(ctx context.Context, body TargetServiceSetTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTargetServiceSetTargetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TargetServiceValidateTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTargetServiceValidateTargetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TargetServiceValidateTarget(ctx context.Context, body TargetServiceValidateTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTargetServiceValidateTargetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceListAlertDefs(ctx context.Context, params *AlertDefsServiceListAlertDefsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceListAlertDefsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceCreateAlertDefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceCreateAlertDefRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceCreateAlertDef(ctx context.Context, body AlertDefsServiceCreateAlertDefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceCreateAlertDefRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceReplaceAlertDefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceReplaceAlertDefRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceReplaceAlertDef(ctx context.Context, body AlertDefsServiceReplaceAlertDefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceReplaceAlertDefRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceGetAlertDefByVersionId(ctx context.Context, alertVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceGetAlertDefByVersionIdRequest(c.Server, alertVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceDeleteAlertDef(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceDeleteAlertDefRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceGetAlertDef(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceGetAlertDefRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceSetActive(ctx context.Context, id string, params *AlertDefsServiceSetActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceSetActiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertEventServiceGetAlertEventsStats(ctx context.Context, params *AlertEventServiceGetAlertEventsStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertEventServiceGetAlertEventsStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertEventServiceGetAlertEvent(ctx context.Context, id string, params *AlertEventServiceGetAlertEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertEventServiceGetAlertEventRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertDefsServiceDownloadAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDefsServiceDownloadAlertsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiKeysServiceCreateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiKeysServiceCreateApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiKeysServiceCreateApiKey(ctx context.Context, body ApiKeysServiceCreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiKeysServiceCreateApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiKeysServiceGetSendDataApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiKeysServiceGetSendDataApiKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiKeysServiceDeleteApiKey(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiKeysServiceDeleteApiKeyRequest(c.Server, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiKeysServiceGetApiKey(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiKeysServiceGetApiKeyRequest(c.Server, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiKeysServiceUpdateApiKeyWithBody(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiKeysServiceUpdateApiKeyRequestWithBody(c.Server, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiKeysServiceUpdateApiKey(ctx context.Context, keyId string, body ApiKeysServiceUpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiKeysServiceUpdateApiKeyRequest(c.Server, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsServiceListEvents(ctx context.Context, params *EventsServiceListEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsServiceListEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsServiceBatchGetEvent(ctx context.Context, params *EventsServiceBatchGetEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsServiceBatchGetEventRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsServiceGetEvent(ctx context.Context, id string, params *EventsServiceGetEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsServiceGetEventRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsServiceListEventsCount(ctx context.Context, params *EventsServiceListEventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsServiceListEventsCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsServiceGetEventsStatistics(ctx context.Context, params *EventsServiceGetEventsStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsServiceGetEventsStatisticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRuleGroupsServiceGetRuleGroupModelMappingRequest calls the generic RuleGroupsServiceGetRuleGroupModelMapping builder with application/json body
func NewRuleGroupsServiceGetRuleGroupModelMappingRequest(server string, body RuleGroupsServiceGetRuleGroupModelMappingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRuleGroupsServiceGetRuleGroupModelMappingRequestWithBody(server, "application/json", bodyReader)
}

// NewRuleGroupsServiceGetRuleGroupModelMappingRequestWithBody generates requests for RuleGroupsServiceGetRuleGroupModelMapping with any type of body
func NewRuleGroupsServiceGetRuleGroupModelMappingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rulegroup-mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRuleGroupsServiceBulkDeleteRuleGroupRequest generates requests for RuleGroupsServiceBulkDeleteRuleGroup
func NewRuleGroupsServiceBulkDeleteRuleGroupRequest(server string, params *RuleGroupsServiceBulkDeleteRuleGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rulegroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupIds", runtime.ParamLocationQuery, *params.GroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleGroupsServiceListRuleGroupsRequest generates requests for RuleGroupsServiceListRuleGroups
func NewRuleGroupsServiceListRuleGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rulegroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleGroupsServiceCreateRuleGroupRequest calls the generic RuleGroupsServiceCreateRuleGroup builder with application/json body
func NewRuleGroupsServiceCreateRuleGroupRequest(server string, body RuleGroupsServiceCreateRuleGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRuleGroupsServiceCreateRuleGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewRuleGroupsServiceCreateRuleGroupRequestWithBody generates requests for RuleGroupsServiceCreateRuleGroup with any type of body
func NewRuleGroupsServiceCreateRuleGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rulegroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRuleGroupsServiceGetCompanyUsageLimitsRequest calls the generic RuleGroupsServiceGetCompanyUsageLimits builder with application/json body
func NewRuleGroupsServiceGetCompanyUsageLimitsRequest(server string, body RuleGroupsServiceGetCompanyUsageLimitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRuleGroupsServiceGetCompanyUsageLimitsRequestWithBody(server, "application/json", bodyReader)
}

// NewRuleGroupsServiceGetCompanyUsageLimitsRequestWithBody generates requests for RuleGroupsServiceGetCompanyUsageLimits with any type of body
func NewRuleGroupsServiceGetCompanyUsageLimitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rulegroups/company-limits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRuleGroupsServiceDeleteRuleGroupRequest generates requests for RuleGroupsServiceDeleteRuleGroup
func NewRuleGroupsServiceDeleteRuleGroupRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rulegroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleGroupsServiceGetRuleGroupRequest generates requests for RuleGroupsServiceGetRuleGroup
func NewRuleGroupsServiceGetRuleGroupRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rulegroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleGroupsServiceUpdateRuleGroupRequest calls the generic RuleGroupsServiceUpdateRuleGroup builder with application/json body
func NewRuleGroupsServiceUpdateRuleGroupRequest(server string, groupId string, body RuleGroupsServiceUpdateRuleGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRuleGroupsServiceUpdateRuleGroupRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewRuleGroupsServiceUpdateRuleGroupRequestWithBody generates requests for RuleGroupsServiceUpdateRuleGroup with any type of body
func NewRuleGroupsServiceUpdateRuleGroupRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rulegroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvents2MetricServiceListE2MRequest generates requests for Events2MetricServiceListE2M
func NewEvents2MetricServiceListE2MRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/events2metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvents2MetricServiceCreateE2MRequest calls the generic Events2MetricServiceCreateE2M builder with application/json body
func NewEvents2MetricServiceCreateE2MRequest(server string, body Events2MetricServiceCreateE2MJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvents2MetricServiceCreateE2MRequestWithBody(server, "application/json", bodyReader)
}

// NewEvents2MetricServiceCreateE2MRequestWithBody generates requests for Events2MetricServiceCreateE2M with any type of body
func NewEvents2MetricServiceCreateE2MRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/events2metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvents2MetricServiceReplaceE2MRequest calls the generic Events2MetricServiceReplaceE2M builder with application/json body
func NewEvents2MetricServiceReplaceE2MRequest(server string, body Events2MetricServiceReplaceE2MJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvents2MetricServiceReplaceE2MRequestWithBody(server, "application/json", bodyReader)
}

// NewEvents2MetricServiceReplaceE2MRequestWithBody generates requests for Events2MetricServiceReplaceE2M with any type of body
func NewEvents2MetricServiceReplaceE2MRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/events2metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvents2MetricServiceAtomicBatchExecuteE2MRequest calls the generic Events2MetricServiceAtomicBatchExecuteE2M builder with application/json body
func NewEvents2MetricServiceAtomicBatchExecuteE2MRequest(server string, body Events2MetricServiceAtomicBatchExecuteE2MJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvents2MetricServiceAtomicBatchExecuteE2MRequestWithBody(server, "application/json", bodyReader)
}

// NewEvents2MetricServiceAtomicBatchExecuteE2MRequestWithBody generates requests for Events2MetricServiceAtomicBatchExecuteE2M with any type of body
func NewEvents2MetricServiceAtomicBatchExecuteE2MRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/events2metrics/atomic_batch_execute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvents2MetricServiceListLabelsCardinalityRequest generates requests for Events2MetricServiceListLabelsCardinality
func NewEvents2MetricServiceListLabelsCardinalityRequest(server string, params *Events2MetricServiceListLabelsCardinalityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/events2metrics/labels_cardinality")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SpansQueryLucene != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spansQuery.lucene", runtime.ParamLocationQuery, *params.SpansQueryLucene); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpansQueryApplicationnameFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spansQuery.applicationnameFilters", runtime.ParamLocationQuery, *params.SpansQueryApplicationnameFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpansQuerySubsystemnameFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spansQuery.subsystemnameFilters", runtime.ParamLocationQuery, *params.SpansQuerySubsystemnameFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpansQueryActionFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spansQuery.actionFilters", runtime.ParamLocationQuery, *params.SpansQueryActionFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpansQueryServiceFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spansQuery.serviceFilters", runtime.ParamLocationQuery, *params.SpansQueryServiceFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LogsQueryLucene != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logsQuery.lucene", runtime.ParamLocationQuery, *params.LogsQueryLucene); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LogsQueryAlias != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logsQuery.alias", runtime.ParamLocationQuery, *params.LogsQueryAlias); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LogsQueryApplicationnameFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logsQuery.applicationnameFilters", runtime.ParamLocationQuery, *params.LogsQueryApplicationnameFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LogsQuerySubsystemnameFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logsQuery.subsystemnameFilters", runtime.ParamLocationQuery, *params.LogsQuerySubsystemnameFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LogsQuerySeverityFilters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logsQuery.severityFilters", runtime.ParamLocationQuery, *params.LogsQuerySeverityFilters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvents2MetricServiceGetLimitsRequest generates requests for Events2MetricServiceGetLimits
func NewEvents2MetricServiceGetLimitsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/events2metrics/limits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvents2MetricServiceDeleteE2MRequest generates requests for Events2MetricServiceDeleteE2M
func NewEvents2MetricServiceDeleteE2MRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/events2metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvents2MetricServiceGetE2MRequest generates requests for Events2MetricServiceGetE2M
func NewEvents2MetricServiceGetE2MRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/events2metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnrichmentServiceRemoveEnrichmentsRequest generates requests for EnrichmentServiceRemoveEnrichments
func NewEnrichmentServiceRemoveEnrichmentsRequest(server string, params *EnrichmentServiceRemoveEnrichmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enrichments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enrichmentIds", runtime.ParamLocationQuery, params.EnrichmentIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnrichmentServiceGetEnrichmentsRequest generates requests for EnrichmentServiceGetEnrichments
func NewEnrichmentServiceGetEnrichmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enrichments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnrichmentServiceAddEnrichmentsRequest calls the generic EnrichmentServiceAddEnrichments builder with application/json body
func NewEnrichmentServiceAddEnrichmentsRequest(server string, body EnrichmentServiceAddEnrichmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnrichmentServiceAddEnrichmentsRequestWithBody(server, "application/json", bodyReader)
}

// NewEnrichmentServiceAddEnrichmentsRequestWithBody generates requests for EnrichmentServiceAddEnrichments with any type of body
func NewEnrichmentServiceAddEnrichmentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enrichments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnrichmentServiceGetEnrichmentLimitRequest generates requests for EnrichmentServiceGetEnrichmentLimit
func NewEnrichmentServiceGetEnrichmentLimitRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enrichments/limit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnrichmentServiceGetCompanyEnrichmentSettingsRequest generates requests for EnrichmentServiceGetCompanyEnrichmentSettings
func NewEnrichmentServiceGetCompanyEnrichmentSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enrichments/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnrichmentServiceAtomicOverwriteEnrichmentsRequest calls the generic EnrichmentServiceAtomicOverwriteEnrichments builder with application/json body
func NewEnrichmentServiceAtomicOverwriteEnrichmentsRequest(server string, body EnrichmentServiceAtomicOverwriteEnrichmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnrichmentServiceAtomicOverwriteEnrichmentsRequestWithBody(server, "application/json", bodyReader)
}

// NewEnrichmentServiceAtomicOverwriteEnrichmentsRequestWithBody generates requests for EnrichmentServiceAtomicOverwriteEnrichments with any type of body
func NewEnrichmentServiceAtomicOverwriteEnrichmentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enrichments:atomicOverwrite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetricsTcoServiceGetRequest generates requests for MetricsTcoServiceGet
func NewMetricsTcoServiceGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics-tco")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetricsTcoServiceAddRequest calls the generic MetricsTcoServiceAdd builder with application/json body
func NewMetricsTcoServiceAddRequest(server string, body MetricsTcoServiceAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetricsTcoServiceAddRequestWithBody(server, "application/json", bodyReader)
}

// NewMetricsTcoServiceAddRequestWithBody generates requests for MetricsTcoServiceAdd with any type of body
func NewMetricsTcoServiceAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics-tco/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetricsTcoServiceDeleteRequest calls the generic MetricsTcoServiceDelete builder with application/json body
func NewMetricsTcoServiceDeleteRequest(server string, body MetricsTcoServiceDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetricsTcoServiceDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewMetricsTcoServiceDeleteRequestWithBody generates requests for MetricsTcoServiceDelete with any type of body
func NewMetricsTcoServiceDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics-tco/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlertSchedulerRuleServiceCreateAlertSchedulerRuleRequest calls the generic AlertSchedulerRuleServiceCreateAlertSchedulerRule builder with application/json body
func NewAlertSchedulerRuleServiceCreateAlertSchedulerRuleRequest(server string, body AlertSchedulerRuleServiceCreateAlertSchedulerRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlertSchedulerRuleServiceCreateAlertSchedulerRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewAlertSchedulerRuleServiceCreateAlertSchedulerRuleRequestWithBody generates requests for AlertSchedulerRuleServiceCreateAlertSchedulerRule with any type of body
func NewAlertSchedulerRuleServiceCreateAlertSchedulerRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert-scheduler-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlertSchedulerRuleServiceUpdateAlertSchedulerRuleRequest calls the generic AlertSchedulerRuleServiceUpdateAlertSchedulerRule builder with application/json body
func NewAlertSchedulerRuleServiceUpdateAlertSchedulerRuleRequest(server string, body AlertSchedulerRuleServiceUpdateAlertSchedulerRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlertSchedulerRuleServiceUpdateAlertSchedulerRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewAlertSchedulerRuleServiceUpdateAlertSchedulerRuleRequestWithBody generates requests for AlertSchedulerRuleServiceUpdateAlertSchedulerRule with any type of body
func NewAlertSchedulerRuleServiceUpdateAlertSchedulerRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert-scheduler-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlertSchedulerRuleServiceGetBulkAlertSchedulerRuleRequest generates requests for AlertSchedulerRuleServiceGetBulkAlertSchedulerRule
func NewAlertSchedulerRuleServiceGetBulkAlertSchedulerRuleRequest(server string, params *AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert-scheduler-rules/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActiveTimeframeStartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activeTimeframe.startTime", runtime.ParamLocationQuery, *params.ActiveTimeframeStartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActiveTimeframeEndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activeTimeframe.endTime", runtime.ParamLocationQuery, *params.ActiveTimeframeEndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActiveTimeframeTimezone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activeTimeframe.timezone", runtime.ParamLocationQuery, *params.ActiveTimeframeTimezone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlertSchedulerRulesIdsAlertSchedulerIdsAlertSchedulerRuleIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertSchedulerRulesIds.alertSchedulerIds.alertSchedulerRuleIds", runtime.ParamLocationQuery, *params.AlertSchedulerRulesIdsAlertSchedulerIdsAlertSchedulerRuleIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlertSchedulerRulesIdsAlertSchedulerVersionIdsAlertSchedulerRuleVersionIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertSchedulerRulesIds.alertSchedulerVersionIds.alertSchedulerRuleVersionIds", runtime.ParamLocationQuery, *params.AlertSchedulerRulesIdsAlertSchedulerVersionIdsAlertSchedulerRuleVersionIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NextPageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextPageToken", runtime.ParamLocationQuery, *params.NextPageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleRequest calls the generic AlertSchedulerRuleServiceCreateBulkAlertSchedulerRule builder with application/json body
func NewAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleRequest(server string, body AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleRequestWithBody generates requests for AlertSchedulerRuleServiceCreateBulkAlertSchedulerRule with any type of body
func NewAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert-scheduler-rules/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleRequest calls the generic AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRule builder with application/json body
func NewAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleRequest(server string, body AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleRequestWithBody generates requests for AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRule with any type of body
func NewAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert-scheduler-rules/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlertSchedulerRuleServiceDeleteAlertSchedulerRuleRequest generates requests for AlertSchedulerRuleServiceDeleteAlertSchedulerRule
func NewAlertSchedulerRuleServiceDeleteAlertSchedulerRuleRequest(server string, alertSchedulerRuleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alertSchedulerRuleId", runtime.ParamLocationPath, alertSchedulerRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert-scheduler-rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertSchedulerRuleServiceGetAlertSchedulerRuleRequest generates requests for AlertSchedulerRuleServiceGetAlertSchedulerRule
func NewAlertSchedulerRuleServiceGetAlertSchedulerRuleRequest(server string, alertSchedulerRuleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alertSchedulerRuleId", runtime.ParamLocationPath, alertSchedulerRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/alert-scheduler-rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextualDataIntegrationServiceSaveContextualDataIntegrationRequest calls the generic ContextualDataIntegrationServiceSaveContextualDataIntegration builder with application/json body
func NewContextualDataIntegrationServiceSaveContextualDataIntegrationRequest(server string, body ContextualDataIntegrationServiceSaveContextualDataIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContextualDataIntegrationServiceSaveContextualDataIntegrationRequestWithBody(server, "application/json", bodyReader)
}

// NewContextualDataIntegrationServiceSaveContextualDataIntegrationRequestWithBody generates requests for ContextualDataIntegrationServiceSaveContextualDataIntegration with any type of body
func NewContextualDataIntegrationServiceSaveContextualDataIntegrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/contextual-data/integration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest calls the generic ContextualDataIntegrationServiceUpdateContextualDataIntegration builder with application/json body
func NewContextualDataIntegrationServiceUpdateContextualDataIntegrationRequest(server string, body ContextualDataIntegrationServiceUpdateContextualDataIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContextualDataIntegrationServiceUpdateContextualDataIntegrationRequestWithBody(server, "application/json", bodyReader)
}

// NewContextualDataIntegrationServiceUpdateContextualDataIntegrationRequestWithBody generates requests for ContextualDataIntegrationServiceUpdateContextualDataIntegration with any type of body
func NewContextualDataIntegrationServiceUpdateContextualDataIntegrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/contextual-data/integration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContextualDataIntegrationServiceTestContextualDataIntegrationRequest calls the generic ContextualDataIntegrationServiceTestContextualDataIntegration builder with application/json body
func NewContextualDataIntegrationServiceTestContextualDataIntegrationRequest(server string, body ContextualDataIntegrationServiceTestContextualDataIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContextualDataIntegrationServiceTestContextualDataIntegrationRequestWithBody(server, "application/json", bodyReader)
}

// NewContextualDataIntegrationServiceTestContextualDataIntegrationRequestWithBody generates requests for ContextualDataIntegrationServiceTestContextualDataIntegration with any type of body
func NewContextualDataIntegrationServiceTestContextualDataIntegrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/contextual-data/integration/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest generates requests for ContextualDataIntegrationServiceDeleteContextualDataIntegration
func NewContextualDataIntegrationServiceDeleteContextualDataIntegrationRequest(server string, integrationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationId", runtime.ParamLocationPath, integrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/contextual-data/integration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextualDataIntegrationServiceGetContextualDataIntegrationsRequest generates requests for ContextualDataIntegrationServiceGetContextualDataIntegrations
func NewContextualDataIntegrationServiceGetContextualDataIntegrationsRequest(server string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/contextual-data/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTestingIntegrations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTestingIntegrations", runtime.ParamLocationQuery, *params.IncludeTestingIntegrations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest generates requests for ContextualDataIntegrationServiceGetContextualDataIntegrationDefinition
func NewContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionRequest(server string, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/contextual-data/integrations/definition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTestingIntegrations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTestingIntegrations", runtime.ParamLocationQuery, *params.IncludeTestingIntegrations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest generates requests for ContextualDataIntegrationServiceGetContextualDataIntegrationDetails
func NewContextualDataIntegrationServiceGetContextualDataIntegrationDetailsRequest(server string, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/contextual-data/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTestingRevisions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTestingRevisions", runtime.ParamLocationQuery, *params.IncludeTestingRevisions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomEnrichmentServiceGetCustomEnrichmentsRequest generates requests for CustomEnrichmentServiceGetCustomEnrichments
func NewCustomEnrichmentServiceGetCustomEnrichmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_enrichment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomEnrichmentServiceCreateCustomEnrichmentRequest calls the generic CustomEnrichmentServiceCreateCustomEnrichment builder with application/json body
func NewCustomEnrichmentServiceCreateCustomEnrichmentRequest(server string, body CustomEnrichmentServiceCreateCustomEnrichmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomEnrichmentServiceCreateCustomEnrichmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomEnrichmentServiceCreateCustomEnrichmentRequestWithBody generates requests for CustomEnrichmentServiceCreateCustomEnrichment with any type of body
func NewCustomEnrichmentServiceCreateCustomEnrichmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_enrichment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomEnrichmentServiceUpdateCustomEnrichmentRequest calls the generic CustomEnrichmentServiceUpdateCustomEnrichment builder with application/json body
func NewCustomEnrichmentServiceUpdateCustomEnrichmentRequest(server string, body CustomEnrichmentServiceUpdateCustomEnrichmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomEnrichmentServiceUpdateCustomEnrichmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomEnrichmentServiceUpdateCustomEnrichmentRequestWithBody generates requests for CustomEnrichmentServiceUpdateCustomEnrichment with any type of body
func NewCustomEnrichmentServiceUpdateCustomEnrichmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_enrichment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomEnrichmentServiceSearchCustomEnrichmentDataRequest generates requests for CustomEnrichmentServiceSearchCustomEnrichmentData
func NewCustomEnrichmentServiceSearchCustomEnrichmentDataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_enrichment/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomEnrichmentServiceDeleteCustomEnrichmentRequest generates requests for CustomEnrichmentServiceDeleteCustomEnrichment
func NewCustomEnrichmentServiceDeleteCustomEnrichmentRequest(server string, customEnrichmentId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customEnrichmentId", runtime.ParamLocationPath, customEnrichmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_enrichment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomEnrichmentServiceGetCustomEnrichmentRequest generates requests for CustomEnrichmentServiceGetCustomEnrichment
func NewCustomEnrichmentServiceGetCustomEnrichmentRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_enrichment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDashboardsServiceGetDashboardBySlugRequest generates requests for DashboardsServiceGetDashboardBySlug
func NewDashboardsServiceGetDashboardBySlugRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/by-slug/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDashboardCatalogServiceGetDashboardCatalogRequest generates requests for DashboardCatalogServiceGetDashboardCatalog
func NewDashboardCatalogServiceGetDashboardCatalogRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/catalog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDashboardsServiceCreateDashboardRequest calls the generic DashboardsServiceCreateDashboard builder with application/json body
func NewDashboardsServiceCreateDashboardRequest(server string, body DashboardsServiceCreateDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDashboardsServiceCreateDashboardRequestWithBody(server, "application/json", bodyReader)
}

// NewDashboardsServiceCreateDashboardRequestWithBody generates requests for DashboardsServiceCreateDashboard with any type of body
func NewDashboardsServiceCreateDashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDashboardsServiceReplaceDashboardRequest calls the generic DashboardsServiceReplaceDashboard builder with application/json body
func NewDashboardsServiceReplaceDashboardRequest(server string, body DashboardsServiceReplaceDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDashboardsServiceReplaceDashboardRequestWithBody(server, "application/json", bodyReader)
}

// NewDashboardsServiceReplaceDashboardRequestWithBody generates requests for DashboardsServiceReplaceDashboard with any type of body
func NewDashboardsServiceReplaceDashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDashboardsServiceDeleteDashboardRequest generates requests for DashboardsServiceDeleteDashboard
func NewDashboardsServiceDeleteDashboardRequest(server string, dashboardId string, params *DashboardsServiceDeleteDashboardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestId", runtime.ParamLocationQuery, params.RequestId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDashboardsServiceGetDashboardRequest generates requests for DashboardsServiceGetDashboard
func NewDashboardsServiceGetDashboardRequest(server string, dashboardId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/dashboards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDashboardsServiceReplaceDefaultDashboardRequest calls the generic DashboardsServiceReplaceDefaultDashboard builder with application/json body
func NewDashboardsServiceReplaceDefaultDashboardRequest(server string, dashboardId string, body DashboardsServiceReplaceDefaultDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDashboardsServiceReplaceDefaultDashboardRequestWithBody(server, dashboardId, "application/json", bodyReader)
}

// NewDashboardsServiceReplaceDefaultDashboardRequestWithBody generates requests for DashboardsServiceReplaceDefaultDashboard with any type of body
func NewDashboardsServiceReplaceDefaultDashboardRequestWithBody(server string, dashboardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/dashboards/%s/default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDashboardsServiceAssignDashboardFolderRequest calls the generic DashboardsServiceAssignDashboardFolder builder with application/json body
func NewDashboardsServiceAssignDashboardFolderRequest(server string, dashboardId string, body DashboardsServiceAssignDashboardFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDashboardsServiceAssignDashboardFolderRequestWithBody(server, dashboardId, "application/json", bodyReader)
}

// NewDashboardsServiceAssignDashboardFolderRequestWithBody generates requests for DashboardsServiceAssignDashboardFolder with any type of body
func NewDashboardsServiceAssignDashboardFolderRequestWithBody(server string, dashboardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/dashboards/%s/folder", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDashboardsServicePinDashboardRequest calls the generic DashboardsServicePinDashboard builder with application/json body
func NewDashboardsServicePinDashboardRequest(server string, dashboardId string, body DashboardsServicePinDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDashboardsServicePinDashboardRequestWithBody(server, dashboardId, "application/json", bodyReader)
}

// NewDashboardsServicePinDashboardRequestWithBody generates requests for DashboardsServicePinDashboard with any type of body
func NewDashboardsServicePinDashboardRequestWithBody(server string, dashboardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/dashboards/%s:pin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDashboardsServiceUnpinDashboardRequest calls the generic DashboardsServiceUnpinDashboard builder with application/json body
func NewDashboardsServiceUnpinDashboardRequest(server string, dashboardId string, body DashboardsServiceUnpinDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDashboardsServiceUnpinDashboardRequestWithBody(server, dashboardId, "application/json", bodyReader)
}

// NewDashboardsServiceUnpinDashboardRequestWithBody generates requests for DashboardsServiceUnpinDashboard with any type of body
func NewDashboardsServiceUnpinDashboardRequestWithBody(server string, dashboardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/dashboards/%s:unpin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDashboardFoldersServiceListDashboardFoldersRequest generates requests for DashboardFoldersServiceListDashboardFolders
func NewDashboardFoldersServiceListDashboardFoldersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDashboardFoldersServiceCreateDashboardFolderRequest calls the generic DashboardFoldersServiceCreateDashboardFolder builder with application/json body
func NewDashboardFoldersServiceCreateDashboardFolderRequest(server string, body DashboardFoldersServiceCreateDashboardFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDashboardFoldersServiceCreateDashboardFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewDashboardFoldersServiceCreateDashboardFolderRequestWithBody generates requests for DashboardFoldersServiceCreateDashboardFolder with any type of body
func NewDashboardFoldersServiceCreateDashboardFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDashboardFoldersServiceReplaceDashboardFolderRequest calls the generic DashboardFoldersServiceReplaceDashboardFolder builder with application/json body
func NewDashboardFoldersServiceReplaceDashboardFolderRequest(server string, body DashboardFoldersServiceReplaceDashboardFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDashboardFoldersServiceReplaceDashboardFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewDashboardFoldersServiceReplaceDashboardFolderRequestWithBody generates requests for DashboardFoldersServiceReplaceDashboardFolder with any type of body
func NewDashboardFoldersServiceReplaceDashboardFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDashboardFoldersServiceDeleteDashboardFolderRequest generates requests for DashboardFoldersServiceDeleteDashboardFolder
func NewDashboardFoldersServiceDeleteDashboardFolderRequest(server string, folderId string, params *DashboardFoldersServiceDeleteDashboardFolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "folderId", runtime.ParamLocationPath, folderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestId", runtime.ParamLocationQuery, *params.RequestId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDashboardFoldersServiceGetDashboardFolderRequest generates requests for DashboardFoldersServiceGetDashboardFolder
func NewDashboardFoldersServiceGetDashboardFolderRequest(server string, folderId string, params *DashboardFoldersServiceGetDashboardFolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "folderId", runtime.ParamLocationPath, folderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dashboards/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestId", runtime.ParamLocationQuery, *params.RequestId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExtensionDeploymentServiceDeployExtensionRequest calls the generic ExtensionDeploymentServiceDeployExtension builder with application/json body
func NewExtensionDeploymentServiceDeployExtensionRequest(server string, body ExtensionDeploymentServiceDeployExtensionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtensionDeploymentServiceDeployExtensionRequestWithBody(server, "application/json", bodyReader)
}

// NewExtensionDeploymentServiceDeployExtensionRequestWithBody generates requests for ExtensionDeploymentServiceDeployExtension with any type of body
func NewExtensionDeploymentServiceDeployExtensionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extension-deployment/deploy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtensionDeploymentServiceGetDeployedExtensionsRequest generates requests for ExtensionDeploymentServiceGetDeployedExtensions
func NewExtensionDeploymentServiceGetDeployedExtensionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extension-deployment/deployed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExtensionDeploymentServiceUndeployExtensionRequest calls the generic ExtensionDeploymentServiceUndeployExtension builder with application/json body
func NewExtensionDeploymentServiceUndeployExtensionRequest(server string, body ExtensionDeploymentServiceUndeployExtensionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtensionDeploymentServiceUndeployExtensionRequestWithBody(server, "application/json", bodyReader)
}

// NewExtensionDeploymentServiceUndeployExtensionRequestWithBody generates requests for ExtensionDeploymentServiceUndeployExtension with any type of body
func NewExtensionDeploymentServiceUndeployExtensionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extension-deployment/undeploy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtensionDeploymentServiceUpdateExtensionRequest calls the generic ExtensionDeploymentServiceUpdateExtension builder with application/json body
func NewExtensionDeploymentServiceUpdateExtensionRequest(server string, body ExtensionDeploymentServiceUpdateExtensionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtensionDeploymentServiceUpdateExtensionRequestWithBody(server, "application/json", bodyReader)
}

// NewExtensionDeploymentServiceUpdateExtensionRequestWithBody generates requests for ExtensionDeploymentServiceUpdateExtension with any type of body
func NewExtensionDeploymentServiceUpdateExtensionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extension-deployment/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtensionTestingServiceCleanupTestingRevisionRequest calls the generic ExtensionTestingServiceCleanupTestingRevision builder with application/json body
func NewExtensionTestingServiceCleanupTestingRevisionRequest(server string, body ExtensionTestingServiceCleanupTestingRevisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtensionTestingServiceCleanupTestingRevisionRequestWithBody(server, "application/json", bodyReader)
}

// NewExtensionTestingServiceCleanupTestingRevisionRequestWithBody generates requests for ExtensionTestingServiceCleanupTestingRevision with any type of body
func NewExtensionTestingServiceCleanupTestingRevisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extensions-testing/cleanup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtensionTestingServiceInitializeTestingRevisionRequest calls the generic ExtensionTestingServiceInitializeTestingRevision builder with application/json body
func NewExtensionTestingServiceInitializeTestingRevisionRequest(server string, body ExtensionTestingServiceInitializeTestingRevisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtensionTestingServiceInitializeTestingRevisionRequestWithBody(server, "application/json", bodyReader)
}

// NewExtensionTestingServiceInitializeTestingRevisionRequestWithBody generates requests for ExtensionTestingServiceInitializeTestingRevision with any type of body
func NewExtensionTestingServiceInitializeTestingRevisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extensions-testing/initialize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtensionTestingServiceTestExtensionRevisionRequest calls the generic ExtensionTestingServiceTestExtensionRevision builder with application/json body
func NewExtensionTestingServiceTestExtensionRevisionRequest(server string, body ExtensionTestingServiceTestExtensionRevisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtensionTestingServiceTestExtensionRevisionRequestWithBody(server, "application/json", bodyReader)
}

// NewExtensionTestingServiceTestExtensionRevisionRequestWithBody generates requests for ExtensionTestingServiceTestExtensionRevision with any type of body
func NewExtensionTestingServiceTestExtensionRevisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extensions-testing/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtensionServiceGetAllExtensionsRequest calls the generic ExtensionServiceGetAllExtensions builder with application/json body
func NewExtensionServiceGetAllExtensionsRequest(server string, body ExtensionServiceGetAllExtensionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtensionServiceGetAllExtensionsRequestWithBody(server, "application/json", bodyReader)
}

// NewExtensionServiceGetAllExtensionsRequestWithBody generates requests for ExtensionServiceGetAllExtensions with any type of body
func NewExtensionServiceGetAllExtensionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extensions/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtensionServiceGetExtensionRequest generates requests for ExtensionServiceGetExtension
func NewExtensionServiceGetExtensionRequest(server string, id string, params *ExtensionServiceGetExtensionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDashboardBinaries != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDashboardBinaries", runtime.ParamLocationQuery, *params.IncludeDashboardBinaries); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTestingRevision != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTestingRevision", runtime.ParamLocationQuery, *params.IncludeTestingRevision); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsServiceListIncidentsRequest calls the generic IncidentsServiceListIncidents builder with application/json body
func NewIncidentsServiceListIncidentsRequest(server string, body IncidentsServiceListIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceListIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceListIncidentsRequestWithBody generates requests for IncidentsServiceListIncidents with any type of body
func NewIncidentsServiceListIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceGetIncidentRequest generates requests for IncidentsServiceGetIncident
func NewIncidentsServiceGetIncidentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsServiceGetIncidentEventsRequest generates requests for IncidentsServiceGetIncidentEvents
func NewIncidentsServiceGetIncidentEventsRequest(server string, incidentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsServiceAcknowledgeIncidentsRequest calls the generic IncidentsServiceAcknowledgeIncidents builder with application/json body
func NewIncidentsServiceAcknowledgeIncidentsRequest(server string, body IncidentsServiceAcknowledgeIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceAcknowledgeIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceAcknowledgeIncidentsRequestWithBody generates requests for IncidentsServiceAcknowledgeIncidents with any type of body
func NewIncidentsServiceAcknowledgeIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:acknowledge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceAssignIncidentsRequest calls the generic IncidentsServiceAssignIncidents builder with application/json body
func NewIncidentsServiceAssignIncidentsRequest(server string, body IncidentsServiceAssignIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceAssignIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceAssignIncidentsRequestWithBody generates requests for IncidentsServiceAssignIncidents with any type of body
func NewIncidentsServiceAssignIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:assign")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceBatchGetIncidentRequest generates requests for IncidentsServiceBatchGetIncident
func NewIncidentsServiceBatchGetIncidentRequest(server string, params *IncidentsServiceBatchGetIncidentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:batchGet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsServiceCloseIncidentsRequest calls the generic IncidentsServiceCloseIncidents builder with application/json body
func NewIncidentsServiceCloseIncidentsRequest(server string, body IncidentsServiceCloseIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceCloseIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceCloseIncidentsRequestWithBody generates requests for IncidentsServiceCloseIncidents with any type of body
func NewIncidentsServiceCloseIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:close")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceGetFilterValuesRequest calls the generic IncidentsServiceGetFilterValues builder with application/json body
func NewIncidentsServiceGetFilterValuesRequest(server string, body IncidentsServiceGetFilterValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceGetFilterValuesRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceGetFilterValuesRequestWithBody generates requests for IncidentsServiceGetFilterValues with any type of body
func NewIncidentsServiceGetFilterValuesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:get-filter-values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceListIncidentEventsRequest calls the generic IncidentsServiceListIncidentEvents builder with application/json body
func NewIncidentsServiceListIncidentEventsRequest(server string, body IncidentsServiceListIncidentEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceListIncidentEventsRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceListIncidentEventsRequestWithBody generates requests for IncidentsServiceListIncidentEvents with any type of body
func NewIncidentsServiceListIncidentEventsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:list-incident-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceListIncidentEventsFilterValuesRequest calls the generic IncidentsServiceListIncidentEventsFilterValues builder with application/json body
func NewIncidentsServiceListIncidentEventsFilterValuesRequest(server string, body IncidentsServiceListIncidentEventsFilterValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceListIncidentEventsFilterValuesRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceListIncidentEventsFilterValuesRequestWithBody generates requests for IncidentsServiceListIncidentEventsFilterValues with any type of body
func NewIncidentsServiceListIncidentEventsFilterValuesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:list-incident-events-filter-values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceListIncidentEventsTotalCountRequest calls the generic IncidentsServiceListIncidentEventsTotalCount builder with application/json body
func NewIncidentsServiceListIncidentEventsTotalCountRequest(server string, body IncidentsServiceListIncidentEventsTotalCountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceListIncidentEventsTotalCountRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceListIncidentEventsTotalCountRequestWithBody generates requests for IncidentsServiceListIncidentEventsTotalCount with any type of body
func NewIncidentsServiceListIncidentEventsTotalCountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:list-incident-events-total-count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceListIncidentAggregationsRequest calls the generic IncidentsServiceListIncidentAggregations builder with application/json body
func NewIncidentsServiceListIncidentAggregationsRequest(server string, body IncidentsServiceListIncidentAggregationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceListIncidentAggregationsRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceListIncidentAggregationsRequestWithBody generates requests for IncidentsServiceListIncidentAggregations with any type of body
func NewIncidentsServiceListIncidentAggregationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:listIncidentAggregations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceResolveIncidentsRequest calls the generic IncidentsServiceResolveIncidents builder with application/json body
func NewIncidentsServiceResolveIncidentsRequest(server string, body IncidentsServiceResolveIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceResolveIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceResolveIncidentsRequestWithBody generates requests for IncidentsServiceResolveIncidents with any type of body
func NewIncidentsServiceResolveIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:resolve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsServiceUnassignIncidentsRequest calls the generic IncidentsServiceUnassignIncidents builder with application/json body
func NewIncidentsServiceUnassignIncidentsRequest(server string, body IncidentsServiceUnassignIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsServiceUnassignIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsServiceUnassignIncidentsRequestWithBody generates requests for IncidentsServiceUnassignIncidents with any type of body
func NewIncidentsServiceUnassignIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents:unassign")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIntegrationServiceGetIntegrationsRequest generates requests for IntegrationServiceGetIntegrations
func NewIntegrationServiceGetIntegrationsRequest(server string, params *IntegrationServiceGetIntegrationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTestingRevision != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTestingRevision", runtime.ParamLocationQuery, *params.IncludeTestingRevision); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationServiceGetIntegrationDefinitionRequest generates requests for IntegrationServiceGetIntegrationDefinition
func NewIntegrationServiceGetIntegrationDefinitionRequest(server string, id string, params *IntegrationServiceGetIntegrationDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/definition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTestingRevision != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTestingRevision", runtime.ParamLocationQuery, *params.IncludeTestingRevision); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationServiceGetDeployedIntegrationRequest generates requests for IntegrationServiceGetDeployedIntegration
func NewIntegrationServiceGetDeployedIntegrationRequest(server string, integrationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationId", runtime.ParamLocationPath, integrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/deployed/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationServiceDeleteIntegrationRequest generates requests for IntegrationServiceDeleteIntegration
func NewIntegrationServiceDeleteIntegrationRequest(server string, integrationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationId", runtime.ParamLocationPath, integrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/instance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationServiceListManagedIntegrationKeysRequest generates requests for IntegrationServiceListManagedIntegrationKeys
func NewIntegrationServiceListManagedIntegrationKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/managed/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationServiceGetManagedIntegrationStatusRequest generates requests for IntegrationServiceGetManagedIntegrationStatus
func NewIntegrationServiceGetManagedIntegrationStatusRequest(server string, integrationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationId", runtime.ParamLocationPath, integrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/managed/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationServiceSaveIntegrationRequest calls the generic IntegrationServiceSaveIntegration builder with application/json body
func NewIntegrationServiceSaveIntegrationRequest(server string, body IntegrationServiceSaveIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIntegrationServiceSaveIntegrationRequestWithBody(server, "application/json", bodyReader)
}

// NewIntegrationServiceSaveIntegrationRequestWithBody generates requests for IntegrationServiceSaveIntegration with any type of body
func NewIntegrationServiceSaveIntegrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIntegrationServiceUpdateIntegrationRequest calls the generic IntegrationServiceUpdateIntegration builder with application/json body
func NewIntegrationServiceUpdateIntegrationRequest(server string, body IntegrationServiceUpdateIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIntegrationServiceUpdateIntegrationRequestWithBody(server, "application/json", bodyReader)
}

// NewIntegrationServiceUpdateIntegrationRequestWithBody generates requests for IntegrationServiceUpdateIntegration with any type of body
func NewIntegrationServiceUpdateIntegrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIntegrationServiceTestIntegrationRequest calls the generic IntegrationServiceTestIntegration builder with application/json body
func NewIntegrationServiceTestIntegrationRequest(server string, body IntegrationServiceTestIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIntegrationServiceTestIntegrationRequestWithBody(server, "application/json", bodyReader)
}

// NewIntegrationServiceTestIntegrationRequestWithBody generates requests for IntegrationServiceTestIntegration with any type of body
func NewIntegrationServiceTestIntegrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/metadata/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIntegrationServiceGetRumApplicationVersionDataRequest generates requests for IntegrationServiceGetRumApplicationVersionData
func NewIntegrationServiceGetRumApplicationVersionDataRequest(server string, params *IntegrationServiceGetRumApplicationVersionDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/rum/app-versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationName", runtime.ParamLocationQuery, params.ApplicationName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationServiceSyncRumDataRequest calls the generic IntegrationServiceSyncRumData builder with application/json body
func NewIntegrationServiceSyncRumDataRequest(server string, body IntegrationServiceSyncRumDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIntegrationServiceSyncRumDataRequestWithBody(server, "application/json", bodyReader)
}

// NewIntegrationServiceSyncRumDataRequestWithBody generates requests for IntegrationServiceSyncRumData with any type of body
func NewIntegrationServiceSyncRumDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/rum/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIntegrationServiceGetTemplateRequest generates requests for IntegrationServiceGetTemplate
func NewIntegrationServiceGetTemplateRequest(server string, params *IntegrationServiceGetTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "integrationId", runtime.ParamLocationQuery, params.IntegrationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commonArmParams.logsUrl", runtime.ParamLocationQuery, params.CommonArmParamsLogsUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commonArmParams.apiKey", runtime.ParamLocationQuery, params.CommonArmParamsApiKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commonArmParams.cgxDomain", runtime.ParamLocationQuery, params.CommonArmParamsCgxDomain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationServiceGetIntegrationDetailsRequest generates requests for IntegrationServiceGetIntegrationDetails
func NewIntegrationServiceGetIntegrationDetailsRequest(server string, id string, params *IntegrationServiceGetIntegrationDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTestingRevision != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTestingRevision", runtime.ParamLocationQuery, *params.IncludeTestingRevision); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetricsConfiguratorPublicServiceGetTenantConfigRequest generates requests for MetricsConfiguratorPublicServiceGetTenantConfig
func NewMetricsConfiguratorPublicServiceGetTenantConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics-archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetricsConfiguratorPublicServiceConfigureTenantRequest calls the generic MetricsConfiguratorPublicServiceConfigureTenant builder with application/json body
func NewMetricsConfiguratorPublicServiceConfigureTenantRequest(server string, body MetricsConfiguratorPublicServiceConfigureTenantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetricsConfiguratorPublicServiceConfigureTenantRequestWithBody(server, "application/json", bodyReader)
}

// NewMetricsConfiguratorPublicServiceConfigureTenantRequestWithBody generates requests for MetricsConfiguratorPublicServiceConfigureTenant with any type of body
func NewMetricsConfiguratorPublicServiceConfigureTenantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics-archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetricsConfiguratorPublicServiceUpdateRequest calls the generic MetricsConfiguratorPublicServiceUpdate builder with application/json body
func NewMetricsConfiguratorPublicServiceUpdateRequest(server string, body MetricsConfiguratorPublicServiceUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetricsConfiguratorPublicServiceUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewMetricsConfiguratorPublicServiceUpdateRequestWithBody generates requests for MetricsConfiguratorPublicServiceUpdate with any type of body
func NewMetricsConfiguratorPublicServiceUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics-archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetricsConfiguratorPublicServiceDisableArchiveRequest generates requests for MetricsConfiguratorPublicServiceDisableArchive
func NewMetricsConfiguratorPublicServiceDisableArchiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics-archive:disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetricsConfiguratorPublicServiceEnableArchiveRequest generates requests for MetricsConfiguratorPublicServiceEnableArchive
func NewMetricsConfiguratorPublicServiceEnableArchiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics-archive:enable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetricsConfiguratorPublicServiceValidateBucketRequest calls the generic MetricsConfiguratorPublicServiceValidateBucket builder with application/json body
func NewMetricsConfiguratorPublicServiceValidateBucketRequest(server string, body MetricsConfiguratorPublicServiceValidateBucketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetricsConfiguratorPublicServiceValidateBucketRequestWithBody(server, "application/json", bodyReader)
}

// NewMetricsConfiguratorPublicServiceValidateBucketRequestWithBody generates requests for MetricsConfiguratorPublicServiceValidateBucket with any type of body
func NewMetricsConfiguratorPublicServiceValidateBucketRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics-archive:validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConnectorsServiceReplaceConnectorRequest calls the generic ConnectorsServiceReplaceConnector builder with application/json body
func NewConnectorsServiceReplaceConnectorRequest(server string, body ConnectorsServiceReplaceConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConnectorsServiceReplaceConnectorRequestWithBody(server, "application/json", bodyReader)
}

// NewConnectorsServiceReplaceConnectorRequestWithBody generates requests for ConnectorsServiceReplaceConnector with any type of body
func NewConnectorsServiceReplaceConnectorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connector")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConnectorsServiceListConnectorsRequest generates requests for ConnectorsServiceListConnectors
func NewConnectorsServiceListConnectorsRequest(server string, params *ConnectorsServiceListConnectorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectorType", runtime.ParamLocationQuery, *params.ConnectorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConnectorsServiceCreateConnectorRequest calls the generic ConnectorsServiceCreateConnector builder with application/json body
func NewConnectorsServiceCreateConnectorRequest(server string, body ConnectorsServiceCreateConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConnectorsServiceCreateConnectorRequestWithBody(server, "application/json", bodyReader)
}

// NewConnectorsServiceCreateConnectorRequestWithBody generates requests for ConnectorsServiceCreateConnector with any type of body
func NewConnectorsServiceCreateConnectorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConnectorsServiceDeleteConnectorRequest generates requests for ConnectorsServiceDeleteConnector
func NewConnectorsServiceDeleteConnectorRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConnectorsServiceGetConnectorRequest generates requests for ConnectorsServiceGetConnector
func NewConnectorsServiceGetConnectorRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConnectorsServiceBatchGetConnectorsRequest generates requests for ConnectorsServiceBatchGetConnectors
func NewConnectorsServiceBatchGetConnectorsRequest(server string, params *ConnectorsServiceBatchGetConnectorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connectors:batchGet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectorIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectorIds", runtime.ParamLocationQuery, *params.ConnectorIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConnectorsServiceBatchGetConnectorSummariesRequest generates requests for ConnectorsServiceBatchGetConnectorSummaries
func NewConnectorsServiceBatchGetConnectorSummariesRequest(server string, params *ConnectorsServiceBatchGetConnectorSummariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connectors:batchGetSummaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectorIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectorIds", runtime.ParamLocationQuery, *params.ConnectorIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConnectorsServiceGetConnectorTypeSummariesRequest generates requests for ConnectorsServiceGetConnectorTypeSummaries
func NewConnectorsServiceGetConnectorTypeSummariesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connectors:getTypeSummaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConnectorsServiceListConnectorSummariesRequest generates requests for ConnectorsServiceListConnectorSummaries
func NewConnectorsServiceListConnectorSummariesRequest(server string, params *ConnectorsServiceListConnectorSummariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/connectors:listSummaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectorType", runtime.ParamLocationQuery, *params.ConnectorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEntitiesServiceListEntityTypesRequest generates requests for EntitiesServiceListEntityTypes
func NewEntitiesServiceListEntityTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/entity-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEntitiesServiceListEntitySubTypesRequest generates requests for EntitiesServiceListEntitySubTypes
func NewEntitiesServiceListEntitySubTypesRequest(server string, entityType EntitiesServiceListEntitySubTypesParamsEntityType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entityType", runtime.ParamLocationPath, entityType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/entity-types/%s/entity-subtypes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestingServiceTestConnectorConfigRequest calls the generic TestingServiceTestConnectorConfig builder with application/json body
func NewTestingServiceTestConnectorConfigRequest(server string, body TestingServiceTestConnectorConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestingServiceTestConnectorConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewTestingServiceTestConnectorConfigRequestWithBody generates requests for TestingServiceTestConnectorConfig with any type of body
func NewTestingServiceTestConnectorConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/notifications/testing:testConnectorConfiguration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestingServiceTestDestinationRequest calls the generic TestingServiceTestDestination builder with application/json body
func NewTestingServiceTestDestinationRequest(server string, body TestingServiceTestDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestingServiceTestDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewTestingServiceTestDestinationRequestWithBody generates requests for TestingServiceTestDestination with any type of body
func NewTestingServiceTestDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/notifications/testing:testDestination")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestingServiceTestExistingConnectorRequest calls the generic TestingServiceTestExistingConnector builder with application/json body
func NewTestingServiceTestExistingConnectorRequest(server string, body TestingServiceTestExistingConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestingServiceTestExistingConnectorRequestWithBody(server, "application/json", bodyReader)
}

// NewTestingServiceTestExistingConnectorRequestWithBody generates requests for TestingServiceTestExistingConnector with any type of body
func NewTestingServiceTestExistingConnectorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/notifications/testing:testExistingConnector")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestingServiceTestExistingPresetRequest calls the generic TestingServiceTestExistingPreset builder with application/json body
func NewTestingServiceTestExistingPresetRequest(server string, body TestingServiceTestExistingPresetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestingServiceTestExistingPresetRequestWithBody(server, "application/json", bodyReader)
}

// NewTestingServiceTestExistingPresetRequestWithBody generates requests for TestingServiceTestExistingPreset with any type of body
func NewTestingServiceTestExistingPresetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/notifications/testing:testExistingPreset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestingServiceTestPresetConfigRequest calls the generic TestingServiceTestPresetConfig builder with application/json body
func NewTestingServiceTestPresetConfigRequest(server string, body TestingServiceTestPresetConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestingServiceTestPresetConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewTestingServiceTestPresetConfigRequestWithBody generates requests for TestingServiceTestPresetConfig with any type of body
func NewTestingServiceTestPresetConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/notifications/testing:testPresetConfiguration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestingServiceTestRoutingConditionValidRequest calls the generic TestingServiceTestRoutingConditionValid builder with application/json body
func NewTestingServiceTestRoutingConditionValidRequest(server string, body TestingServiceTestRoutingConditionValidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestingServiceTestRoutingConditionValidRequestWithBody(server, "application/json", bodyReader)
}

// NewTestingServiceTestRoutingConditionValidRequestWithBody generates requests for TestingServiceTestRoutingConditionValid with any type of body
func NewTestingServiceTestRoutingConditionValidRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/notifications/testing:testRoutingConditionValid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestingServiceTestTemplateRenderRequest calls the generic TestingServiceTestTemplateRender builder with application/json body
func NewTestingServiceTestTemplateRenderRequest(server string, body TestingServiceTestTemplateRenderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestingServiceTestTemplateRenderRequestWithBody(server, "application/json", bodyReader)
}

// NewTestingServiceTestTemplateRenderRequestWithBody generates requests for TestingServiceTestTemplateRender with any type of body
func NewTestingServiceTestTemplateRenderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/notifications/testing:testTemplateRender")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPresetsServiceCreateCustomPresetRequest calls the generic PresetsServiceCreateCustomPreset builder with application/json body
func NewPresetsServiceCreateCustomPresetRequest(server string, body PresetsServiceCreateCustomPresetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPresetsServiceCreateCustomPresetRequestWithBody(server, "application/json", bodyReader)
}

// NewPresetsServiceCreateCustomPresetRequestWithBody generates requests for PresetsServiceCreateCustomPreset with any type of body
func NewPresetsServiceCreateCustomPresetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPresetsServiceReplaceCustomPresetRequest calls the generic PresetsServiceReplaceCustomPreset builder with application/json body
func NewPresetsServiceReplaceCustomPresetRequest(server string, body PresetsServiceReplaceCustomPresetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPresetsServiceReplaceCustomPresetRequestWithBody(server, "application/json", bodyReader)
}

// NewPresetsServiceReplaceCustomPresetRequestWithBody generates requests for PresetsServiceReplaceCustomPreset with any type of body
func NewPresetsServiceReplaceCustomPresetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPresetsServiceDeleteCustomPresetRequest generates requests for PresetsServiceDeleteCustomPreset
func NewPresetsServiceDeleteCustomPresetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPresetsServiceSetCustomPresetAsDefaultRequest generates requests for PresetsServiceSetCustomPresetAsDefault
func NewPresetsServiceSetCustomPresetAsDefaultRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets/custom/%s:defaultSet", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPresetsServiceGetPresetRequest generates requests for PresetsServiceGetPreset
func NewPresetsServiceGetPresetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPresetsServiceSetPresetAsDefaultRequest generates requests for PresetsServiceSetPresetAsDefault
func NewPresetsServiceSetPresetAsDefaultRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets/%s:defaultSet", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPresetsServiceBatchGetPresetsRequest generates requests for PresetsServiceBatchGetPresets
func NewPresetsServiceBatchGetPresetsRequest(server string, params *PresetsServiceBatchGetPresetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets:batchGet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PresetIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "presetIds", runtime.ParamLocationQuery, *params.PresetIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPresetsServiceGetDefaultPresetSummaryRequest generates requests for PresetsServiceGetDefaultPresetSummary
func NewPresetsServiceGetDefaultPresetSummaryRequest(server string, params *PresetsServiceGetDefaultPresetSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets:defaultSummaryGet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectorType", runtime.ParamLocationQuery, *params.ConnectorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntityType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, *params.EntityType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPresetsServiceListPresetSummariesRequest generates requests for PresetsServiceListPresetSummaries
func NewPresetsServiceListPresetSummariesRequest(server string, params *PresetsServiceListPresetSummariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets:summariesList")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectorType", runtime.ParamLocationQuery, *params.ConnectorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntityType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, *params.EntityType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPresetsServiceGetSystemDefaultPresetSummaryRequest generates requests for PresetsServiceGetSystemDefaultPresetSummary
func NewPresetsServiceGetSystemDefaultPresetSummaryRequest(server string, params *PresetsServiceGetSystemDefaultPresetSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/presets:systemDefaultSummaryGet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectorType", runtime.ParamLocationQuery, *params.ConnectorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntityType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, *params.EntityType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRoutersServiceListGlobalRoutersRequest generates requests for GlobalRoutersServiceListGlobalRouters
func NewGlobalRoutersServiceListGlobalRoutersRequest(server string, params *GlobalRoutersServiceListGlobalRoutersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/routers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EntityType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, *params.EntityType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRoutersServiceCreateGlobalRouterRequest calls the generic GlobalRoutersServiceCreateGlobalRouter builder with application/json body
func NewGlobalRoutersServiceCreateGlobalRouterRequest(server string, body GlobalRoutersServiceCreateGlobalRouterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGlobalRoutersServiceCreateGlobalRouterRequestWithBody(server, "application/json", bodyReader)
}

// NewGlobalRoutersServiceCreateGlobalRouterRequestWithBody generates requests for GlobalRoutersServiceCreateGlobalRouter with any type of body
func NewGlobalRoutersServiceCreateGlobalRouterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/routers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRoutersServiceReplaceGlobalRouterRequest calls the generic GlobalRoutersServiceReplaceGlobalRouter builder with application/json body
func NewGlobalRoutersServiceReplaceGlobalRouterRequest(server string, body GlobalRoutersServiceReplaceGlobalRouterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGlobalRoutersServiceReplaceGlobalRouterRequestWithBody(server, "application/json", bodyReader)
}

// NewGlobalRoutersServiceReplaceGlobalRouterRequestWithBody generates requests for GlobalRoutersServiceReplaceGlobalRouter with any type of body
func NewGlobalRoutersServiceReplaceGlobalRouterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/routers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRoutersServiceDeleteGlobalRouterRequest generates requests for GlobalRoutersServiceDeleteGlobalRouter
func NewGlobalRoutersServiceDeleteGlobalRouterRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/routers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRoutersServiceGetGlobalRouterRequest generates requests for GlobalRoutersServiceGetGlobalRouter
func NewGlobalRoutersServiceGetGlobalRouterRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/routers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRoutersServiceBatchGetGlobalRoutersRequest generates requests for GlobalRoutersServiceBatchGetGlobalRouters
func NewGlobalRoutersServiceBatchGetGlobalRoutersRequest(server string, params *GlobalRoutersServiceBatchGetGlobalRoutersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notification-center/routers:batchGetSummaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GlobalRouterIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "globalRouterIds", runtime.ParamLocationQuery, *params.GlobalRouterIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOutgoingWebhooksServiceCreateOutgoingWebhookRequest calls the generic OutgoingWebhooksServiceCreateOutgoingWebhook builder with application/json body
func NewOutgoingWebhooksServiceCreateOutgoingWebhookRequest(server string, body OutgoingWebhooksServiceCreateOutgoingWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOutgoingWebhooksServiceCreateOutgoingWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewOutgoingWebhooksServiceCreateOutgoingWebhookRequestWithBody generates requests for OutgoingWebhooksServiceCreateOutgoingWebhook with any type of body
func NewOutgoingWebhooksServiceCreateOutgoingWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOutgoingWebhooksServiceUpdateOutgoingWebhookRequest calls the generic OutgoingWebhooksServiceUpdateOutgoingWebhook builder with application/json body
func NewOutgoingWebhooksServiceUpdateOutgoingWebhookRequest(server string, body OutgoingWebhooksServiceUpdateOutgoingWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOutgoingWebhooksServiceUpdateOutgoingWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewOutgoingWebhooksServiceUpdateOutgoingWebhookRequestWithBody generates requests for OutgoingWebhooksServiceUpdateOutgoingWebhook with any type of body
func NewOutgoingWebhooksServiceUpdateOutgoingWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOutgoingWebhooksServiceListOutgoingWebhookTypesRequest generates requests for OutgoingWebhooksServiceListOutgoingWebhookTypes
func NewOutgoingWebhooksServiceListOutgoingWebhookTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest generates requests for OutgoingWebhooksServiceGetOutgoingWebhookTypeDetails
func NewOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsRequest(server string, pType OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsParamsType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOutgoingWebhooksServiceListIbmEventNotificationsInstancesRequest generates requests for OutgoingWebhooksServiceListIbmEventNotificationsInstances
func NewOutgoingWebhooksServiceListIbmEventNotificationsInstancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks/ibm-event-notifications/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOutgoingWebhooksServiceTestOutgoingWebhookRequest calls the generic OutgoingWebhooksServiceTestOutgoingWebhook builder with application/json body
func NewOutgoingWebhooksServiceTestOutgoingWebhookRequest(server string, body OutgoingWebhooksServiceTestOutgoingWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOutgoingWebhooksServiceTestOutgoingWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewOutgoingWebhooksServiceTestOutgoingWebhookRequestWithBody generates requests for OutgoingWebhooksServiceTestOutgoingWebhook with any type of body
func NewOutgoingWebhooksServiceTestOutgoingWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest calls the generic OutgoingWebhooksServiceTestExistingOutgoingWebhook builder with application/json body
func NewOutgoingWebhooksServiceTestExistingOutgoingWebhookRequest(server string, body OutgoingWebhooksServiceTestExistingOutgoingWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOutgoingWebhooksServiceTestExistingOutgoingWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewOutgoingWebhooksServiceTestExistingOutgoingWebhookRequestWithBody generates requests for OutgoingWebhooksServiceTestExistingOutgoingWebhook with any type of body
func NewOutgoingWebhooksServiceTestExistingOutgoingWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks/test-existing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOutgoingWebhooksServiceDeleteOutgoingWebhookRequest generates requests for OutgoingWebhooksServiceDeleteOutgoingWebhook
func NewOutgoingWebhooksServiceDeleteOutgoingWebhookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOutgoingWebhooksServiceGetOutgoingWebhookRequest generates requests for OutgoingWebhooksServiceGetOutgoingWebhook
func NewOutgoingWebhooksServiceGetOutgoingWebhookRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOutgoingWebhooksServiceListOutgoingWebhooksRequest generates requests for OutgoingWebhooksServiceListOutgoingWebhooks
func NewOutgoingWebhooksServiceListOutgoingWebhooksRequest(server string, params *OutgoingWebhooksServiceListOutgoingWebhooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks:list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOutgoingWebhooksServiceListAllOutgoingWebhooksRequest generates requests for OutgoingWebhooksServiceListAllOutgoingWebhooks
func NewOutgoingWebhooksServiceListAllOutgoingWebhooksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks:list/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest generates requests for OutgoingWebhooksServiceListOutboundWebhooksSummary
func NewOutgoingWebhooksServiceListOutboundWebhooksSummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/outgoing-webhooks:list/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesServiceGetCompanyPoliciesRequest generates requests for PoliciesServiceGetCompanyPolicies
func NewPoliciesServiceGetCompanyPoliciesRequest(server string, params *PoliciesServiceGetCompanyPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabledOnly", runtime.ParamLocationQuery, params.EnabledOnly); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceType", runtime.ParamLocationQuery, params.SourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesServiceCreatePolicyRequest calls the generic PoliciesServiceCreatePolicy builder with application/json body
func NewPoliciesServiceCreatePolicyRequest(server string, body PoliciesServiceCreatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesServiceCreatePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesServiceCreatePolicyRequestWithBody generates requests for PoliciesServiceCreatePolicy with any type of body
func NewPoliciesServiceCreatePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesServiceUpdatePolicyRequest calls the generic PoliciesServiceUpdatePolicy builder with application/json body
func NewPoliciesServiceUpdatePolicyRequest(server string, body PoliciesServiceUpdatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesServiceUpdatePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesServiceUpdatePolicyRequestWithBody generates requests for PoliciesServiceUpdatePolicy with any type of body
func NewPoliciesServiceUpdatePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesServiceDeletePolicyRequest generates requests for PoliciesServiceDeletePolicy
func NewPoliciesServiceDeletePolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesServiceGetPolicyRequest generates requests for PoliciesServiceGetPolicy
func NewPoliciesServiceGetPolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesServiceAtomicOverwriteLogPoliciesRequest calls the generic PoliciesServiceAtomicOverwriteLogPolicies builder with application/json body
func NewPoliciesServiceAtomicOverwriteLogPoliciesRequest(server string, body PoliciesServiceAtomicOverwriteLogPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesServiceAtomicOverwriteLogPoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesServiceAtomicOverwriteLogPoliciesRequestWithBody generates requests for PoliciesServiceAtomicOverwriteLogPolicies with any type of body
func NewPoliciesServiceAtomicOverwriteLogPoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies:atomicOverwriteLogPolicies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesServiceAtomicOverwriteSpanPoliciesRequest calls the generic PoliciesServiceAtomicOverwriteSpanPolicies builder with application/json body
func NewPoliciesServiceAtomicOverwriteSpanPoliciesRequest(server string, body PoliciesServiceAtomicOverwriteSpanPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesServiceAtomicOverwriteSpanPoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesServiceAtomicOverwriteSpanPoliciesRequestWithBody generates requests for PoliciesServiceAtomicOverwriteSpanPolicies with any type of body
func NewPoliciesServiceAtomicOverwriteSpanPoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies:atomicOverwriteSpanPolicies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesServiceAtomicBatchCreatePolicyRequest calls the generic PoliciesServiceAtomicBatchCreatePolicy builder with application/json body
func NewPoliciesServiceAtomicBatchCreatePolicyRequest(server string, body PoliciesServiceAtomicBatchCreatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesServiceAtomicBatchCreatePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesServiceAtomicBatchCreatePolicyRequestWithBody generates requests for PoliciesServiceAtomicBatchCreatePolicy with any type of body
func NewPoliciesServiceAtomicBatchCreatePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies:bulkCreate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesServiceBulkTestLogPoliciesRequest calls the generic PoliciesServiceBulkTestLogPolicies builder with application/json body
func NewPoliciesServiceBulkTestLogPoliciesRequest(server string, body PoliciesServiceBulkTestLogPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesServiceBulkTestLogPoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesServiceBulkTestLogPoliciesRequestWithBody generates requests for PoliciesServiceBulkTestLogPolicies with any type of body
func NewPoliciesServiceBulkTestLogPoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies:bulkTestLog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesServiceReorderPoliciesRequest calls the generic PoliciesServiceReorderPolicies builder with application/json body
func NewPoliciesServiceReorderPoliciesRequest(server string, body PoliciesServiceReorderPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesServiceReorderPoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesServiceReorderPoliciesRequestWithBody generates requests for PoliciesServiceReorderPolicies with any type of body
func NewPoliciesServiceReorderPoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies:reorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesServiceTogglePolicyRequest calls the generic PoliciesServiceTogglePolicy builder with application/json body
func NewPoliciesServiceTogglePolicyRequest(server string, body PoliciesServiceTogglePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesServiceTogglePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesServiceTogglePolicyRequestWithBody generates requests for PoliciesServiceTogglePolicy with any type of body
func NewPoliciesServiceTogglePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policies:toggle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetentionsServiceGetRetentionsRequest generates requests for RetentionsServiceGetRetentions
func NewRetentionsServiceGetRetentionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retentions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetentionsServiceUpdateRetentionsRequest calls the generic RetentionsServiceUpdateRetentions builder with application/json body
func NewRetentionsServiceUpdateRetentionsRequest(server string, body RetentionsServiceUpdateRetentionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetentionsServiceUpdateRetentionsRequestWithBody(server, "application/json", bodyReader)
}

// NewRetentionsServiceUpdateRetentionsRequestWithBody generates requests for RetentionsServiceUpdateRetentions with any type of body
func NewRetentionsServiceUpdateRetentionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retentions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetentionsServiceGetRetentionsEnabledRequest generates requests for RetentionsServiceGetRetentionsEnabled
func NewRetentionsServiceGetRetentionsEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retentions/enabled")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetentionsServiceActivateRetentionsRequest calls the generic RetentionsServiceActivateRetentions builder with application/json body
func NewRetentionsServiceActivateRetentionsRequest(server string, body RetentionsServiceActivateRetentionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetentionsServiceActivateRetentionsRequestWithBody(server, "application/json", bodyReader)
}

// NewRetentionsServiceActivateRetentionsRequestWithBody generates requests for RetentionsServiceActivateRetentions with any type of body
func NewRetentionsServiceActivateRetentionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/retentions:activate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRuleGroupSetsListRequest generates requests for RuleGroupSetsList
func NewRuleGroupSetsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rule-group-sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleGroupSetsCreateRequest calls the generic RuleGroupSetsCreate builder with application/json body
func NewRuleGroupSetsCreateRequest(server string, body RuleGroupSetsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRuleGroupSetsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRuleGroupSetsCreateRequestWithBody generates requests for RuleGroupSetsCreate with any type of body
func NewRuleGroupSetsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rule-group-sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRuleGroupSetsDeleteRequest generates requests for RuleGroupSetsDelete
func NewRuleGroupSetsDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rule-group-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleGroupSetsFetchRequest generates requests for RuleGroupSetsFetch
func NewRuleGroupSetsFetchRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rule-group-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRuleGroupSetsUpdateRequest calls the generic RuleGroupSetsUpdate builder with application/json body
func NewRuleGroupSetsUpdateRequest(server string, id string, body RuleGroupSetsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRuleGroupSetsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRuleGroupSetsUpdateRequestWithBody generates requests for RuleGroupSetsUpdate with any type of body
func NewRuleGroupSetsUpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rule-group-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScopesServiceGetTeamScopesByIdsRequest generates requests for ScopesServiceGetTeamScopesByIds
func NewScopesServiceGetTeamScopesByIdsRequest(server string, params *ScopesServiceGetTeamScopesByIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScopesServiceCreateScopeRequest calls the generic ScopesServiceCreateScope builder with application/json body
func NewScopesServiceCreateScopeRequest(server string, body ScopesServiceCreateScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScopesServiceCreateScopeRequestWithBody(server, "application/json", bodyReader)
}

// NewScopesServiceCreateScopeRequestWithBody generates requests for ScopesServiceCreateScope with any type of body
func NewScopesServiceCreateScopeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScopesServiceUpdateScopeRequest calls the generic ScopesServiceUpdateScope builder with application/json body
func NewScopesServiceUpdateScopeRequest(server string, body ScopesServiceUpdateScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScopesServiceUpdateScopeRequestWithBody(server, "application/json", bodyReader)
}

// NewScopesServiceUpdateScopeRequestWithBody generates requests for ScopesServiceUpdateScope with any type of body
func NewScopesServiceUpdateScopeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScopesServiceGetTeamScopesRequest generates requests for ScopesServiceGetTeamScopes
func NewScopesServiceGetTeamScopesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scopes/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScopesServiceDeleteScopeRequest generates requests for ScopesServiceDeleteScope
func NewScopesServiceDeleteScopeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scopes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlosServiceListSlosRequest generates requests for SlosServiceListSlos
func NewSlosServiceListSlosRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/slo/slos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlosServiceCreateSloRequest calls the generic SlosServiceCreateSlo builder with application/json body
func NewSlosServiceCreateSloRequest(server string, body SlosServiceCreateSloJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlosServiceCreateSloRequestWithBody(server, "application/json", bodyReader)
}

// NewSlosServiceCreateSloRequestWithBody generates requests for SlosServiceCreateSlo with any type of body
func NewSlosServiceCreateSloRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/slo/slos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlosServiceReplaceSloRequest calls the generic SlosServiceReplaceSlo builder with application/json body
func NewSlosServiceReplaceSloRequest(server string, body SlosServiceReplaceSloJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlosServiceReplaceSloRequestWithBody(server, "application/json", bodyReader)
}

// NewSlosServiceReplaceSloRequestWithBody generates requests for SlosServiceReplaceSlo with any type of body
func NewSlosServiceReplaceSloRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/slo/slos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlosServiceDeleteSloRequest generates requests for SlosServiceDeleteSlo
func NewSlosServiceDeleteSloRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/slo/slos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlosServiceGetSloRequest generates requests for SlosServiceGetSlo
func NewSlosServiceGetSloRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/slo/slos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlosServiceBatchExecuteSloRequest generates requests for SlosServiceBatchExecuteSlo
func NewSlosServiceBatchExecuteSloRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/slo/slos:batchExecute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlosServiceBatchGetSlosRequest generates requests for SlosServiceBatchGetSlos
func NewSlosServiceBatchGetSlosRequest(server string, params *SlosServiceBatchGetSlosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/slo/slos:batchGet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSamlConfigurationServiceSetActiveRequest calls the generic SamlConfigurationServiceSetActive builder with application/json body
func NewSamlConfigurationServiceSetActiveRequest(server string, body SamlConfigurationServiceSetActiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSamlConfigurationServiceSetActiveRequestWithBody(server, "application/json", bodyReader)
}

// NewSamlConfigurationServiceSetActiveRequestWithBody generates requests for SamlConfigurationServiceSetActive with any type of body
func NewSamlConfigurationServiceSetActiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/saml/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSamlConfigurationServiceGetConfigurationRequest generates requests for SamlConfigurationServiceGetConfiguration
func NewSamlConfigurationServiceGetConfigurationRequest(server string, params *SamlConfigurationServiceGetConfigurationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/saml/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teamId", runtime.ParamLocationQuery, params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSamlConfigurationServiceSetIDPParametersRequest calls the generic SamlConfigurationServiceSetIDPParameters builder with application/json body
func NewSamlConfigurationServiceSetIDPParametersRequest(server string, body SamlConfigurationServiceSetIDPParametersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSamlConfigurationServiceSetIDPParametersRequestWithBody(server, "application/json", bodyReader)
}

// NewSamlConfigurationServiceSetIDPParametersRequestWithBody generates requests for SamlConfigurationServiceSetIDPParameters with any type of body
func NewSamlConfigurationServiceSetIDPParametersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/saml/idp_parameters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSamlConfigurationServiceGetSPParametersRequest generates requests for SamlConfigurationServiceGetSPParameters
func NewSamlConfigurationServiceGetSPParametersRequest(server string, params *SamlConfigurationServiceGetSPParametersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/saml/sp_parameters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teamId", runtime.ParamLocationQuery, params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceGetTeamGroupByNameRequest generates requests for TeamPermissionsMgmtServiceGetTeamGroupByName
func NewTeamPermissionsMgmtServiceGetTeamGroupByNameRequest(server string, params *TeamPermissionsMgmtServiceGetTeamGroupByNameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceCreateTeamGroupRequest calls the generic TeamPermissionsMgmtServiceCreateTeamGroup builder with application/json body
func NewTeamPermissionsMgmtServiceCreateTeamGroupRequest(server string, body TeamPermissionsMgmtServiceCreateTeamGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamPermissionsMgmtServiceCreateTeamGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewTeamPermissionsMgmtServiceCreateTeamGroupRequestWithBody generates requests for TeamPermissionsMgmtServiceCreateTeamGroup with any type of body
func NewTeamPermissionsMgmtServiceCreateTeamGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamPermissionsMgmtServiceUpdateTeamGroupRequest calls the generic TeamPermissionsMgmtServiceUpdateTeamGroup builder with application/json body
func NewTeamPermissionsMgmtServiceUpdateTeamGroupRequest(server string, body TeamPermissionsMgmtServiceUpdateTeamGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamPermissionsMgmtServiceUpdateTeamGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewTeamPermissionsMgmtServiceUpdateTeamGroupRequestWithBody generates requests for TeamPermissionsMgmtServiceUpdateTeamGroup with any type of body
func NewTeamPermissionsMgmtServiceUpdateTeamGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamPermissionsMgmtServiceGetTeamGroupsRequest generates requests for TeamPermissionsMgmtServiceGetTeamGroups
func NewTeamPermissionsMgmtServiceGetTeamGroupsRequest(server string, params *TeamPermissionsMgmtServiceGetTeamGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TeamIdId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teamId.id", runtime.ParamLocationQuery, *params.TeamIdId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest generates requests for TeamPermissionsMgmtServiceRemoveUsersFromTeamGroups
func NewTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsRequest(server string, params *TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TeamIdId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teamId.id", runtime.ParamLocationQuery, *params.TeamIdId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest calls the generic TeamPermissionsMgmtServiceAddUsersToTeamGroups builder with application/json body
func NewTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequest(server string, body TeamPermissionsMgmtServiceAddUsersToTeamGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequestWithBody generates requests for TeamPermissionsMgmtServiceAddUsersToTeamGroups with any type of body
func NewTeamPermissionsMgmtServiceAddUsersToTeamGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamPermissionsMgmtServiceDeleteTeamGroupRequest generates requests for TeamPermissionsMgmtServiceDeleteTeamGroup
func NewTeamPermissionsMgmtServiceDeleteTeamGroupRequest(server string, groupIdId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId.id", runtime.ParamLocationPath, groupIdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceGetTeamGroupRequest generates requests for TeamPermissionsMgmtServiceGetTeamGroup
func NewTeamPermissionsMgmtServiceGetTeamGroupRequest(server string, groupIdId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId.id", runtime.ParamLocationPath, groupIdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceGetTeamGroupScopeRequest generates requests for TeamPermissionsMgmtServiceGetTeamGroupScope
func NewTeamPermissionsMgmtServiceGetTeamGroupScopeRequest(server string, groupIdId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId.id", runtime.ParamLocationPath, groupIdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceSetTeamGroupScopeRequest calls the generic TeamPermissionsMgmtServiceSetTeamGroupScope builder with application/json body
func NewTeamPermissionsMgmtServiceSetTeamGroupScopeRequest(server string, groupIdId int64, body TeamPermissionsMgmtServiceSetTeamGroupScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamPermissionsMgmtServiceSetTeamGroupScopeRequestWithBody(server, groupIdId, "application/json", bodyReader)
}

// NewTeamPermissionsMgmtServiceSetTeamGroupScopeRequestWithBody generates requests for TeamPermissionsMgmtServiceSetTeamGroupScope with any type of body
func NewTeamPermissionsMgmtServiceSetTeamGroupScopeRequestWithBody(server string, groupIdId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId.id", runtime.ParamLocationPath, groupIdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest generates requests for TeamPermissionsMgmtServiceRemoveUsersFromTeamGroup
func NewTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupRequest(server string, groupIdId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId.id", runtime.ParamLocationPath, groupIdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceGetGroupUsersRequest generates requests for TeamPermissionsMgmtServiceGetGroupUsers
func NewTeamPermissionsMgmtServiceGetGroupUsersRequest(server string, groupIdId int64, params *TeamPermissionsMgmtServiceGetGroupUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId.id", runtime.ParamLocationPath, groupIdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest calls the generic TeamPermissionsMgmtServiceAddUsersToTeamGroup builder with application/json body
func NewTeamPermissionsMgmtServiceAddUsersToTeamGroupRequest(server string, groupIdId int64, body TeamPermissionsMgmtServiceAddUsersToTeamGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamPermissionsMgmtServiceAddUsersToTeamGroupRequestWithBody(server, groupIdId, "application/json", bodyReader)
}

// NewTeamPermissionsMgmtServiceAddUsersToTeamGroupRequestWithBody generates requests for TeamPermissionsMgmtServiceAddUsersToTeamGroup with any type of body
func NewTeamPermissionsMgmtServiceAddUsersToTeamGroupRequestWithBody(server string, groupIdId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId.id", runtime.ParamLocationPath, groupIdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/groups/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewViewsFoldersServiceListViewFoldersRequest generates requests for ViewsFoldersServiceListViewFolders
func NewViewsFoldersServiceListViewFoldersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/view_folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewsFoldersServiceCreateViewFolderRequest calls the generic ViewsFoldersServiceCreateViewFolder builder with application/json body
func NewViewsFoldersServiceCreateViewFolderRequest(server string, body ViewsFoldersServiceCreateViewFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewViewsFoldersServiceCreateViewFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewViewsFoldersServiceCreateViewFolderRequestWithBody generates requests for ViewsFoldersServiceCreateViewFolder with any type of body
func NewViewsFoldersServiceCreateViewFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/view_folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewViewsFoldersServiceReplaceViewFolderRequest calls the generic ViewsFoldersServiceReplaceViewFolder builder with application/json body
func NewViewsFoldersServiceReplaceViewFolderRequest(server string, folderId openapi_types.UUID, body ViewsFoldersServiceReplaceViewFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewViewsFoldersServiceReplaceViewFolderRequestWithBody(server, folderId, "application/json", bodyReader)
}

// NewViewsFoldersServiceReplaceViewFolderRequestWithBody generates requests for ViewsFoldersServiceReplaceViewFolder with any type of body
func NewViewsFoldersServiceReplaceViewFolderRequestWithBody(server string, folderId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "folder.id", runtime.ParamLocationPath, folderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/view_folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewViewsFoldersServiceDeleteViewFolderRequest generates requests for ViewsFoldersServiceDeleteViewFolder
func NewViewsFoldersServiceDeleteViewFolderRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/view_folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewsFoldersServiceGetViewFolderRequest generates requests for ViewsFoldersServiceGetViewFolder
func NewViewsFoldersServiceGetViewFolderRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/view_folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewsServiceListViewsRequest generates requests for ViewsServiceListViews
func NewViewsServiceListViewsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/views")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewsServiceCreateViewRequest calls the generic ViewsServiceCreateView builder with application/json body
func NewViewsServiceCreateViewRequest(server string, body ViewsServiceCreateViewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewViewsServiceCreateViewRequestWithBody(server, "application/json", bodyReader)
}

// NewViewsServiceCreateViewRequestWithBody generates requests for ViewsServiceCreateView with any type of body
func NewViewsServiceCreateViewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/views")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewViewsServiceDeleteViewRequest generates requests for ViewsServiceDeleteView
func NewViewsServiceDeleteViewRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/views/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewsServiceGetViewRequest generates requests for ViewsServiceGetView
func NewViewsServiceGetViewRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/views/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewViewsServiceReplaceViewRequest calls the generic ViewsServiceReplaceView builder with application/json body
func NewViewsServiceReplaceViewRequest(server string, viewId int32, body ViewsServiceReplaceViewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewViewsServiceReplaceViewRequestWithBody(server, viewId, "application/json", bodyReader)
}

// NewViewsServiceReplaceViewRequestWithBody generates requests for ViewsServiceReplaceView with any type of body
func NewViewsServiceReplaceViewRequestWithBody(server string, viewId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "view.id", runtime.ParamLocationPath, viewId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/views/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionsServiceListActionsRequest generates requests for ActionsServiceListActions
func NewActionsServiceListActionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionsServiceCreateActionRequest calls the generic ActionsServiceCreateAction builder with application/json body
func NewActionsServiceCreateActionRequest(server string, body ActionsServiceCreateActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionsServiceCreateActionRequestWithBody(server, "application/json", bodyReader)
}

// NewActionsServiceCreateActionRequestWithBody generates requests for ActionsServiceCreateAction with any type of body
func NewActionsServiceCreateActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionsServiceReplaceActionRequest calls the generic ActionsServiceReplaceAction builder with application/json body
func NewActionsServiceReplaceActionRequest(server string, body ActionsServiceReplaceActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionsServiceReplaceActionRequestWithBody(server, "application/json", bodyReader)
}

// NewActionsServiceReplaceActionRequestWithBody generates requests for ActionsServiceReplaceAction with any type of body
func NewActionsServiceReplaceActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionsServiceAtomicBatchExecuteActionsRequest calls the generic ActionsServiceAtomicBatchExecuteActions builder with application/json body
func NewActionsServiceAtomicBatchExecuteActionsRequest(server string, body ActionsServiceAtomicBatchExecuteActionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionsServiceAtomicBatchExecuteActionsRequestWithBody(server, "application/json", bodyReader)
}

// NewActionsServiceAtomicBatchExecuteActionsRequestWithBody generates requests for ActionsServiceAtomicBatchExecuteActions with any type of body
func NewActionsServiceAtomicBatchExecuteActionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions/actions:atomicBatchExecute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionsServiceOrderActionsRequest calls the generic ActionsServiceOrderActions builder with application/json body
func NewActionsServiceOrderActionsRequest(server string, body ActionsServiceOrderActionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionsServiceOrderActionsRequestWithBody(server, "application/json", bodyReader)
}

// NewActionsServiceOrderActionsRequestWithBody generates requests for ActionsServiceOrderActions with any type of body
func NewActionsServiceOrderActionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions/actions:order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionsServiceDeleteActionRequest generates requests for ActionsServiceDeleteAction
func NewActionsServiceDeleteActionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionsServiceGetActionRequest generates requests for ActionsServiceGetAction
func NewActionsServiceGetActionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDataUsageServiceGetDataUsageRequest generates requests for DataUsageServiceGetDataUsage
func NewDataUsageServiceGetDataUsageRequest(server string, params *DataUsageServiceGetDataUsageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/datausage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateRangeFromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateRange.fromDate", runtime.ParamLocationQuery, *params.DateRangeFromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateRangeToDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateRange.toDate", runtime.ParamLocationQuery, *params.DateRangeToDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, *params.Resolution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Aggregate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aggregate", runtime.ParamLocationQuery, *params.Aggregate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDataUsageServiceGetDailyUsageEvaluationTokensRequest calls the generic DataUsageServiceGetDailyUsageEvaluationTokens builder with application/json body
func NewDataUsageServiceGetDailyUsageEvaluationTokensRequest(server string, body DataUsageServiceGetDailyUsageEvaluationTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDataUsageServiceGetDailyUsageEvaluationTokensRequestWithBody(server, "application/json", bodyReader)
}

// NewDataUsageServiceGetDailyUsageEvaluationTokensRequestWithBody generates requests for DataUsageServiceGetDailyUsageEvaluationTokens with any type of body
func NewDataUsageServiceGetDailyUsageEvaluationTokensRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/datausage/daily/evaluation_tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDataUsageServiceGetDailyUsageProcessedGbsRequest calls the generic DataUsageServiceGetDailyUsageProcessedGbs builder with application/json body
func NewDataUsageServiceGetDailyUsageProcessedGbsRequest(server string, body DataUsageServiceGetDailyUsageProcessedGbsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDataUsageServiceGetDailyUsageProcessedGbsRequestWithBody(server, "application/json", bodyReader)
}

// NewDataUsageServiceGetDailyUsageProcessedGbsRequestWithBody generates requests for DataUsageServiceGetDailyUsageProcessedGbs with any type of body
func NewDataUsageServiceGetDailyUsageProcessedGbsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/datausage/daily/processed_gbs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDataUsageServiceGetDailyUsageUnitsRequest calls the generic DataUsageServiceGetDailyUsageUnits builder with application/json body
func NewDataUsageServiceGetDailyUsageUnitsRequest(server string, body DataUsageServiceGetDailyUsageUnitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDataUsageServiceGetDailyUsageUnitsRequestWithBody(server, "application/json", bodyReader)
}

// NewDataUsageServiceGetDailyUsageUnitsRequestWithBody generates requests for DataUsageServiceGetDailyUsageUnits with any type of body
func NewDataUsageServiceGetDailyUsageUnitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/datausage/daily/units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDataUsageServiceGetDataUsageMetricsExportStatusRequest generates requests for DataUsageServiceGetDataUsageMetricsExportStatus
func NewDataUsageServiceGetDataUsageMetricsExportStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/datausage/exportstatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDataUsageServiceUpdateDataUsageMetricsExportStatusRequest calls the generic DataUsageServiceUpdateDataUsageMetricsExportStatus builder with application/json body
func NewDataUsageServiceUpdateDataUsageMetricsExportStatusRequest(server string, body DataUsageServiceUpdateDataUsageMetricsExportStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDataUsageServiceUpdateDataUsageMetricsExportStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewDataUsageServiceUpdateDataUsageMetricsExportStatusRequestWithBody generates requests for DataUsageServiceUpdateDataUsageMetricsExportStatus with any type of body
func NewDataUsageServiceUpdateDataUsageMetricsExportStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/datausage/exportstatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDataUsageServiceGetLogsCountRequest generates requests for DataUsageServiceGetLogsCount
func NewDataUsageServiceGetLogsCountRequest(server string, params *DataUsageServiceGetLogsCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/datausage/logscount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateRangeFromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateRange.fromDate", runtime.ParamLocationQuery, *params.DateRangeFromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateRangeToDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateRange.toDate", runtime.ParamLocationQuery, *params.DateRangeToDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, *params.Resolution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FiltersApplication != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters.application", runtime.ParamLocationQuery, *params.FiltersApplication); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FiltersSubsystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters.subsystem", runtime.ParamLocationQuery, *params.FiltersSubsystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDataUsageServiceGetSpansCountRequest generates requests for DataUsageServiceGetSpansCount
func NewDataUsageServiceGetSpansCountRequest(server string, params *DataUsageServiceGetSpansCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/datausage/spanscount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateRangeFromDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateRange.fromDate", runtime.ParamLocationQuery, *params.DateRangeFromDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateRangeToDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateRange.toDate", runtime.ParamLocationQuery, *params.DateRangeToDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, *params.Resolution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FiltersApplication != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters.application", runtime.ParamLocationQuery, *params.FiltersApplication); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FiltersSubsystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters.subsystem", runtime.ParamLocationQuery, *params.FiltersSubsystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTargetServiceGetTargetRequest generates requests for TargetServiceGetTarget
func NewTargetServiceGetTargetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTargetServiceSetTargetRequest calls the generic TargetServiceSetTarget builder with application/json body
func NewTargetServiceSetTargetRequest(server string, body TargetServiceSetTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTargetServiceSetTargetRequestWithBody(server, "application/json", bodyReader)
}

// NewTargetServiceSetTargetRequestWithBody generates requests for TargetServiceSetTarget with any type of body
func NewTargetServiceSetTargetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTargetServiceValidateTargetRequest calls the generic TargetServiceValidateTarget builder with application/json body
func NewTargetServiceValidateTargetRequest(server string, body TargetServiceValidateTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTargetServiceValidateTargetRequestWithBody(server, "application/json", bodyReader)
}

// NewTargetServiceValidateTargetRequestWithBody generates requests for TargetServiceValidateTarget with any type of body
func NewTargetServiceValidateTargetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/target:validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlertDefsServiceListAlertDefsRequest generates requests for AlertDefsServiceListAlertDefs
func NewAlertDefsServiceListAlertDefsRequest(server string, params *AlertDefsServiceListAlertDefsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-defs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.nameFilter.name", runtime.ParamLocationQuery, params.QueryFilterNameFilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.nameFilter.matcher", runtime.ParamLocationQuery, params.QueryFilterNameFilterMatcher); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.typeFilter.type", runtime.ParamLocationQuery, params.QueryFilterTypeFilterType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.typeFilter.matcher", runtime.ParamLocationQuery, params.QueryFilterTypeFilterMatcher); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.QueryFilterEntityLabelsFilterEntityLabels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.entityLabelsFilter.entityLabels", runtime.ParamLocationQuery, *params.QueryFilterEntityLabelsFilterEntityLabels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.entityLabelsFilter.valuesOperator", runtime.ParamLocationQuery, params.QueryFilterEntityLabelsFilterValuesOperator); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.priorityFilter.priority", runtime.ParamLocationQuery, params.QueryFilterPriorityFilterPriority); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.priorityFilter.matcher", runtime.ParamLocationQuery, params.QueryFilterPriorityFilterMatcher); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.enabledFilter.enabled", runtime.ParamLocationQuery, params.QueryFilterEnabledFilterEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.modifiedTimeRangeFilter.modifiedAtRange.startTime", runtime.ParamLocationQuery, params.QueryFilterModifiedTimeRangeFilterModifiedAtRangeStartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.modifiedTimeRangeFilter.modifiedAtRange.endTime", runtime.ParamLocationQuery, params.QueryFilterModifiedTimeRangeFilterModifiedAtRangeEndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.lastTriggeredTimeRangeFilter.lastTriggeredAtRange.startTime", runtime.ParamLocationQuery, params.QueryFilterLastTriggeredTimeRangeFilterLastTriggeredAtRangeStartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.lastTriggeredTimeRangeFilter.lastTriggeredAtRange.endTime", runtime.ParamLocationQuery, params.QueryFilterLastTriggeredTimeRangeFilterLastTriggeredAtRangeEndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.typeSpecificFilter.sloFilter.sloId", runtime.ParamLocationQuery, params.QueryFilterTypeSpecificFilterSloFilterSloId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilter.typeSpecificFilter.sloFilter.matcher", runtime.ParamLocationQuery, params.QueryFilterTypeSpecificFilterSloFilterMatcher); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PaginationPageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageSize", runtime.ParamLocationQuery, *params.PaginationPageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PaginationPageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageToken", runtime.ParamLocationQuery, *params.PaginationPageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertDefsServiceCreateAlertDefRequest calls the generic AlertDefsServiceCreateAlertDef builder with application/json body
func NewAlertDefsServiceCreateAlertDefRequest(server string, body AlertDefsServiceCreateAlertDefJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlertDefsServiceCreateAlertDefRequestWithBody(server, "application/json", bodyReader)
}

// NewAlertDefsServiceCreateAlertDefRequestWithBody generates requests for AlertDefsServiceCreateAlertDef with any type of body
func NewAlertDefsServiceCreateAlertDefRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-defs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlertDefsServiceReplaceAlertDefRequest calls the generic AlertDefsServiceReplaceAlertDef builder with application/json body
func NewAlertDefsServiceReplaceAlertDefRequest(server string, body AlertDefsServiceReplaceAlertDefJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlertDefsServiceReplaceAlertDefRequestWithBody(server, "application/json", bodyReader)
}

// NewAlertDefsServiceReplaceAlertDefRequestWithBody generates requests for AlertDefsServiceReplaceAlertDef with any type of body
func NewAlertDefsServiceReplaceAlertDefRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-defs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAlertDefsServiceGetAlertDefByVersionIdRequest generates requests for AlertDefsServiceGetAlertDefByVersionId
func NewAlertDefsServiceGetAlertDefByVersionIdRequest(server string, alertVersionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alertVersionId", runtime.ParamLocationPath, alertVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-defs/alert-version-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertDefsServiceDeleteAlertDefRequest generates requests for AlertDefsServiceDeleteAlertDef
func NewAlertDefsServiceDeleteAlertDefRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-defs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertDefsServiceGetAlertDefRequest generates requests for AlertDefsServiceGetAlertDef
func NewAlertDefsServiceGetAlertDefRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-defs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertDefsServiceSetActiveRequest generates requests for AlertDefsServiceSetActive
func NewAlertDefsServiceSetActiveRequest(server string, id string, params *AlertDefsServiceSetActiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-defs/%s:setActive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, params.Active); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertEventServiceGetAlertEventsStatsRequest generates requests for AlertEventServiceGetAlertEventsStats
func NewAlertEventServiceGetAlertEventsStatsRequest(server string, params *AlertEventServiceGetAlertEventsStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-event-stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertEventServiceGetAlertEventRequest generates requests for AlertEventServiceGetAlertEvent
func NewAlertEventServiceGetAlertEventRequest(server string, id string, params *AlertEventServiceGetAlertEventParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alert-event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PaginationPageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageSize", runtime.ParamLocationQuery, *params.PaginationPageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PaginationPageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageToken", runtime.ParamLocationQuery, *params.PaginationPageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertDefsServiceDownloadAlertsRequest generates requests for AlertDefsServiceDownloadAlerts
func NewAlertDefsServiceDownloadAlertsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/alerts/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiKeysServiceCreateApiKeyRequest calls the generic ApiKeysServiceCreateApiKey builder with application/json body
func NewApiKeysServiceCreateApiKeyRequest(server string, body ApiKeysServiceCreateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiKeysServiceCreateApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewApiKeysServiceCreateApiKeyRequestWithBody generates requests for ApiKeysServiceCreateApiKey with any type of body
func NewApiKeysServiceCreateApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/api_keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiKeysServiceGetSendDataApiKeysRequest generates requests for ApiKeysServiceGetSendDataApiKeys
func NewApiKeysServiceGetSendDataApiKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/api_keys/send_data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiKeysServiceDeleteApiKeyRequest generates requests for ApiKeysServiceDeleteApiKey
func NewApiKeysServiceDeleteApiKeyRequest(server string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/api_keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiKeysServiceGetApiKeyRequest generates requests for ApiKeysServiceGetApiKey
func NewApiKeysServiceGetApiKeyRequest(server string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/api_keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiKeysServiceUpdateApiKeyRequest calls the generic ApiKeysServiceUpdateApiKey builder with application/json body
func NewApiKeysServiceUpdateApiKeyRequest(server string, keyId string, body ApiKeysServiceUpdateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiKeysServiceUpdateApiKeyRequestWithBody(server, keyId, "application/json", bodyReader)
}

// NewApiKeysServiceUpdateApiKeyRequestWithBody generates requests for ApiKeysServiceUpdateApiKey with any type of body
func NewApiKeysServiceUpdateApiKeyRequestWithBody(server string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/api_keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsServiceListEventsRequest generates requests for EventsServiceListEvents
func NewEventsServiceListEventsRequest(server string, params *EventsServiceListEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.timestamp.from", runtime.ParamLocationQuery, params.FilterTimestampFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.timestamp.to", runtime.ParamLocationQuery, params.FilterTimestampTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventTypes", runtime.ParamLocationQuery, params.FilterCxEventTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventKeys", runtime.ParamLocationQuery, params.FilterCxEventKeys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterCxEventMetadataFiltersOperator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventMetadataFilters.operator", runtime.ParamLocationQuery, *params.FilterCxEventMetadataFiltersOperator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PaginationPageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageSize", runtime.ParamLocationQuery, *params.PaginationPageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PaginationPageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageToken", runtime.ParamLocationQuery, *params.PaginationPageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsServiceBatchGetEventRequest generates requests for EventsServiceBatchGetEvent
func NewEventsServiceBatchGetEventRequest(server string, params *EventsServiceBatchGetEventParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/events/events:batchGet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PaginationPageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageSize", runtime.ParamLocationQuery, *params.PaginationPageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PaginationPageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageToken", runtime.ParamLocationQuery, *params.PaginationPageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.timestamp.from", runtime.ParamLocationQuery, params.FilterTimestampFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.timestamp.to", runtime.ParamLocationQuery, params.FilterTimestampTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsServiceGetEventRequest generates requests for EventsServiceGetEvent
func NewEventsServiceGetEventRequest(server string, id string, params *EventsServiceGetEventParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PaginationPageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageSize", runtime.ParamLocationQuery, *params.PaginationPageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PaginationPageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination.pageToken", runtime.ParamLocationQuery, *params.PaginationPageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsServiceListEventsCountRequest generates requests for EventsServiceListEventsCount
func NewEventsServiceListEventsCountRequest(server string, params *EventsServiceListEventsCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/events:count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.timestamp.from", runtime.ParamLocationQuery, params.FilterTimestampFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.timestamp.to", runtime.ParamLocationQuery, params.FilterTimestampTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventTypes", runtime.ParamLocationQuery, params.FilterCxEventTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventKeys", runtime.ParamLocationQuery, params.FilterCxEventKeys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterCxEventMetadataFiltersOperator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventMetadataFilters.operator", runtime.ParamLocationQuery, *params.FilterCxEventMetadataFiltersOperator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsServiceGetEventsStatisticsRequest generates requests for EventsServiceGetEventsStatistics
func NewEventsServiceGetEventsStatisticsRequest(server string, params *EventsServiceGetEventsStatisticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/events:statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.timestamp.from", runtime.ParamLocationQuery, params.FilterTimestampFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.timestamp.to", runtime.ParamLocationQuery, params.FilterTimestampTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventTypes", runtime.ParamLocationQuery, params.FilterCxEventTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventKeys", runtime.ParamLocationQuery, params.FilterCxEventKeys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterCxEventMetadataFiltersOperator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.cxEventMetadataFilters.operator", runtime.ParamLocationQuery, *params.FilterCxEventMetadataFiltersOperator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RuleGroupsServiceGetRuleGroupModelMappingWithBodyWithResponse request with any body
	RuleGroupsServiceGetRuleGroupModelMappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetRuleGroupModelMappingResponse, error)

	RuleGroupsServiceGetRuleGroupModelMappingWithResponse(ctx context.Context, body RuleGroupsServiceGetRuleGroupModelMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetRuleGroupModelMappingResponse, error)

	// RuleGroupsServiceBulkDeleteRuleGroupWithResponse request
	RuleGroupsServiceBulkDeleteRuleGroupWithResponse(ctx context.Context, params *RuleGroupsServiceBulkDeleteRuleGroupParams, reqEditors ...RequestEditorFn) (*RuleGroupsServiceBulkDeleteRuleGroupResponse, error)

	// RuleGroupsServiceListRuleGroupsWithResponse request
	RuleGroupsServiceListRuleGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuleGroupsServiceListRuleGroupsResponse, error)

	// RuleGroupsServiceCreateRuleGroupWithBodyWithResponse request with any body
	RuleGroupsServiceCreateRuleGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupsServiceCreateRuleGroupResponse, error)

	RuleGroupsServiceCreateRuleGroupWithResponse(ctx context.Context, body RuleGroupsServiceCreateRuleGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupsServiceCreateRuleGroupResponse, error)

	// RuleGroupsServiceGetCompanyUsageLimitsWithBodyWithResponse request with any body
	RuleGroupsServiceGetCompanyUsageLimitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetCompanyUsageLimitsResponse, error)

	RuleGroupsServiceGetCompanyUsageLimitsWithResponse(ctx context.Context, body RuleGroupsServiceGetCompanyUsageLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetCompanyUsageLimitsResponse, error)

	// RuleGroupsServiceDeleteRuleGroupWithResponse request
	RuleGroupsServiceDeleteRuleGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*RuleGroupsServiceDeleteRuleGroupResponse, error)

	// RuleGroupsServiceGetRuleGroupWithResponse request
	RuleGroupsServiceGetRuleGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetRuleGroupResponse, error)

	// RuleGroupsServiceUpdateRuleGroupWithBodyWithResponse request with any body
	RuleGroupsServiceUpdateRuleGroupWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupsServiceUpdateRuleGroupResponse, error)

	RuleGroupsServiceUpdateRuleGroupWithResponse(ctx context.Context, groupId string, body RuleGroupsServiceUpdateRuleGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupsServiceUpdateRuleGroupResponse, error)

	// Events2MetricServiceListE2MWithResponse request
	Events2MetricServiceListE2MWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Events2MetricServiceListE2MResponse, error)

	// Events2MetricServiceCreateE2MWithBodyWithResponse request with any body
	Events2MetricServiceCreateE2MWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Events2MetricServiceCreateE2MResponse, error)

	Events2MetricServiceCreateE2MWithResponse(ctx context.Context, body Events2MetricServiceCreateE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*Events2MetricServiceCreateE2MResponse, error)

	// Events2MetricServiceReplaceE2MWithBodyWithResponse request with any body
	Events2MetricServiceReplaceE2MWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Events2MetricServiceReplaceE2MResponse, error)

	Events2MetricServiceReplaceE2MWithResponse(ctx context.Context, body Events2MetricServiceReplaceE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*Events2MetricServiceReplaceE2MResponse, error)

	// Events2MetricServiceAtomicBatchExecuteE2MWithBodyWithResponse request with any body
	Events2MetricServiceAtomicBatchExecuteE2MWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Events2MetricServiceAtomicBatchExecuteE2MResponse, error)

	Events2MetricServiceAtomicBatchExecuteE2MWithResponse(ctx context.Context, body Events2MetricServiceAtomicBatchExecuteE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*Events2MetricServiceAtomicBatchExecuteE2MResponse, error)

	// Events2MetricServiceListLabelsCardinalityWithResponse request
	Events2MetricServiceListLabelsCardinalityWithResponse(ctx context.Context, params *Events2MetricServiceListLabelsCardinalityParams, reqEditors ...RequestEditorFn) (*Events2MetricServiceListLabelsCardinalityResponse, error)

	// Events2MetricServiceGetLimitsWithResponse request
	Events2MetricServiceGetLimitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Events2MetricServiceGetLimitsResponse, error)

	// Events2MetricServiceDeleteE2MWithResponse request
	Events2MetricServiceDeleteE2MWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Events2MetricServiceDeleteE2MResponse, error)

	// Events2MetricServiceGetE2MWithResponse request
	Events2MetricServiceGetE2MWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Events2MetricServiceGetE2MResponse, error)

	// EnrichmentServiceRemoveEnrichmentsWithResponse request
	EnrichmentServiceRemoveEnrichmentsWithResponse(ctx context.Context, params *EnrichmentServiceRemoveEnrichmentsParams, reqEditors ...RequestEditorFn) (*EnrichmentServiceRemoveEnrichmentsResponse, error)

	// EnrichmentServiceGetEnrichmentsWithResponse request
	EnrichmentServiceGetEnrichmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EnrichmentServiceGetEnrichmentsResponse, error)

	// EnrichmentServiceAddEnrichmentsWithBodyWithResponse request with any body
	EnrichmentServiceAddEnrichmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnrichmentServiceAddEnrichmentsResponse, error)

	EnrichmentServiceAddEnrichmentsWithResponse(ctx context.Context, body EnrichmentServiceAddEnrichmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnrichmentServiceAddEnrichmentsResponse, error)

	// EnrichmentServiceGetEnrichmentLimitWithResponse request
	EnrichmentServiceGetEnrichmentLimitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EnrichmentServiceGetEnrichmentLimitResponse, error)

	// EnrichmentServiceGetCompanyEnrichmentSettingsWithResponse request
	EnrichmentServiceGetCompanyEnrichmentSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EnrichmentServiceGetCompanyEnrichmentSettingsResponse, error)

	// EnrichmentServiceAtomicOverwriteEnrichmentsWithBodyWithResponse request with any body
	EnrichmentServiceAtomicOverwriteEnrichmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnrichmentServiceAtomicOverwriteEnrichmentsResponse, error)

	EnrichmentServiceAtomicOverwriteEnrichmentsWithResponse(ctx context.Context, body EnrichmentServiceAtomicOverwriteEnrichmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnrichmentServiceAtomicOverwriteEnrichmentsResponse, error)

	// MetricsTcoServiceGetWithResponse request
	MetricsTcoServiceGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsTcoServiceGetResponse, error)

	// MetricsTcoServiceAddWithBodyWithResponse request with any body
	MetricsTcoServiceAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsTcoServiceAddResponse, error)

	MetricsTcoServiceAddWithResponse(ctx context.Context, body MetricsTcoServiceAddJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsTcoServiceAddResponse, error)

	// MetricsTcoServiceDeleteWithBodyWithResponse request with any body
	MetricsTcoServiceDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsTcoServiceDeleteResponse, error)

	MetricsTcoServiceDeleteWithResponse(ctx context.Context, body MetricsTcoServiceDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsTcoServiceDeleteResponse, error)

	// AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithBodyWithResponse request with any body
	AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse, error)

	AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithResponse(ctx context.Context, body AlertSchedulerRuleServiceCreateAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse, error)

	// AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithBodyWithResponse request with any body
	AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse, error)

	AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithResponse(ctx context.Context, body AlertSchedulerRuleServiceUpdateAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse, error)

	// AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleWithResponse request
	AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleWithResponse(ctx context.Context, params *AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleParams, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse, error)

	// AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithBodyWithResponse request with any body
	AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse, error)

	AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithResponse(ctx context.Context, body AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse, error)

	// AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithBodyWithResponse request with any body
	AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse, error)

	AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithResponse(ctx context.Context, body AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse, error)

	// AlertSchedulerRuleServiceDeleteAlertSchedulerRuleWithResponse request
	AlertSchedulerRuleServiceDeleteAlertSchedulerRuleWithResponse(ctx context.Context, alertSchedulerRuleId string, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse, error)

	// AlertSchedulerRuleServiceGetAlertSchedulerRuleWithResponse request
	AlertSchedulerRuleServiceGetAlertSchedulerRuleWithResponse(ctx context.Context, alertSchedulerRuleId string, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceGetAlertSchedulerRuleResponse, error)

	// ContextualDataIntegrationServiceSaveContextualDataIntegrationWithBodyWithResponse request with any body
	ContextualDataIntegrationServiceSaveContextualDataIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse, error)

	ContextualDataIntegrationServiceSaveContextualDataIntegrationWithResponse(ctx context.Context, body ContextualDataIntegrationServiceSaveContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse, error)

	// ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithBodyWithResponse request with any body
	ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse, error)

	ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithResponse(ctx context.Context, body ContextualDataIntegrationServiceUpdateContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse, error)

	// ContextualDataIntegrationServiceTestContextualDataIntegrationWithBodyWithResponse request with any body
	ContextualDataIntegrationServiceTestContextualDataIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceTestContextualDataIntegrationResponse, error)

	ContextualDataIntegrationServiceTestContextualDataIntegrationWithResponse(ctx context.Context, body ContextualDataIntegrationServiceTestContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceTestContextualDataIntegrationResponse, error)

	// ContextualDataIntegrationServiceDeleteContextualDataIntegrationWithResponse request
	ContextualDataIntegrationServiceDeleteContextualDataIntegrationWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse, error)

	// ContextualDataIntegrationServiceGetContextualDataIntegrationsWithResponse request
	ContextualDataIntegrationServiceGetContextualDataIntegrationsWithResponse(ctx context.Context, params *ContextualDataIntegrationServiceGetContextualDataIntegrationsParams, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceGetContextualDataIntegrationsResponse, error)

	// ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionWithResponse request
	ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionWithResponse(ctx context.Context, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionParams, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse, error)

	// ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsWithResponse request
	ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsWithResponse(ctx context.Context, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse, error)

	// CustomEnrichmentServiceGetCustomEnrichmentsWithResponse request
	CustomEnrichmentServiceGetCustomEnrichmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceGetCustomEnrichmentsResponse, error)

	// CustomEnrichmentServiceCreateCustomEnrichmentWithBodyWithResponse request with any body
	CustomEnrichmentServiceCreateCustomEnrichmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceCreateCustomEnrichmentResponse, error)

	CustomEnrichmentServiceCreateCustomEnrichmentWithResponse(ctx context.Context, body CustomEnrichmentServiceCreateCustomEnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceCreateCustomEnrichmentResponse, error)

	// CustomEnrichmentServiceUpdateCustomEnrichmentWithBodyWithResponse request with any body
	CustomEnrichmentServiceUpdateCustomEnrichmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceUpdateCustomEnrichmentResponse, error)

	CustomEnrichmentServiceUpdateCustomEnrichmentWithResponse(ctx context.Context, body CustomEnrichmentServiceUpdateCustomEnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceUpdateCustomEnrichmentResponse, error)

	// CustomEnrichmentServiceSearchCustomEnrichmentDataWithResponse request
	CustomEnrichmentServiceSearchCustomEnrichmentDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceSearchCustomEnrichmentDataResponse, error)

	// CustomEnrichmentServiceDeleteCustomEnrichmentWithResponse request
	CustomEnrichmentServiceDeleteCustomEnrichmentWithResponse(ctx context.Context, customEnrichmentId int64, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceDeleteCustomEnrichmentResponse, error)

	// CustomEnrichmentServiceGetCustomEnrichmentWithResponse request
	CustomEnrichmentServiceGetCustomEnrichmentWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceGetCustomEnrichmentResponse, error)

	// DashboardsServiceGetDashboardBySlugWithResponse request
	DashboardsServiceGetDashboardBySlugWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*DashboardsServiceGetDashboardBySlugResponse, error)

	// DashboardCatalogServiceGetDashboardCatalogWithResponse request
	DashboardCatalogServiceGetDashboardCatalogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DashboardCatalogServiceGetDashboardCatalogResponse, error)

	// DashboardsServiceCreateDashboardWithBodyWithResponse request with any body
	DashboardsServiceCreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceCreateDashboardResponse, error)

	DashboardsServiceCreateDashboardWithResponse(ctx context.Context, body DashboardsServiceCreateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceCreateDashboardResponse, error)

	// DashboardsServiceReplaceDashboardWithBodyWithResponse request with any body
	DashboardsServiceReplaceDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceReplaceDashboardResponse, error)

	DashboardsServiceReplaceDashboardWithResponse(ctx context.Context, body DashboardsServiceReplaceDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceReplaceDashboardResponse, error)

	// DashboardsServiceDeleteDashboardWithResponse request
	DashboardsServiceDeleteDashboardWithResponse(ctx context.Context, dashboardId string, params *DashboardsServiceDeleteDashboardParams, reqEditors ...RequestEditorFn) (*DashboardsServiceDeleteDashboardResponse, error)

	// DashboardsServiceGetDashboardWithResponse request
	DashboardsServiceGetDashboardWithResponse(ctx context.Context, dashboardId string, reqEditors ...RequestEditorFn) (*DashboardsServiceGetDashboardResponse, error)

	// DashboardsServiceReplaceDefaultDashboardWithBodyWithResponse request with any body
	DashboardsServiceReplaceDefaultDashboardWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceReplaceDefaultDashboardResponse, error)

	DashboardsServiceReplaceDefaultDashboardWithResponse(ctx context.Context, dashboardId string, body DashboardsServiceReplaceDefaultDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceReplaceDefaultDashboardResponse, error)

	// DashboardsServiceAssignDashboardFolderWithBodyWithResponse request with any body
	DashboardsServiceAssignDashboardFolderWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceAssignDashboardFolderResponse, error)

	DashboardsServiceAssignDashboardFolderWithResponse(ctx context.Context, dashboardId string, body DashboardsServiceAssignDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceAssignDashboardFolderResponse, error)

	// DashboardsServicePinDashboardWithBodyWithResponse request with any body
	DashboardsServicePinDashboardWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServicePinDashboardResponse, error)

	DashboardsServicePinDashboardWithResponse(ctx context.Context, dashboardId string, body DashboardsServicePinDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServicePinDashboardResponse, error)

	// DashboardsServiceUnpinDashboardWithBodyWithResponse request with any body
	DashboardsServiceUnpinDashboardWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceUnpinDashboardResponse, error)

	DashboardsServiceUnpinDashboardWithResponse(ctx context.Context, dashboardId string, body DashboardsServiceUnpinDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceUnpinDashboardResponse, error)

	// DashboardFoldersServiceListDashboardFoldersWithResponse request
	DashboardFoldersServiceListDashboardFoldersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceListDashboardFoldersResponse, error)

	// DashboardFoldersServiceCreateDashboardFolderWithBodyWithResponse request with any body
	DashboardFoldersServiceCreateDashboardFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceCreateDashboardFolderResponse, error)

	DashboardFoldersServiceCreateDashboardFolderWithResponse(ctx context.Context, body DashboardFoldersServiceCreateDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceCreateDashboardFolderResponse, error)

	// DashboardFoldersServiceReplaceDashboardFolderWithBodyWithResponse request with any body
	DashboardFoldersServiceReplaceDashboardFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceReplaceDashboardFolderResponse, error)

	DashboardFoldersServiceReplaceDashboardFolderWithResponse(ctx context.Context, body DashboardFoldersServiceReplaceDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceReplaceDashboardFolderResponse, error)

	// DashboardFoldersServiceDeleteDashboardFolderWithResponse request
	DashboardFoldersServiceDeleteDashboardFolderWithResponse(ctx context.Context, folderId string, params *DashboardFoldersServiceDeleteDashboardFolderParams, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceDeleteDashboardFolderResponse, error)

	// DashboardFoldersServiceGetDashboardFolderWithResponse request
	DashboardFoldersServiceGetDashboardFolderWithResponse(ctx context.Context, folderId string, params *DashboardFoldersServiceGetDashboardFolderParams, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceGetDashboardFolderResponse, error)

	// ExtensionDeploymentServiceDeployExtensionWithBodyWithResponse request with any body
	ExtensionDeploymentServiceDeployExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceDeployExtensionResponse, error)

	ExtensionDeploymentServiceDeployExtensionWithResponse(ctx context.Context, body ExtensionDeploymentServiceDeployExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceDeployExtensionResponse, error)

	// ExtensionDeploymentServiceGetDeployedExtensionsWithResponse request
	ExtensionDeploymentServiceGetDeployedExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceGetDeployedExtensionsResponse, error)

	// ExtensionDeploymentServiceUndeployExtensionWithBodyWithResponse request with any body
	ExtensionDeploymentServiceUndeployExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceUndeployExtensionResponse, error)

	ExtensionDeploymentServiceUndeployExtensionWithResponse(ctx context.Context, body ExtensionDeploymentServiceUndeployExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceUndeployExtensionResponse, error)

	// ExtensionDeploymentServiceUpdateExtensionWithBodyWithResponse request with any body
	ExtensionDeploymentServiceUpdateExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceUpdateExtensionResponse, error)

	ExtensionDeploymentServiceUpdateExtensionWithResponse(ctx context.Context, body ExtensionDeploymentServiceUpdateExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceUpdateExtensionResponse, error)

	// ExtensionTestingServiceCleanupTestingRevisionWithBodyWithResponse request with any body
	ExtensionTestingServiceCleanupTestingRevisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceCleanupTestingRevisionResponse, error)

	ExtensionTestingServiceCleanupTestingRevisionWithResponse(ctx context.Context, body ExtensionTestingServiceCleanupTestingRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceCleanupTestingRevisionResponse, error)

	// ExtensionTestingServiceInitializeTestingRevisionWithBodyWithResponse request with any body
	ExtensionTestingServiceInitializeTestingRevisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceInitializeTestingRevisionResponse, error)

	ExtensionTestingServiceInitializeTestingRevisionWithResponse(ctx context.Context, body ExtensionTestingServiceInitializeTestingRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceInitializeTestingRevisionResponse, error)

	// ExtensionTestingServiceTestExtensionRevisionWithBodyWithResponse request with any body
	ExtensionTestingServiceTestExtensionRevisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceTestExtensionRevisionResponse, error)

	ExtensionTestingServiceTestExtensionRevisionWithResponse(ctx context.Context, body ExtensionTestingServiceTestExtensionRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceTestExtensionRevisionResponse, error)

	// ExtensionServiceGetAllExtensionsWithBodyWithResponse request with any body
	ExtensionServiceGetAllExtensionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionServiceGetAllExtensionsResponse, error)

	ExtensionServiceGetAllExtensionsWithResponse(ctx context.Context, body ExtensionServiceGetAllExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionServiceGetAllExtensionsResponse, error)

	// ExtensionServiceGetExtensionWithResponse request
	ExtensionServiceGetExtensionWithResponse(ctx context.Context, id string, params *ExtensionServiceGetExtensionParams, reqEditors ...RequestEditorFn) (*ExtensionServiceGetExtensionResponse, error)

	// IncidentsServiceListIncidentsWithBodyWithResponse request with any body
	IncidentsServiceListIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentsResponse, error)

	IncidentsServiceListIncidentsWithResponse(ctx context.Context, body IncidentsServiceListIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentsResponse, error)

	// IncidentsServiceGetIncidentWithResponse request
	IncidentsServiceGetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsServiceGetIncidentResponse, error)

	// IncidentsServiceGetIncidentEventsWithResponse request
	IncidentsServiceGetIncidentEventsWithResponse(ctx context.Context, incidentId string, reqEditors ...RequestEditorFn) (*IncidentsServiceGetIncidentEventsResponse, error)

	// IncidentsServiceAcknowledgeIncidentsWithBodyWithResponse request with any body
	IncidentsServiceAcknowledgeIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceAcknowledgeIncidentsResponse, error)

	IncidentsServiceAcknowledgeIncidentsWithResponse(ctx context.Context, body IncidentsServiceAcknowledgeIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceAcknowledgeIncidentsResponse, error)

	// IncidentsServiceAssignIncidentsWithBodyWithResponse request with any body
	IncidentsServiceAssignIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceAssignIncidentsResponse, error)

	IncidentsServiceAssignIncidentsWithResponse(ctx context.Context, body IncidentsServiceAssignIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceAssignIncidentsResponse, error)

	// IncidentsServiceBatchGetIncidentWithResponse request
	IncidentsServiceBatchGetIncidentWithResponse(ctx context.Context, params *IncidentsServiceBatchGetIncidentParams, reqEditors ...RequestEditorFn) (*IncidentsServiceBatchGetIncidentResponse, error)

	// IncidentsServiceCloseIncidentsWithBodyWithResponse request with any body
	IncidentsServiceCloseIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceCloseIncidentsResponse, error)

	IncidentsServiceCloseIncidentsWithResponse(ctx context.Context, body IncidentsServiceCloseIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceCloseIncidentsResponse, error)

	// IncidentsServiceGetFilterValuesWithBodyWithResponse request with any body
	IncidentsServiceGetFilterValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceGetFilterValuesResponse, error)

	IncidentsServiceGetFilterValuesWithResponse(ctx context.Context, body IncidentsServiceGetFilterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceGetFilterValuesResponse, error)

	// IncidentsServiceListIncidentEventsWithBodyWithResponse request with any body
	IncidentsServiceListIncidentEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsResponse, error)

	IncidentsServiceListIncidentEventsWithResponse(ctx context.Context, body IncidentsServiceListIncidentEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsResponse, error)

	// IncidentsServiceListIncidentEventsFilterValuesWithBodyWithResponse request with any body
	IncidentsServiceListIncidentEventsFilterValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsFilterValuesResponse, error)

	IncidentsServiceListIncidentEventsFilterValuesWithResponse(ctx context.Context, body IncidentsServiceListIncidentEventsFilterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsFilterValuesResponse, error)

	// IncidentsServiceListIncidentEventsTotalCountWithBodyWithResponse request with any body
	IncidentsServiceListIncidentEventsTotalCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsTotalCountResponse, error)

	IncidentsServiceListIncidentEventsTotalCountWithResponse(ctx context.Context, body IncidentsServiceListIncidentEventsTotalCountJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsTotalCountResponse, error)

	// IncidentsServiceListIncidentAggregationsWithBodyWithResponse request with any body
	IncidentsServiceListIncidentAggregationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentAggregationsResponse, error)

	IncidentsServiceListIncidentAggregationsWithResponse(ctx context.Context, body IncidentsServiceListIncidentAggregationsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentAggregationsResponse, error)

	// IncidentsServiceResolveIncidentsWithBodyWithResponse request with any body
	IncidentsServiceResolveIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceResolveIncidentsResponse, error)

	IncidentsServiceResolveIncidentsWithResponse(ctx context.Context, body IncidentsServiceResolveIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceResolveIncidentsResponse, error)

	// IncidentsServiceUnassignIncidentsWithBodyWithResponse request with any body
	IncidentsServiceUnassignIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceUnassignIncidentsResponse, error)

	IncidentsServiceUnassignIncidentsWithResponse(ctx context.Context, body IncidentsServiceUnassignIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceUnassignIncidentsResponse, error)

	// IntegrationServiceGetIntegrationsWithResponse request
	IntegrationServiceGetIntegrationsWithResponse(ctx context.Context, params *IntegrationServiceGetIntegrationsParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetIntegrationsResponse, error)

	// IntegrationServiceGetIntegrationDefinitionWithResponse request
	IntegrationServiceGetIntegrationDefinitionWithResponse(ctx context.Context, id string, params *IntegrationServiceGetIntegrationDefinitionParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetIntegrationDefinitionResponse, error)

	// IntegrationServiceGetDeployedIntegrationWithResponse request
	IntegrationServiceGetDeployedIntegrationWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*IntegrationServiceGetDeployedIntegrationResponse, error)

	// IntegrationServiceDeleteIntegrationWithResponse request
	IntegrationServiceDeleteIntegrationWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*IntegrationServiceDeleteIntegrationResponse, error)

	// IntegrationServiceListManagedIntegrationKeysWithResponse request
	IntegrationServiceListManagedIntegrationKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IntegrationServiceListManagedIntegrationKeysResponse, error)

	// IntegrationServiceGetManagedIntegrationStatusWithResponse request
	IntegrationServiceGetManagedIntegrationStatusWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*IntegrationServiceGetManagedIntegrationStatusResponse, error)

	// IntegrationServiceSaveIntegrationWithBodyWithResponse request with any body
	IntegrationServiceSaveIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationServiceSaveIntegrationResponse, error)

	IntegrationServiceSaveIntegrationWithResponse(ctx context.Context, body IntegrationServiceSaveIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationServiceSaveIntegrationResponse, error)

	// IntegrationServiceUpdateIntegrationWithBodyWithResponse request with any body
	IntegrationServiceUpdateIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationServiceUpdateIntegrationResponse, error)

	IntegrationServiceUpdateIntegrationWithResponse(ctx context.Context, body IntegrationServiceUpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationServiceUpdateIntegrationResponse, error)

	// IntegrationServiceTestIntegrationWithBodyWithResponse request with any body
	IntegrationServiceTestIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationServiceTestIntegrationResponse, error)

	IntegrationServiceTestIntegrationWithResponse(ctx context.Context, body IntegrationServiceTestIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationServiceTestIntegrationResponse, error)

	// IntegrationServiceGetRumApplicationVersionDataWithResponse request
	IntegrationServiceGetRumApplicationVersionDataWithResponse(ctx context.Context, params *IntegrationServiceGetRumApplicationVersionDataParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetRumApplicationVersionDataResponse, error)

	// IntegrationServiceSyncRumDataWithBodyWithResponse request with any body
	IntegrationServiceSyncRumDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationServiceSyncRumDataResponse, error)

	IntegrationServiceSyncRumDataWithResponse(ctx context.Context, body IntegrationServiceSyncRumDataJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationServiceSyncRumDataResponse, error)

	// IntegrationServiceGetTemplateWithResponse request
	IntegrationServiceGetTemplateWithResponse(ctx context.Context, params *IntegrationServiceGetTemplateParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetTemplateResponse, error)

	// IntegrationServiceGetIntegrationDetailsWithResponse request
	IntegrationServiceGetIntegrationDetailsWithResponse(ctx context.Context, id string, params *IntegrationServiceGetIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetIntegrationDetailsResponse, error)

	// MetricsConfiguratorPublicServiceGetTenantConfigWithResponse request
	MetricsConfiguratorPublicServiceGetTenantConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceGetTenantConfigResponse, error)

	// MetricsConfiguratorPublicServiceConfigureTenantWithBodyWithResponse request with any body
	MetricsConfiguratorPublicServiceConfigureTenantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceConfigureTenantResponse, error)

	MetricsConfiguratorPublicServiceConfigureTenantWithResponse(ctx context.Context, body MetricsConfiguratorPublicServiceConfigureTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceConfigureTenantResponse, error)

	// MetricsConfiguratorPublicServiceUpdateWithBodyWithResponse request with any body
	MetricsConfiguratorPublicServiceUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceUpdateResponse, error)

	MetricsConfiguratorPublicServiceUpdateWithResponse(ctx context.Context, body MetricsConfiguratorPublicServiceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceUpdateResponse, error)

	// MetricsConfiguratorPublicServiceDisableArchiveWithResponse request
	MetricsConfiguratorPublicServiceDisableArchiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceDisableArchiveResponse, error)

	// MetricsConfiguratorPublicServiceEnableArchiveWithResponse request
	MetricsConfiguratorPublicServiceEnableArchiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceEnableArchiveResponse, error)

	// MetricsConfiguratorPublicServiceValidateBucketWithBodyWithResponse request with any body
	MetricsConfiguratorPublicServiceValidateBucketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceValidateBucketResponse, error)

	MetricsConfiguratorPublicServiceValidateBucketWithResponse(ctx context.Context, body MetricsConfiguratorPublicServiceValidateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceValidateBucketResponse, error)

	// ConnectorsServiceReplaceConnectorWithBodyWithResponse request with any body
	ConnectorsServiceReplaceConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConnectorsServiceReplaceConnectorResponse, error)

	ConnectorsServiceReplaceConnectorWithResponse(ctx context.Context, body ConnectorsServiceReplaceConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*ConnectorsServiceReplaceConnectorResponse, error)

	// ConnectorsServiceListConnectorsWithResponse request
	ConnectorsServiceListConnectorsWithResponse(ctx context.Context, params *ConnectorsServiceListConnectorsParams, reqEditors ...RequestEditorFn) (*ConnectorsServiceListConnectorsResponse, error)

	// ConnectorsServiceCreateConnectorWithBodyWithResponse request with any body
	ConnectorsServiceCreateConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConnectorsServiceCreateConnectorResponse, error)

	ConnectorsServiceCreateConnectorWithResponse(ctx context.Context, body ConnectorsServiceCreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*ConnectorsServiceCreateConnectorResponse, error)

	// ConnectorsServiceDeleteConnectorWithResponse request
	ConnectorsServiceDeleteConnectorWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ConnectorsServiceDeleteConnectorResponse, error)

	// ConnectorsServiceGetConnectorWithResponse request
	ConnectorsServiceGetConnectorWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ConnectorsServiceGetConnectorResponse, error)

	// ConnectorsServiceBatchGetConnectorsWithResponse request
	ConnectorsServiceBatchGetConnectorsWithResponse(ctx context.Context, params *ConnectorsServiceBatchGetConnectorsParams, reqEditors ...RequestEditorFn) (*ConnectorsServiceBatchGetConnectorsResponse, error)

	// ConnectorsServiceBatchGetConnectorSummariesWithResponse request
	ConnectorsServiceBatchGetConnectorSummariesWithResponse(ctx context.Context, params *ConnectorsServiceBatchGetConnectorSummariesParams, reqEditors ...RequestEditorFn) (*ConnectorsServiceBatchGetConnectorSummariesResponse, error)

	// ConnectorsServiceGetConnectorTypeSummariesWithResponse request
	ConnectorsServiceGetConnectorTypeSummariesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConnectorsServiceGetConnectorTypeSummariesResponse, error)

	// ConnectorsServiceListConnectorSummariesWithResponse request
	ConnectorsServiceListConnectorSummariesWithResponse(ctx context.Context, params *ConnectorsServiceListConnectorSummariesParams, reqEditors ...RequestEditorFn) (*ConnectorsServiceListConnectorSummariesResponse, error)

	// EntitiesServiceListEntityTypesWithResponse request
	EntitiesServiceListEntityTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EntitiesServiceListEntityTypesResponse, error)

	// EntitiesServiceListEntitySubTypesWithResponse request
	EntitiesServiceListEntitySubTypesWithResponse(ctx context.Context, entityType EntitiesServiceListEntitySubTypesParamsEntityType, reqEditors ...RequestEditorFn) (*EntitiesServiceListEntitySubTypesResponse, error)

	// TestingServiceTestConnectorConfigWithBodyWithResponse request with any body
	TestingServiceTestConnectorConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestConnectorConfigResponse, error)

	TestingServiceTestConnectorConfigWithResponse(ctx context.Context, body TestingServiceTestConnectorConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestConnectorConfigResponse, error)

	// TestingServiceTestDestinationWithBodyWithResponse request with any body
	TestingServiceTestDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestDestinationResponse, error)

	TestingServiceTestDestinationWithResponse(ctx context.Context, body TestingServiceTestDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestDestinationResponse, error)

	// TestingServiceTestExistingConnectorWithBodyWithResponse request with any body
	TestingServiceTestExistingConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestExistingConnectorResponse, error)

	TestingServiceTestExistingConnectorWithResponse(ctx context.Context, body TestingServiceTestExistingConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestExistingConnectorResponse, error)

	// TestingServiceTestExistingPresetWithBodyWithResponse request with any body
	TestingServiceTestExistingPresetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestExistingPresetResponse, error)

	TestingServiceTestExistingPresetWithResponse(ctx context.Context, body TestingServiceTestExistingPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestExistingPresetResponse, error)

	// TestingServiceTestPresetConfigWithBodyWithResponse request with any body
	TestingServiceTestPresetConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestPresetConfigResponse, error)

	TestingServiceTestPresetConfigWithResponse(ctx context.Context, body TestingServiceTestPresetConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestPresetConfigResponse, error)

	// TestingServiceTestRoutingConditionValidWithBodyWithResponse request with any body
	TestingServiceTestRoutingConditionValidWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestRoutingConditionValidResponse, error)

	TestingServiceTestRoutingConditionValidWithResponse(ctx context.Context, body TestingServiceTestRoutingConditionValidJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestRoutingConditionValidResponse, error)

	// TestingServiceTestTemplateRenderWithBodyWithResponse request with any body
	TestingServiceTestTemplateRenderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestTemplateRenderResponse, error)

	TestingServiceTestTemplateRenderWithResponse(ctx context.Context, body TestingServiceTestTemplateRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestTemplateRenderResponse, error)

	// PresetsServiceCreateCustomPresetWithBodyWithResponse request with any body
	PresetsServiceCreateCustomPresetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PresetsServiceCreateCustomPresetResponse, error)

	PresetsServiceCreateCustomPresetWithResponse(ctx context.Context, body PresetsServiceCreateCustomPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*PresetsServiceCreateCustomPresetResponse, error)

	// PresetsServiceReplaceCustomPresetWithBodyWithResponse request with any body
	PresetsServiceReplaceCustomPresetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PresetsServiceReplaceCustomPresetResponse, error)

	PresetsServiceReplaceCustomPresetWithResponse(ctx context.Context, body PresetsServiceReplaceCustomPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*PresetsServiceReplaceCustomPresetResponse, error)

	// PresetsServiceDeleteCustomPresetWithResponse request
	PresetsServiceDeleteCustomPresetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PresetsServiceDeleteCustomPresetResponse, error)

	// PresetsServiceSetCustomPresetAsDefaultWithResponse request
	PresetsServiceSetCustomPresetAsDefaultWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PresetsServiceSetCustomPresetAsDefaultResponse, error)

	// PresetsServiceGetPresetWithResponse request
	PresetsServiceGetPresetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PresetsServiceGetPresetResponse, error)

	// PresetsServiceSetPresetAsDefaultWithResponse request
	PresetsServiceSetPresetAsDefaultWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PresetsServiceSetPresetAsDefaultResponse, error)

	// PresetsServiceBatchGetPresetsWithResponse request
	PresetsServiceBatchGetPresetsWithResponse(ctx context.Context, params *PresetsServiceBatchGetPresetsParams, reqEditors ...RequestEditorFn) (*PresetsServiceBatchGetPresetsResponse, error)

	// PresetsServiceGetDefaultPresetSummaryWithResponse request
	PresetsServiceGetDefaultPresetSummaryWithResponse(ctx context.Context, params *PresetsServiceGetDefaultPresetSummaryParams, reqEditors ...RequestEditorFn) (*PresetsServiceGetDefaultPresetSummaryResponse, error)

	// PresetsServiceListPresetSummariesWithResponse request
	PresetsServiceListPresetSummariesWithResponse(ctx context.Context, params *PresetsServiceListPresetSummariesParams, reqEditors ...RequestEditorFn) (*PresetsServiceListPresetSummariesResponse, error)

	// PresetsServiceGetSystemDefaultPresetSummaryWithResponse request
	PresetsServiceGetSystemDefaultPresetSummaryWithResponse(ctx context.Context, params *PresetsServiceGetSystemDefaultPresetSummaryParams, reqEditors ...RequestEditorFn) (*PresetsServiceGetSystemDefaultPresetSummaryResponse, error)

	// GlobalRoutersServiceListGlobalRoutersWithResponse request
	GlobalRoutersServiceListGlobalRoutersWithResponse(ctx context.Context, params *GlobalRoutersServiceListGlobalRoutersParams, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceListGlobalRoutersResponse, error)

	// GlobalRoutersServiceCreateGlobalRouterWithBodyWithResponse request with any body
	GlobalRoutersServiceCreateGlobalRouterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceCreateGlobalRouterResponse, error)

	GlobalRoutersServiceCreateGlobalRouterWithResponse(ctx context.Context, body GlobalRoutersServiceCreateGlobalRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceCreateGlobalRouterResponse, error)

	// GlobalRoutersServiceReplaceGlobalRouterWithBodyWithResponse request with any body
	GlobalRoutersServiceReplaceGlobalRouterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceReplaceGlobalRouterResponse, error)

	GlobalRoutersServiceReplaceGlobalRouterWithResponse(ctx context.Context, body GlobalRoutersServiceReplaceGlobalRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceReplaceGlobalRouterResponse, error)

	// GlobalRoutersServiceDeleteGlobalRouterWithResponse request
	GlobalRoutersServiceDeleteGlobalRouterWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceDeleteGlobalRouterResponse, error)

	// GlobalRoutersServiceGetGlobalRouterWithResponse request
	GlobalRoutersServiceGetGlobalRouterWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceGetGlobalRouterResponse, error)

	// GlobalRoutersServiceBatchGetGlobalRoutersWithResponse request
	GlobalRoutersServiceBatchGetGlobalRoutersWithResponse(ctx context.Context, params *GlobalRoutersServiceBatchGetGlobalRoutersParams, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceBatchGetGlobalRoutersResponse, error)

	// OutgoingWebhooksServiceCreateOutgoingWebhookWithBodyWithResponse request with any body
	OutgoingWebhooksServiceCreateOutgoingWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceCreateOutgoingWebhookResponse, error)

	OutgoingWebhooksServiceCreateOutgoingWebhookWithResponse(ctx context.Context, body OutgoingWebhooksServiceCreateOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceCreateOutgoingWebhookResponse, error)

	// OutgoingWebhooksServiceUpdateOutgoingWebhookWithBodyWithResponse request with any body
	OutgoingWebhooksServiceUpdateOutgoingWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceUpdateOutgoingWebhookResponse, error)

	OutgoingWebhooksServiceUpdateOutgoingWebhookWithResponse(ctx context.Context, body OutgoingWebhooksServiceUpdateOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceUpdateOutgoingWebhookResponse, error)

	// OutgoingWebhooksServiceListOutgoingWebhookTypesWithResponse request
	OutgoingWebhooksServiceListOutgoingWebhookTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListOutgoingWebhookTypesResponse, error)

	// OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsWithResponse request
	OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsWithResponse(ctx context.Context, pType OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsParamsType, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse, error)

	// OutgoingWebhooksServiceListIbmEventNotificationsInstancesWithResponse request
	OutgoingWebhooksServiceListIbmEventNotificationsInstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse, error)

	// OutgoingWebhooksServiceTestOutgoingWebhookWithBodyWithResponse request with any body
	OutgoingWebhooksServiceTestOutgoingWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceTestOutgoingWebhookResponse, error)

	OutgoingWebhooksServiceTestOutgoingWebhookWithResponse(ctx context.Context, body OutgoingWebhooksServiceTestOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceTestOutgoingWebhookResponse, error)

	// OutgoingWebhooksServiceTestExistingOutgoingWebhookWithBodyWithResponse request with any body
	OutgoingWebhooksServiceTestExistingOutgoingWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse, error)

	OutgoingWebhooksServiceTestExistingOutgoingWebhookWithResponse(ctx context.Context, body OutgoingWebhooksServiceTestExistingOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse, error)

	// OutgoingWebhooksServiceDeleteOutgoingWebhookWithResponse request
	OutgoingWebhooksServiceDeleteOutgoingWebhookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceDeleteOutgoingWebhookResponse, error)

	// OutgoingWebhooksServiceGetOutgoingWebhookWithResponse request
	OutgoingWebhooksServiceGetOutgoingWebhookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceGetOutgoingWebhookResponse, error)

	// OutgoingWebhooksServiceListOutgoingWebhooksWithResponse request
	OutgoingWebhooksServiceListOutgoingWebhooksWithResponse(ctx context.Context, params *OutgoingWebhooksServiceListOutgoingWebhooksParams, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListOutgoingWebhooksResponse, error)

	// OutgoingWebhooksServiceListAllOutgoingWebhooksWithResponse request
	OutgoingWebhooksServiceListAllOutgoingWebhooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListAllOutgoingWebhooksResponse, error)

	// OutgoingWebhooksServiceListOutboundWebhooksSummaryWithResponse request
	OutgoingWebhooksServiceListOutboundWebhooksSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListOutboundWebhooksSummaryResponse, error)

	// PoliciesServiceGetCompanyPoliciesWithResponse request
	PoliciesServiceGetCompanyPoliciesWithResponse(ctx context.Context, params *PoliciesServiceGetCompanyPoliciesParams, reqEditors ...RequestEditorFn) (*PoliciesServiceGetCompanyPoliciesResponse, error)

	// PoliciesServiceCreatePolicyWithBodyWithResponse request with any body
	PoliciesServiceCreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceCreatePolicyResponse, error)

	PoliciesServiceCreatePolicyWithResponse(ctx context.Context, body PoliciesServiceCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceCreatePolicyResponse, error)

	// PoliciesServiceUpdatePolicyWithBodyWithResponse request with any body
	PoliciesServiceUpdatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceUpdatePolicyResponse, error)

	PoliciesServiceUpdatePolicyWithResponse(ctx context.Context, body PoliciesServiceUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceUpdatePolicyResponse, error)

	// PoliciesServiceDeletePolicyWithResponse request
	PoliciesServiceDeletePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PoliciesServiceDeletePolicyResponse, error)

	// PoliciesServiceGetPolicyWithResponse request
	PoliciesServiceGetPolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PoliciesServiceGetPolicyResponse, error)

	// PoliciesServiceAtomicOverwriteLogPoliciesWithBodyWithResponse request with any body
	PoliciesServiceAtomicOverwriteLogPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicOverwriteLogPoliciesResponse, error)

	PoliciesServiceAtomicOverwriteLogPoliciesWithResponse(ctx context.Context, body PoliciesServiceAtomicOverwriteLogPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicOverwriteLogPoliciesResponse, error)

	// PoliciesServiceAtomicOverwriteSpanPoliciesWithBodyWithResponse request with any body
	PoliciesServiceAtomicOverwriteSpanPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicOverwriteSpanPoliciesResponse, error)

	PoliciesServiceAtomicOverwriteSpanPoliciesWithResponse(ctx context.Context, body PoliciesServiceAtomicOverwriteSpanPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicOverwriteSpanPoliciesResponse, error)

	// PoliciesServiceAtomicBatchCreatePolicyWithBodyWithResponse request with any body
	PoliciesServiceAtomicBatchCreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicBatchCreatePolicyResponse, error)

	PoliciesServiceAtomicBatchCreatePolicyWithResponse(ctx context.Context, body PoliciesServiceAtomicBatchCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicBatchCreatePolicyResponse, error)

	// PoliciesServiceBulkTestLogPoliciesWithBodyWithResponse request with any body
	PoliciesServiceBulkTestLogPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceBulkTestLogPoliciesResponse, error)

	PoliciesServiceBulkTestLogPoliciesWithResponse(ctx context.Context, body PoliciesServiceBulkTestLogPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceBulkTestLogPoliciesResponse, error)

	// PoliciesServiceReorderPoliciesWithBodyWithResponse request with any body
	PoliciesServiceReorderPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceReorderPoliciesResponse, error)

	PoliciesServiceReorderPoliciesWithResponse(ctx context.Context, body PoliciesServiceReorderPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceReorderPoliciesResponse, error)

	// PoliciesServiceTogglePolicyWithBodyWithResponse request with any body
	PoliciesServiceTogglePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceTogglePolicyResponse, error)

	PoliciesServiceTogglePolicyWithResponse(ctx context.Context, body PoliciesServiceTogglePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceTogglePolicyResponse, error)

	// RetentionsServiceGetRetentionsWithResponse request
	RetentionsServiceGetRetentionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetentionsServiceGetRetentionsResponse, error)

	// RetentionsServiceUpdateRetentionsWithBodyWithResponse request with any body
	RetentionsServiceUpdateRetentionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetentionsServiceUpdateRetentionsResponse, error)

	RetentionsServiceUpdateRetentionsWithResponse(ctx context.Context, body RetentionsServiceUpdateRetentionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RetentionsServiceUpdateRetentionsResponse, error)

	// RetentionsServiceGetRetentionsEnabledWithResponse request
	RetentionsServiceGetRetentionsEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetentionsServiceGetRetentionsEnabledResponse, error)

	// RetentionsServiceActivateRetentionsWithBodyWithResponse request with any body
	RetentionsServiceActivateRetentionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetentionsServiceActivateRetentionsResponse, error)

	RetentionsServiceActivateRetentionsWithResponse(ctx context.Context, body RetentionsServiceActivateRetentionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RetentionsServiceActivateRetentionsResponse, error)

	// RuleGroupSetsListWithResponse request
	RuleGroupSetsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuleGroupSetsListResponse, error)

	// RuleGroupSetsCreateWithBodyWithResponse request with any body
	RuleGroupSetsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupSetsCreateResponse, error)

	RuleGroupSetsCreateWithResponse(ctx context.Context, body RuleGroupSetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupSetsCreateResponse, error)

	// RuleGroupSetsDeleteWithResponse request
	RuleGroupSetsDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RuleGroupSetsDeleteResponse, error)

	// RuleGroupSetsFetchWithResponse request
	RuleGroupSetsFetchWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RuleGroupSetsFetchResponse, error)

	// RuleGroupSetsUpdateWithBodyWithResponse request with any body
	RuleGroupSetsUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupSetsUpdateResponse, error)

	RuleGroupSetsUpdateWithResponse(ctx context.Context, id string, body RuleGroupSetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupSetsUpdateResponse, error)

	// ScopesServiceGetTeamScopesByIdsWithResponse request
	ScopesServiceGetTeamScopesByIdsWithResponse(ctx context.Context, params *ScopesServiceGetTeamScopesByIdsParams, reqEditors ...RequestEditorFn) (*ScopesServiceGetTeamScopesByIdsResponse, error)

	// ScopesServiceCreateScopeWithBodyWithResponse request with any body
	ScopesServiceCreateScopeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScopesServiceCreateScopeResponse, error)

	ScopesServiceCreateScopeWithResponse(ctx context.Context, body ScopesServiceCreateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*ScopesServiceCreateScopeResponse, error)

	// ScopesServiceUpdateScopeWithBodyWithResponse request with any body
	ScopesServiceUpdateScopeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScopesServiceUpdateScopeResponse, error)

	ScopesServiceUpdateScopeWithResponse(ctx context.Context, body ScopesServiceUpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*ScopesServiceUpdateScopeResponse, error)

	// ScopesServiceGetTeamScopesWithResponse request
	ScopesServiceGetTeamScopesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScopesServiceGetTeamScopesResponse, error)

	// ScopesServiceDeleteScopeWithResponse request
	ScopesServiceDeleteScopeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ScopesServiceDeleteScopeResponse, error)

	// SlosServiceListSlosWithResponse request
	SlosServiceListSlosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlosServiceListSlosResponse, error)

	// SlosServiceCreateSloWithBodyWithResponse request with any body
	SlosServiceCreateSloWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlosServiceCreateSloResponse, error)

	SlosServiceCreateSloWithResponse(ctx context.Context, body SlosServiceCreateSloJSONRequestBody, reqEditors ...RequestEditorFn) (*SlosServiceCreateSloResponse, error)

	// SlosServiceReplaceSloWithBodyWithResponse request with any body
	SlosServiceReplaceSloWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlosServiceReplaceSloResponse, error)

	SlosServiceReplaceSloWithResponse(ctx context.Context, body SlosServiceReplaceSloJSONRequestBody, reqEditors ...RequestEditorFn) (*SlosServiceReplaceSloResponse, error)

	// SlosServiceDeleteSloWithResponse request
	SlosServiceDeleteSloWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlosServiceDeleteSloResponse, error)

	// SlosServiceGetSloWithResponse request
	SlosServiceGetSloWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlosServiceGetSloResponse, error)

	// SlosServiceBatchExecuteSloWithResponse request
	SlosServiceBatchExecuteSloWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlosServiceBatchExecuteSloResponse, error)

	// SlosServiceBatchGetSlosWithResponse request
	SlosServiceBatchGetSlosWithResponse(ctx context.Context, params *SlosServiceBatchGetSlosParams, reqEditors ...RequestEditorFn) (*SlosServiceBatchGetSlosResponse, error)

	// SamlConfigurationServiceSetActiveWithBodyWithResponse request with any body
	SamlConfigurationServiceSetActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceSetActiveResponse, error)

	SamlConfigurationServiceSetActiveWithResponse(ctx context.Context, body SamlConfigurationServiceSetActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceSetActiveResponse, error)

	// SamlConfigurationServiceGetConfigurationWithResponse request
	SamlConfigurationServiceGetConfigurationWithResponse(ctx context.Context, params *SamlConfigurationServiceGetConfigurationParams, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceGetConfigurationResponse, error)

	// SamlConfigurationServiceSetIDPParametersWithBodyWithResponse request with any body
	SamlConfigurationServiceSetIDPParametersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceSetIDPParametersResponse, error)

	SamlConfigurationServiceSetIDPParametersWithResponse(ctx context.Context, body SamlConfigurationServiceSetIDPParametersJSONRequestBody, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceSetIDPParametersResponse, error)

	// SamlConfigurationServiceGetSPParametersWithResponse request
	SamlConfigurationServiceGetSPParametersWithResponse(ctx context.Context, params *SamlConfigurationServiceGetSPParametersParams, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceGetSPParametersResponse, error)

	// TeamPermissionsMgmtServiceGetTeamGroupByNameWithResponse request
	TeamPermissionsMgmtServiceGetTeamGroupByNameWithResponse(ctx context.Context, params *TeamPermissionsMgmtServiceGetTeamGroupByNameParams, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetTeamGroupByNameResponse, error)

	// TeamPermissionsMgmtServiceCreateTeamGroupWithBodyWithResponse request with any body
	TeamPermissionsMgmtServiceCreateTeamGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceCreateTeamGroupResponse, error)

	TeamPermissionsMgmtServiceCreateTeamGroupWithResponse(ctx context.Context, body TeamPermissionsMgmtServiceCreateTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceCreateTeamGroupResponse, error)

	// TeamPermissionsMgmtServiceUpdateTeamGroupWithBodyWithResponse request with any body
	TeamPermissionsMgmtServiceUpdateTeamGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceUpdateTeamGroupResponse, error)

	TeamPermissionsMgmtServiceUpdateTeamGroupWithResponse(ctx context.Context, body TeamPermissionsMgmtServiceUpdateTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceUpdateTeamGroupResponse, error)

	// TeamPermissionsMgmtServiceGetTeamGroupsWithResponse request
	TeamPermissionsMgmtServiceGetTeamGroupsWithResponse(ctx context.Context, params *TeamPermissionsMgmtServiceGetTeamGroupsParams, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetTeamGroupsResponse, error)

	// TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsWithResponse request
	TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsWithResponse(ctx context.Context, params *TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsParams, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse, error)

	// TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithBodyWithResponse request with any body
	TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse, error)

	TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithResponse(ctx context.Context, body TeamPermissionsMgmtServiceAddUsersToTeamGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse, error)

	// TeamPermissionsMgmtServiceDeleteTeamGroupWithResponse request
	TeamPermissionsMgmtServiceDeleteTeamGroupWithResponse(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceDeleteTeamGroupResponse, error)

	// TeamPermissionsMgmtServiceGetTeamGroupWithResponse request
	TeamPermissionsMgmtServiceGetTeamGroupWithResponse(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetTeamGroupResponse, error)

	// TeamPermissionsMgmtServiceGetTeamGroupScopeWithResponse request
	TeamPermissionsMgmtServiceGetTeamGroupScopeWithResponse(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetTeamGroupScopeResponse, error)

	// TeamPermissionsMgmtServiceSetTeamGroupScopeWithBodyWithResponse request with any body
	TeamPermissionsMgmtServiceSetTeamGroupScopeWithBodyWithResponse(ctx context.Context, groupIdId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceSetTeamGroupScopeResponse, error)

	TeamPermissionsMgmtServiceSetTeamGroupScopeWithResponse(ctx context.Context, groupIdId int64, body TeamPermissionsMgmtServiceSetTeamGroupScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceSetTeamGroupScopeResponse, error)

	// TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupWithResponse request
	TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupWithResponse(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse, error)

	// TeamPermissionsMgmtServiceGetGroupUsersWithResponse request
	TeamPermissionsMgmtServiceGetGroupUsersWithResponse(ctx context.Context, groupIdId int64, params *TeamPermissionsMgmtServiceGetGroupUsersParams, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetGroupUsersResponse, error)

	// TeamPermissionsMgmtServiceAddUsersToTeamGroupWithBodyWithResponse request with any body
	TeamPermissionsMgmtServiceAddUsersToTeamGroupWithBodyWithResponse(ctx context.Context, groupIdId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse, error)

	TeamPermissionsMgmtServiceAddUsersToTeamGroupWithResponse(ctx context.Context, groupIdId int64, body TeamPermissionsMgmtServiceAddUsersToTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse, error)

	// ViewsFoldersServiceListViewFoldersWithResponse request
	ViewsFoldersServiceListViewFoldersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceListViewFoldersResponse, error)

	// ViewsFoldersServiceCreateViewFolderWithBodyWithResponse request with any body
	ViewsFoldersServiceCreateViewFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceCreateViewFolderResponse, error)

	ViewsFoldersServiceCreateViewFolderWithResponse(ctx context.Context, body ViewsFoldersServiceCreateViewFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceCreateViewFolderResponse, error)

	// ViewsFoldersServiceReplaceViewFolderWithBodyWithResponse request with any body
	ViewsFoldersServiceReplaceViewFolderWithBodyWithResponse(ctx context.Context, folderId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceReplaceViewFolderResponse, error)

	ViewsFoldersServiceReplaceViewFolderWithResponse(ctx context.Context, folderId openapi_types.UUID, body ViewsFoldersServiceReplaceViewFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceReplaceViewFolderResponse, error)

	// ViewsFoldersServiceDeleteViewFolderWithResponse request
	ViewsFoldersServiceDeleteViewFolderWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceDeleteViewFolderResponse, error)

	// ViewsFoldersServiceGetViewFolderWithResponse request
	ViewsFoldersServiceGetViewFolderWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceGetViewFolderResponse, error)

	// ViewsServiceListViewsWithResponse request
	ViewsServiceListViewsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ViewsServiceListViewsResponse, error)

	// ViewsServiceCreateViewWithBodyWithResponse request with any body
	ViewsServiceCreateViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ViewsServiceCreateViewResponse, error)

	ViewsServiceCreateViewWithResponse(ctx context.Context, body ViewsServiceCreateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*ViewsServiceCreateViewResponse, error)

	// ViewsServiceDeleteViewWithResponse request
	ViewsServiceDeleteViewWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ViewsServiceDeleteViewResponse, error)

	// ViewsServiceGetViewWithResponse request
	ViewsServiceGetViewWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ViewsServiceGetViewResponse, error)

	// ViewsServiceReplaceViewWithBodyWithResponse request with any body
	ViewsServiceReplaceViewWithBodyWithResponse(ctx context.Context, viewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ViewsServiceReplaceViewResponse, error)

	ViewsServiceReplaceViewWithResponse(ctx context.Context, viewId int32, body ViewsServiceReplaceViewJSONRequestBody, reqEditors ...RequestEditorFn) (*ViewsServiceReplaceViewResponse, error)

	// ActionsServiceListActionsWithResponse request
	ActionsServiceListActionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ActionsServiceListActionsResponse, error)

	// ActionsServiceCreateActionWithBodyWithResponse request with any body
	ActionsServiceCreateActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsServiceCreateActionResponse, error)

	ActionsServiceCreateActionWithResponse(ctx context.Context, body ActionsServiceCreateActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsServiceCreateActionResponse, error)

	// ActionsServiceReplaceActionWithBodyWithResponse request with any body
	ActionsServiceReplaceActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsServiceReplaceActionResponse, error)

	ActionsServiceReplaceActionWithResponse(ctx context.Context, body ActionsServiceReplaceActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsServiceReplaceActionResponse, error)

	// ActionsServiceAtomicBatchExecuteActionsWithBodyWithResponse request with any body
	ActionsServiceAtomicBatchExecuteActionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsServiceAtomicBatchExecuteActionsResponse, error)

	ActionsServiceAtomicBatchExecuteActionsWithResponse(ctx context.Context, body ActionsServiceAtomicBatchExecuteActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsServiceAtomicBatchExecuteActionsResponse, error)

	// ActionsServiceOrderActionsWithBodyWithResponse request with any body
	ActionsServiceOrderActionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsServiceOrderActionsResponse, error)

	ActionsServiceOrderActionsWithResponse(ctx context.Context, body ActionsServiceOrderActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsServiceOrderActionsResponse, error)

	// ActionsServiceDeleteActionWithResponse request
	ActionsServiceDeleteActionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsServiceDeleteActionResponse, error)

	// ActionsServiceGetActionWithResponse request
	ActionsServiceGetActionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsServiceGetActionResponse, error)

	// DataUsageServiceGetDataUsageWithResponse request
	DataUsageServiceGetDataUsageWithResponse(ctx context.Context, params *DataUsageServiceGetDataUsageParams, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDataUsageResponse, error)

	// DataUsageServiceGetDailyUsageEvaluationTokensWithBodyWithResponse request with any body
	DataUsageServiceGetDailyUsageEvaluationTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageEvaluationTokensResponse, error)

	DataUsageServiceGetDailyUsageEvaluationTokensWithResponse(ctx context.Context, body DataUsageServiceGetDailyUsageEvaluationTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageEvaluationTokensResponse, error)

	// DataUsageServiceGetDailyUsageProcessedGbsWithBodyWithResponse request with any body
	DataUsageServiceGetDailyUsageProcessedGbsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageProcessedGbsResponse, error)

	DataUsageServiceGetDailyUsageProcessedGbsWithResponse(ctx context.Context, body DataUsageServiceGetDailyUsageProcessedGbsJSONRequestBody, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageProcessedGbsResponse, error)

	// DataUsageServiceGetDailyUsageUnitsWithBodyWithResponse request with any body
	DataUsageServiceGetDailyUsageUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageUnitsResponse, error)

	DataUsageServiceGetDailyUsageUnitsWithResponse(ctx context.Context, body DataUsageServiceGetDailyUsageUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageUnitsResponse, error)

	// DataUsageServiceGetDataUsageMetricsExportStatusWithResponse request
	DataUsageServiceGetDataUsageMetricsExportStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDataUsageMetricsExportStatusResponse, error)

	// DataUsageServiceUpdateDataUsageMetricsExportStatusWithBodyWithResponse request with any body
	DataUsageServiceUpdateDataUsageMetricsExportStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DataUsageServiceUpdateDataUsageMetricsExportStatusResponse, error)

	DataUsageServiceUpdateDataUsageMetricsExportStatusWithResponse(ctx context.Context, body DataUsageServiceUpdateDataUsageMetricsExportStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*DataUsageServiceUpdateDataUsageMetricsExportStatusResponse, error)

	// DataUsageServiceGetLogsCountWithResponse request
	DataUsageServiceGetLogsCountWithResponse(ctx context.Context, params *DataUsageServiceGetLogsCountParams, reqEditors ...RequestEditorFn) (*DataUsageServiceGetLogsCountResponse, error)

	// DataUsageServiceGetSpansCountWithResponse request
	DataUsageServiceGetSpansCountWithResponse(ctx context.Context, params *DataUsageServiceGetSpansCountParams, reqEditors ...RequestEditorFn) (*DataUsageServiceGetSpansCountResponse, error)

	// TargetServiceGetTargetWithResponse request
	TargetServiceGetTargetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TargetServiceGetTargetResponse, error)

	// TargetServiceSetTargetWithBodyWithResponse request with any body
	TargetServiceSetTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TargetServiceSetTargetResponse, error)

	TargetServiceSetTargetWithResponse(ctx context.Context, body TargetServiceSetTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*TargetServiceSetTargetResponse, error)

	// TargetServiceValidateTargetWithBodyWithResponse request with any body
	TargetServiceValidateTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TargetServiceValidateTargetResponse, error)

	TargetServiceValidateTargetWithResponse(ctx context.Context, body TargetServiceValidateTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*TargetServiceValidateTargetResponse, error)

	// AlertDefsServiceListAlertDefsWithResponse request
	AlertDefsServiceListAlertDefsWithResponse(ctx context.Context, params *AlertDefsServiceListAlertDefsParams, reqEditors ...RequestEditorFn) (*AlertDefsServiceListAlertDefsResponse, error)

	// AlertDefsServiceCreateAlertDefWithBodyWithResponse request with any body
	AlertDefsServiceCreateAlertDefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertDefsServiceCreateAlertDefResponse, error)

	AlertDefsServiceCreateAlertDefWithResponse(ctx context.Context, body AlertDefsServiceCreateAlertDefJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertDefsServiceCreateAlertDefResponse, error)

	// AlertDefsServiceReplaceAlertDefWithBodyWithResponse request with any body
	AlertDefsServiceReplaceAlertDefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertDefsServiceReplaceAlertDefResponse, error)

	AlertDefsServiceReplaceAlertDefWithResponse(ctx context.Context, body AlertDefsServiceReplaceAlertDefJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertDefsServiceReplaceAlertDefResponse, error)

	// AlertDefsServiceGetAlertDefByVersionIdWithResponse request
	AlertDefsServiceGetAlertDefByVersionIdWithResponse(ctx context.Context, alertVersionId string, reqEditors ...RequestEditorFn) (*AlertDefsServiceGetAlertDefByVersionIdResponse, error)

	// AlertDefsServiceDeleteAlertDefWithResponse request
	AlertDefsServiceDeleteAlertDefWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AlertDefsServiceDeleteAlertDefResponse, error)

	// AlertDefsServiceGetAlertDefWithResponse request
	AlertDefsServiceGetAlertDefWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AlertDefsServiceGetAlertDefResponse, error)

	// AlertDefsServiceSetActiveWithResponse request
	AlertDefsServiceSetActiveWithResponse(ctx context.Context, id string, params *AlertDefsServiceSetActiveParams, reqEditors ...RequestEditorFn) (*AlertDefsServiceSetActiveResponse, error)

	// AlertEventServiceGetAlertEventsStatsWithResponse request
	AlertEventServiceGetAlertEventsStatsWithResponse(ctx context.Context, params *AlertEventServiceGetAlertEventsStatsParams, reqEditors ...RequestEditorFn) (*AlertEventServiceGetAlertEventsStatsResponse, error)

	// AlertEventServiceGetAlertEventWithResponse request
	AlertEventServiceGetAlertEventWithResponse(ctx context.Context, id string, params *AlertEventServiceGetAlertEventParams, reqEditors ...RequestEditorFn) (*AlertEventServiceGetAlertEventResponse, error)

	// AlertDefsServiceDownloadAlertsWithResponse request
	AlertDefsServiceDownloadAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertDefsServiceDownloadAlertsResponse, error)

	// ApiKeysServiceCreateApiKeyWithBodyWithResponse request with any body
	ApiKeysServiceCreateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiKeysServiceCreateApiKeyResponse, error)

	ApiKeysServiceCreateApiKeyWithResponse(ctx context.Context, body ApiKeysServiceCreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiKeysServiceCreateApiKeyResponse, error)

	// ApiKeysServiceGetSendDataApiKeysWithResponse request
	ApiKeysServiceGetSendDataApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiKeysServiceGetSendDataApiKeysResponse, error)

	// ApiKeysServiceDeleteApiKeyWithResponse request
	ApiKeysServiceDeleteApiKeyWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*ApiKeysServiceDeleteApiKeyResponse, error)

	// ApiKeysServiceGetApiKeyWithResponse request
	ApiKeysServiceGetApiKeyWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*ApiKeysServiceGetApiKeyResponse, error)

	// ApiKeysServiceUpdateApiKeyWithBodyWithResponse request with any body
	ApiKeysServiceUpdateApiKeyWithBodyWithResponse(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiKeysServiceUpdateApiKeyResponse, error)

	ApiKeysServiceUpdateApiKeyWithResponse(ctx context.Context, keyId string, body ApiKeysServiceUpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiKeysServiceUpdateApiKeyResponse, error)

	// EventsServiceListEventsWithResponse request
	EventsServiceListEventsWithResponse(ctx context.Context, params *EventsServiceListEventsParams, reqEditors ...RequestEditorFn) (*EventsServiceListEventsResponse, error)

	// EventsServiceBatchGetEventWithResponse request
	EventsServiceBatchGetEventWithResponse(ctx context.Context, params *EventsServiceBatchGetEventParams, reqEditors ...RequestEditorFn) (*EventsServiceBatchGetEventResponse, error)

	// EventsServiceGetEventWithResponse request
	EventsServiceGetEventWithResponse(ctx context.Context, id string, params *EventsServiceGetEventParams, reqEditors ...RequestEditorFn) (*EventsServiceGetEventResponse, error)

	// EventsServiceListEventsCountWithResponse request
	EventsServiceListEventsCountWithResponse(ctx context.Context, params *EventsServiceListEventsCountParams, reqEditors ...RequestEditorFn) (*EventsServiceListEventsCountResponse, error)

	// EventsServiceGetEventsStatisticsWithResponse request
	EventsServiceGetEventsStatisticsWithResponse(ctx context.Context, params *EventsServiceGetEventsStatisticsParams, reqEditors ...RequestEditorFn) (*EventsServiceGetEventsStatisticsResponse, error)
}

type RuleGroupsServiceGetRuleGroupModelMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetRuleGroupModelMappingResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupsServiceGetRuleGroupModelMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupsServiceGetRuleGroupModelMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupsServiceBulkDeleteRuleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BulkDeleteRuleGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupsServiceBulkDeleteRuleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupsServiceBulkDeleteRuleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupsServiceListRuleGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListRuleGroupsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupsServiceListRuleGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupsServiceListRuleGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupsServiceCreateRuleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateRuleGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupsServiceCreateRuleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupsServiceCreateRuleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupsServiceGetCompanyUsageLimitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetCompanyUsageLimitsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupsServiceGetCompanyUsageLimitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupsServiceGetCompanyUsageLimitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupsServiceDeleteRuleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteRuleGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupsServiceDeleteRuleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupsServiceDeleteRuleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupsServiceGetRuleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetRuleGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupsServiceGetRuleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupsServiceGetRuleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupsServiceUpdateRuleGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateRuleGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupsServiceUpdateRuleGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupsServiceUpdateRuleGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Events2MetricServiceListE2MResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2ListE2MResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r Events2MetricServiceListE2MResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Events2MetricServiceListE2MResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Events2MetricServiceCreateE2MResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2CreateE2MResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r Events2MetricServiceCreateE2MResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Events2MetricServiceCreateE2MResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Events2MetricServiceReplaceE2MResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2ReplaceE2MResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r Events2MetricServiceReplaceE2MResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Events2MetricServiceReplaceE2MResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Events2MetricServiceAtomicBatchExecuteE2MResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2AtomicBatchExecuteE2MResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r Events2MetricServiceAtomicBatchExecuteE2MResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Events2MetricServiceAtomicBatchExecuteE2MResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Events2MetricServiceListLabelsCardinalityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2ListLabelsCardinalityResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r Events2MetricServiceListLabelsCardinalityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Events2MetricServiceListLabelsCardinalityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Events2MetricServiceGetLimitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetLimitsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r Events2MetricServiceGetLimitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Events2MetricServiceGetLimitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Events2MetricServiceDeleteE2MResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2DeleteE2MResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r Events2MetricServiceDeleteE2MResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Events2MetricServiceDeleteE2MResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Events2MetricServiceGetE2MResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetE2MResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r Events2MetricServiceGetE2MResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Events2MetricServiceGetE2MResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnrichmentServiceRemoveEnrichmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1RemoveEnrichmentsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EnrichmentServiceRemoveEnrichmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnrichmentServiceRemoveEnrichmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnrichmentServiceGetEnrichmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetEnrichmentsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EnrichmentServiceGetEnrichmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnrichmentServiceGetEnrichmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnrichmentServiceAddEnrichmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AddEnrichmentsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EnrichmentServiceAddEnrichmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnrichmentServiceAddEnrichmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnrichmentServiceGetEnrichmentLimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetEnrichmentLimitResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EnrichmentServiceGetEnrichmentLimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnrichmentServiceGetEnrichmentLimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnrichmentServiceGetCompanyEnrichmentSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetCompanyEnrichmentSettingsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EnrichmentServiceGetCompanyEnrichmentSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnrichmentServiceGetCompanyEnrichmentSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnrichmentServiceAtomicOverwriteEnrichmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AtomicOverwriteEnrichmentsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EnrichmentServiceAtomicOverwriteEnrichmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnrichmentServiceAtomicOverwriteEnrichmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsTcoServiceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetricsTcoGetResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsTcoServiceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsTcoServiceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsTcoServiceAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsTcoServiceAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsTcoServiceAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsTcoServiceDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsTcoServiceDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsTcoServiceDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateAlertSchedulerRuleResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateAlertSchedulerRuleResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetBulkAlertSchedulerRuleResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateBulkAlertSchedulerRuleResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateBulkAlertSchedulerRuleResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteAlertSchedulerRuleResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertSchedulerRuleServiceGetAlertSchedulerRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetAlertSchedulerRuleResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertSchedulerRuleServiceGetAlertSchedulerRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertSchedulerRuleServiceGetAlertSchedulerRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1SaveContextualDataIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateContextualDataIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextualDataIntegrationServiceTestContextualDataIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestContextualDataIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ContextualDataIntegrationServiceTestContextualDataIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextualDataIntegrationServiceTestContextualDataIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteContextualDataIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextualDataIntegrationServiceGetContextualDataIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetContextualDataIntegrationsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ContextualDataIntegrationServiceGetContextualDataIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextualDataIntegrationServiceGetContextualDataIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetContextualDataIntegrationDefinitionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetContextualDataIntegrationDetailsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomEnrichmentServiceGetCustomEnrichmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetCustomEnrichmentsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r CustomEnrichmentServiceGetCustomEnrichmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomEnrichmentServiceGetCustomEnrichmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomEnrichmentServiceCreateCustomEnrichmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateCustomEnrichmentResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r CustomEnrichmentServiceCreateCustomEnrichmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomEnrichmentServiceCreateCustomEnrichmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomEnrichmentServiceUpdateCustomEnrichmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateCustomEnrichmentResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r CustomEnrichmentServiceUpdateCustomEnrichmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomEnrichmentServiceUpdateCustomEnrichmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomEnrichmentServiceSearchCustomEnrichmentDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1SearchCustomEnrichmentDataResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r CustomEnrichmentServiceSearchCustomEnrichmentDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomEnrichmentServiceSearchCustomEnrichmentDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomEnrichmentServiceDeleteCustomEnrichmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteCustomEnrichmentResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r CustomEnrichmentServiceDeleteCustomEnrichmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomEnrichmentServiceDeleteCustomEnrichmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomEnrichmentServiceGetCustomEnrichmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetCustomEnrichmentResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r CustomEnrichmentServiceGetCustomEnrichmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomEnrichmentServiceGetCustomEnrichmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServiceGetDashboardBySlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesGetDashboardBySlugResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServiceGetDashboardBySlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServiceGetDashboardBySlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardCatalogServiceGetDashboardCatalogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesGetDashboardCatalogResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardCatalogServiceGetDashboardCatalogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardCatalogServiceGetDashboardCatalogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServiceCreateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesCreateDashboardResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServiceCreateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServiceCreateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServiceReplaceDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesReplaceDashboardResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServiceReplaceDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServiceReplaceDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServiceDeleteDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesDeleteDashboardResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServiceDeleteDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServiceDeleteDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServiceGetDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesGetDashboardResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServiceGetDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServiceGetDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServiceReplaceDefaultDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesReplaceDefaultDashboardResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServiceReplaceDefaultDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServiceReplaceDefaultDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServiceAssignDashboardFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesAssignDashboardFolderResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServiceAssignDashboardFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServiceAssignDashboardFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServicePinDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesPinDashboardResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServicePinDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServicePinDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardsServiceUnpinDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesUnpinDashboardResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardsServiceUnpinDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardsServiceUnpinDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardFoldersServiceListDashboardFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesListDashboardFoldersResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardFoldersServiceListDashboardFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardFoldersServiceListDashboardFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardFoldersServiceCreateDashboardFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesCreateDashboardFolderResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardFoldersServiceCreateDashboardFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardFoldersServiceCreateDashboardFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardFoldersServiceReplaceDashboardFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesReplaceDashboardFolderResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardFoldersServiceReplaceDashboardFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardFoldersServiceReplaceDashboardFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardFoldersServiceDeleteDashboardFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesDeleteDashboardFolderResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardFoldersServiceDeleteDashboardFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardFoldersServiceDeleteDashboardFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DashboardFoldersServiceGetDashboardFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesGetDashboardFolderResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DashboardFoldersServiceGetDashboardFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DashboardFoldersServiceGetDashboardFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionDeploymentServiceDeployExtensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeployExtensionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionDeploymentServiceDeployExtensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionDeploymentServiceDeployExtensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionDeploymentServiceGetDeployedExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetDeployedExtensionsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionDeploymentServiceGetDeployedExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionDeploymentServiceGetDeployedExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionDeploymentServiceUndeployExtensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UndeployExtensionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionDeploymentServiceUndeployExtensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionDeploymentServiceUndeployExtensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionDeploymentServiceUpdateExtensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateExtensionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionDeploymentServiceUpdateExtensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionDeploymentServiceUpdateExtensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionTestingServiceCleanupTestingRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CleanupTestingRevisionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionTestingServiceCleanupTestingRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionTestingServiceCleanupTestingRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionTestingServiceInitializeTestingRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1InitializeTestingRevisionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionTestingServiceInitializeTestingRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionTestingServiceInitializeTestingRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionTestingServiceTestExtensionRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestExtensionRevisionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionTestingServiceTestExtensionRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionTestingServiceTestExtensionRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionServiceGetAllExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetAllExtensionsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionServiceGetAllExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionServiceGetAllExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtensionServiceGetExtensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Extensionsv1Extension
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ExtensionServiceGetExtensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtensionServiceGetExtensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListIncidentsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceGetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetIncidentResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceGetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceGetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceGetIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetIncidentEventsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceGetIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceGetIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceAcknowledgeIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AcknowledgeIncidentsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceAcknowledgeIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceAcknowledgeIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceAssignIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AssignIncidentsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceAssignIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceAssignIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceBatchGetIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BatchGetIncidentResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceBatchGetIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceBatchGetIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceCloseIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CloseIncidentsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceCloseIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceCloseIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceGetFilterValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetFilterValuesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceGetFilterValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceGetFilterValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceListIncidentEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListIncidentEventsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceListIncidentEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceListIncidentEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceListIncidentEventsFilterValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListIncidentEventsFilterValuesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceListIncidentEventsFilterValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceListIncidentEventsFilterValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceListIncidentEventsTotalCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListIncidentEventsTotalCountResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceListIncidentEventsTotalCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceListIncidentEventsTotalCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceListIncidentAggregationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListIncidentAggregationsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceListIncidentAggregationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceListIncidentAggregationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceResolveIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ResolveIncidentsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceResolveIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceResolveIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsServiceUnassignIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UnassignIncidentsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IncidentsServiceUnassignIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsServiceUnassignIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceGetIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetIntegrationsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceGetIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceGetIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceGetIntegrationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetIntegrationDefinitionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceGetIntegrationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceGetIntegrationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceGetDeployedIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetDeployedIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceGetDeployedIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceGetDeployedIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceDeleteIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceDeleteIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceDeleteIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceListManagedIntegrationKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListManagedIntegrationKeysResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceListManagedIntegrationKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceListManagedIntegrationKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceGetManagedIntegrationStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetManagedIntegrationStatusResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceGetManagedIntegrationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceGetManagedIntegrationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceSaveIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1SaveIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceSaveIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceSaveIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceUpdateIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceUpdateIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceUpdateIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceTestIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestIntegrationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceTestIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceTestIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceGetRumApplicationVersionDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetRumApplicationVersionDataResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceGetRumApplicationVersionDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceGetRumApplicationVersionDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceSyncRumDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1SyncRumDataResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceSyncRumDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceSyncRumDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceGetTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetTemplateResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceGetTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceGetTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationServiceGetIntegrationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetIntegrationDetailsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r IntegrationServiceGetIntegrationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationServiceGetIntegrationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsConfiguratorPublicServiceGetTenantConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetricsConfiguratorGetTenantConfigResponseV2
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsConfiguratorPublicServiceGetTenantConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsConfiguratorPublicServiceGetTenantConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsConfiguratorPublicServiceConfigureTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsConfiguratorPublicServiceConfigureTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsConfiguratorPublicServiceConfigureTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsConfiguratorPublicServiceUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsConfiguratorPublicServiceUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsConfiguratorPublicServiceUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsConfiguratorPublicServiceDisableArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsConfiguratorPublicServiceDisableArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsConfiguratorPublicServiceDisableArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsConfiguratorPublicServiceEnableArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsConfiguratorPublicServiceEnableArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsConfiguratorPublicServiceEnableArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsConfiguratorPublicServiceValidateBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r MetricsConfiguratorPublicServiceValidateBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsConfiguratorPublicServiceValidateBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceReplaceConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ReplaceConnectorResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceReplaceConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceReplaceConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceListConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListConnectorsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceListConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceListConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceCreateConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateConnectorResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceCreateConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceCreateConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceDeleteConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteConnectorResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceDeleteConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceDeleteConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceGetConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetConnectorResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceGetConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceGetConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceBatchGetConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BatchGetConnectorsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceBatchGetConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceBatchGetConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceBatchGetConnectorSummariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BatchGetConnectorSummariesResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceBatchGetConnectorSummariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceBatchGetConnectorSummariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceGetConnectorTypeSummariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetConnectorTypeSummariesResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceGetConnectorTypeSummariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceGetConnectorTypeSummariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectorsServiceListConnectorSummariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListConnectorSummariesResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ConnectorsServiceListConnectorSummariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectorsServiceListConnectorSummariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EntitiesServiceListEntityTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListEntityTypesResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EntitiesServiceListEntityTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EntitiesServiceListEntityTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EntitiesServiceListEntitySubTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListEntitySubTypesResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EntitiesServiceListEntitySubTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EntitiesServiceListEntitySubTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestingServiceTestConnectorConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestConnectorConfigResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TestingServiceTestConnectorConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestingServiceTestConnectorConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestingServiceTestDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestDestinationResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TestingServiceTestDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestingServiceTestDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestingServiceTestExistingConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestExistingConnectorResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TestingServiceTestExistingConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestingServiceTestExistingConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestingServiceTestExistingPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestExistingPresetResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TestingServiceTestExistingPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestingServiceTestExistingPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestingServiceTestPresetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestPresetConfigResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TestingServiceTestPresetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestingServiceTestPresetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestingServiceTestRoutingConditionValidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestRoutingConditionValidResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TestingServiceTestRoutingConditionValidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestingServiceTestRoutingConditionValidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestingServiceTestTemplateRenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestTemplateRenderResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TestingServiceTestTemplateRenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestingServiceTestTemplateRenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceCreateCustomPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateCustomPresetResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceCreateCustomPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceCreateCustomPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceReplaceCustomPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ReplaceCustomPresetResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceReplaceCustomPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceReplaceCustomPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceDeleteCustomPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteCustomPresetResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceDeleteCustomPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceDeleteCustomPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceSetCustomPresetAsDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1SetCustomPresetAsDefaultResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceSetCustomPresetAsDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceSetCustomPresetAsDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceGetPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetPresetResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceGetPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceGetPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceSetPresetAsDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1SetPresetAsDefaultResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceSetPresetAsDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceSetPresetAsDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceBatchGetPresetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BatchGetPresetsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceBatchGetPresetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceBatchGetPresetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceGetDefaultPresetSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetDefaultPresetSummaryResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceGetDefaultPresetSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceGetDefaultPresetSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceListPresetSummariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListPresetSummariesResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceListPresetSummariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceListPresetSummariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresetsServiceGetSystemDefaultPresetSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetSystemDefaultPresetSummaryResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PresetsServiceGetSystemDefaultPresetSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresetsServiceGetSystemDefaultPresetSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRoutersServiceListGlobalRoutersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListGlobalRoutersResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r GlobalRoutersServiceListGlobalRoutersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRoutersServiceListGlobalRoutersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRoutersServiceCreateGlobalRouterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateGlobalRouterResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r GlobalRoutersServiceCreateGlobalRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRoutersServiceCreateGlobalRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRoutersServiceReplaceGlobalRouterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ReplaceGlobalRouterResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r GlobalRoutersServiceReplaceGlobalRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRoutersServiceReplaceGlobalRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRoutersServiceDeleteGlobalRouterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteGlobalRouterResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r GlobalRoutersServiceDeleteGlobalRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRoutersServiceDeleteGlobalRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRoutersServiceGetGlobalRouterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetGlobalRouterResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r GlobalRoutersServiceGetGlobalRouterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRoutersServiceGetGlobalRouterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRoutersServiceBatchGetGlobalRoutersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BatchGetGlobalRoutersResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r GlobalRoutersServiceBatchGetGlobalRoutersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRoutersServiceBatchGetGlobalRoutersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceCreateOutgoingWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateOutgoingWebhookResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceCreateOutgoingWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceCreateOutgoingWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceUpdateOutgoingWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateOutgoingWebhookResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceUpdateOutgoingWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceUpdateOutgoingWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceListOutgoingWebhookTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListOutgoingWebhookTypesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceListOutgoingWebhookTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceListOutgoingWebhookTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetOutgoingWebhookTypeDetailsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListIbmEventNotificationsInstancesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceTestOutgoingWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestOutgoingWebhookResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceTestOutgoingWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceTestOutgoingWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TestOutgoingWebhookResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceDeleteOutgoingWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteOutgoingWebhookResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceDeleteOutgoingWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceDeleteOutgoingWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceGetOutgoingWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetOutgoingWebhookResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceGetOutgoingWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceGetOutgoingWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceListOutgoingWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListOutgoingWebhooksResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceListOutgoingWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceListOutgoingWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceListAllOutgoingWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListAllOutgoingWebhooksResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceListAllOutgoingWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceListAllOutgoingWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OutgoingWebhooksServiceListOutboundWebhooksSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListOutboundWebhooksSummaryResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r OutgoingWebhooksServiceListOutboundWebhooksSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OutgoingWebhooksServiceListOutboundWebhooksSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceGetCompanyPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetCompanyPoliciesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceGetCompanyPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceGetCompanyPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceCreatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreatePolicyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceCreatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceCreatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceUpdatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdatePolicyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceUpdatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceUpdatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceDeletePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeletePolicyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceDeletePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceDeletePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceGetPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetPolicyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceGetPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceGetPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceAtomicOverwriteLogPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AtomicOverwriteLogPoliciesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceAtomicOverwriteLogPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceAtomicOverwriteLogPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceAtomicOverwriteSpanPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AtomicOverwriteSpanPoliciesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceAtomicOverwriteSpanPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceAtomicOverwriteSpanPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceAtomicBatchCreatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AtomicBatchCreatePolicyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceAtomicBatchCreatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceAtomicBatchCreatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceBulkTestLogPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BulkTestLogPoliciesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceBulkTestLogPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceBulkTestLogPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceReorderPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ReorderPoliciesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceReorderPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceReorderPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesServiceTogglePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1TogglePolicyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r PoliciesServiceTogglePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesServiceTogglePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetentionsServiceGetRetentionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetRetentionsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RetentionsServiceGetRetentionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetentionsServiceGetRetentionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetentionsServiceUpdateRetentionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateRetentionsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RetentionsServiceUpdateRetentionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetentionsServiceUpdateRetentionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetentionsServiceGetRetentionsEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetRetentionsEnabledResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RetentionsServiceGetRetentionsEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetentionsServiceGetRetentionsEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetentionsServiceActivateRetentionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ActivateRetentionsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RetentionsServiceActivateRetentionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetentionsServiceActivateRetentionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupSetsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1RuleGroupSetListing
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupSetsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupSetsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupSetsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateRuleGroupSetResult
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupSetsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupSetsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupSetsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupSetsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupSetsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupSetsFetchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1OutRuleGroupSet
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupSetsFetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupSetsFetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RuleGroupSetsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r RuleGroupSetsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RuleGroupSetsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScopesServiceGetTeamScopesByIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetScopesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ScopesServiceGetTeamScopesByIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScopesServiceGetTeamScopesByIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScopesServiceCreateScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateScopeResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ScopesServiceCreateScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScopesServiceCreateScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScopesServiceUpdateScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateScopeResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ScopesServiceUpdateScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScopesServiceUpdateScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScopesServiceGetTeamScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetScopesResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ScopesServiceGetTeamScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScopesServiceGetTeamScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScopesServiceDeleteScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteScopeResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ScopesServiceDeleteScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScopesServiceDeleteScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlosServiceListSlosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListSlosResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SlosServiceListSlosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlosServiceListSlosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlosServiceCreateSloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateSloResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SlosServiceCreateSloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlosServiceCreateSloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlosServiceReplaceSloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ReplaceSloResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SlosServiceReplaceSloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlosServiceReplaceSloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlosServiceDeleteSloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteSloResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SlosServiceDeleteSloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlosServiceDeleteSloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlosServiceGetSloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetSloResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SlosServiceGetSloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlosServiceGetSloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlosServiceBatchExecuteSloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BatchExecuteSloResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SlosServiceBatchExecuteSloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlosServiceBatchExecuteSloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlosServiceBatchGetSlosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1BatchGetSlosResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SlosServiceBatchGetSlosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlosServiceBatchGetSlosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SamlConfigurationServiceSetActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ssov2SetActiveResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SamlConfigurationServiceSetActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SamlConfigurationServiceSetActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SamlConfigurationServiceGetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetConfigurationResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SamlConfigurationServiceGetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SamlConfigurationServiceGetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SamlConfigurationServiceSetIDPParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2SetIDPParametersResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SamlConfigurationServiceSetIDPParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SamlConfigurationServiceSetIDPParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SamlConfigurationServiceGetSPParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetSPParametersResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r SamlConfigurationServiceGetSPParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SamlConfigurationServiceGetSPParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceGetTeamGroupByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetTeamGroupByNameResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceGetTeamGroupByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceGetTeamGroupByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceCreateTeamGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateTeamGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceCreateTeamGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceCreateTeamGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceUpdateTeamGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateTeamGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceUpdateTeamGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceUpdateTeamGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceGetTeamGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetTeamGroupsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceGetTeamGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceGetTeamGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1RemoveUsersFromTeamGroupsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AddUsersToTeamGroupsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceDeleteTeamGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteTeamGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceDeleteTeamGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceDeleteTeamGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceGetTeamGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetTeamGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceGetTeamGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceGetTeamGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceGetTeamGroupScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetTeamGroupScopeResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceGetTeamGroupScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceGetTeamGroupScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceSetTeamGroupScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1SetTeamGroupScopeResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceSetTeamGroupScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceSetTeamGroupScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1RemoveUsersFromTeamGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceGetGroupUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetGroupUsersResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceGetGroupUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceGetGroupUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AddUsersToTeamGroupResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsFoldersServiceListViewFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesListViewFoldersResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsFoldersServiceListViewFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsFoldersServiceListViewFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsFoldersServiceCreateViewFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ViewFolder
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsFoldersServiceCreateViewFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsFoldersServiceCreateViewFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsFoldersServiceReplaceViewFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ViewFolder
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsFoldersServiceReplaceViewFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsFoldersServiceReplaceViewFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsFoldersServiceDeleteViewFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesDeleteViewFolderResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsFoldersServiceDeleteViewFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsFoldersServiceDeleteViewFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsFoldersServiceGetViewFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ViewFolder
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsFoldersServiceGetViewFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsFoldersServiceGetViewFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsServiceListViewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesListViewsResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsServiceListViewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsServiceListViewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsServiceCreateViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesView
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsServiceCreateViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsServiceCreateViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsServiceDeleteViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesDeleteViewResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsServiceDeleteViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsServiceDeleteViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsServiceGetViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesView
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsServiceGetViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsServiceGetViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsServiceReplaceViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesView
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ViewsServiceReplaceViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsServiceReplaceViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsServiceListActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2ListActionsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ActionsServiceListActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsServiceListActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsServiceCreateActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2CreateActionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ActionsServiceCreateActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsServiceCreateActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsServiceReplaceActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2ReplaceActionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ActionsServiceReplaceActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsServiceReplaceActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsServiceAtomicBatchExecuteActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2AtomicBatchExecuteActionsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ActionsServiceAtomicBatchExecuteActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsServiceAtomicBatchExecuteActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsServiceOrderActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2OrderActionsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ActionsServiceOrderActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsServiceOrderActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsServiceDeleteActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2DeleteActionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ActionsServiceDeleteActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsServiceDeleteActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsServiceGetActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetActionResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ActionsServiceGetActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsServiceGetActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DataUsageServiceGetDataUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error *RpcStatus `json:"error,omitempty"`

		// Result This data structure is used to return data usage.
		Result *V2GetDataUsageResponse `json:"result,omitempty"`
	}
	JSON400     *interface{}
	JSON401     *interface{}
	JSON500     *interface{}
	JSONDefault *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DataUsageServiceGetDataUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DataUsageServiceGetDataUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DataUsageServiceGetDailyUsageEvaluationTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetDailyUsageEvaluationTokensResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DataUsageServiceGetDailyUsageEvaluationTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DataUsageServiceGetDailyUsageEvaluationTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DataUsageServiceGetDailyUsageProcessedGbsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetDailyUsageProcessedGbsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DataUsageServiceGetDailyUsageProcessedGbsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DataUsageServiceGetDailyUsageProcessedGbsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DataUsageServiceGetDailyUsageUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetDailyUsageUnitsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DataUsageServiceGetDailyUsageUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DataUsageServiceGetDailyUsageUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DataUsageServiceGetDataUsageMetricsExportStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetDataUsageMetricsExportStatusResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DataUsageServiceGetDataUsageMetricsExportStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DataUsageServiceGetDataUsageMetricsExportStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DataUsageServiceUpdateDataUsageMetricsExportStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2UpdateDataUsageMetricsExportStatusResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DataUsageServiceUpdateDataUsageMetricsExportStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DataUsageServiceUpdateDataUsageMetricsExportStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DataUsageServiceGetLogsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error *RpcStatus `json:"error,omitempty"`

		// Result This data structure is used to return logs count.
		Result *V2GetLogsCountResponse `json:"result,omitempty"`
	}
	JSON400     *interface{}
	JSON401     *interface{}
	JSON500     *interface{}
	JSONDefault *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DataUsageServiceGetLogsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DataUsageServiceGetLogsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DataUsageServiceGetSpansCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error *RpcStatus `json:"error,omitempty"`

		// Result This data structure is used to return spans count.
		Result *V2GetSpansCountResponse `json:"result,omitempty"`
	}
	JSON400     *interface{}
	JSON401     *interface{}
	JSON500     *interface{}
	JSONDefault *RpcStatus
}

// Status returns HTTPResponse.Status
func (r DataUsageServiceGetSpansCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DataUsageServiceGetSpansCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TargetServiceGetTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2GetTargetResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TargetServiceGetTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TargetServiceGetTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TargetServiceSetTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2SetTargetResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TargetServiceSetTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TargetServiceSetTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TargetServiceValidateTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V2ValidateTargetResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TargetServiceValidateTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TargetServiceValidateTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertDefsServiceListAlertDefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3ListAlertDefsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertDefsServiceListAlertDefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDefsServiceListAlertDefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertDefsServiceCreateAlertDefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3CreateAlertDefResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertDefsServiceCreateAlertDefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDefsServiceCreateAlertDefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertDefsServiceReplaceAlertDefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3ReplaceAlertDefResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertDefsServiceReplaceAlertDefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDefsServiceReplaceAlertDefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertDefsServiceGetAlertDefByVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3GetAlertDefByVersionIdResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertDefsServiceGetAlertDefByVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDefsServiceGetAlertDefByVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertDefsServiceDeleteAlertDefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3DeleteAlertDefResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertDefsServiceDeleteAlertDefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDefsServiceDeleteAlertDefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertDefsServiceGetAlertDefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3GetAlertDefResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertDefsServiceGetAlertDefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDefsServiceGetAlertDefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertDefsServiceSetActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alertsv3SetActiveResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertDefsServiceSetActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDefsServiceSetActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertEventServiceGetAlertEventsStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3GetAlertEventStatsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertEventServiceGetAlertEventsStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertEventServiceGetAlertEventsStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertEventServiceGetAlertEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3GetAlertEventResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertEventServiceGetAlertEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertEventServiceGetAlertEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertDefsServiceDownloadAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error *RpcStatus `json:"error,omitempty"`

		// Result A response containing the downloaded alert data
		Result *V3DownloadAlertsResponse `json:"result,omitempty"`
	}
	JSON400     *interface{}
	JSON401     *interface{}
	JSON500     *interface{}
	JSONDefault *RpcStatus
}

// Status returns HTTPResponse.Status
func (r AlertDefsServiceDownloadAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDefsServiceDownloadAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiKeysServiceCreateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3CreateApiKeyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ApiKeysServiceCreateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiKeysServiceCreateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiKeysServiceGetSendDataApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3GetSendDataApiKeysResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ApiKeysServiceGetSendDataApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiKeysServiceGetSendDataApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiKeysServiceDeleteApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3DeleteApiKeyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ApiKeysServiceDeleteApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiKeysServiceDeleteApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiKeysServiceGetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3GetApiKeyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ApiKeysServiceGetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiKeysServiceGetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiKeysServiceUpdateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3UpdateApiKeyResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r ApiKeysServiceUpdateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiKeysServiceUpdateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsServiceListEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3ListEventsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EventsServiceListEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsServiceListEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsServiceBatchGetEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3BatchGetEventResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EventsServiceBatchGetEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsServiceBatchGetEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsServiceGetEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3GetEventResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EventsServiceGetEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsServiceGetEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsServiceListEventsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3ListEventsCountResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EventsServiceListEventsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsServiceListEventsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsServiceGetEventsStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3GetEventsStatisticsResponse
	JSON400      *interface{}
	JSON401      *interface{}
	JSON500      *interface{}
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r EventsServiceGetEventsStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsServiceGetEventsStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RuleGroupsServiceGetRuleGroupModelMappingWithBodyWithResponse request with arbitrary body returning *RuleGroupsServiceGetRuleGroupModelMappingResponse
func (c *ClientWithResponses) RuleGroupsServiceGetRuleGroupModelMappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetRuleGroupModelMappingResponse, error) {
	rsp, err := c.RuleGroupsServiceGetRuleGroupModelMappingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceGetRuleGroupModelMappingResponse(rsp)
}

func (c *ClientWithResponses) RuleGroupsServiceGetRuleGroupModelMappingWithResponse(ctx context.Context, body RuleGroupsServiceGetRuleGroupModelMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetRuleGroupModelMappingResponse, error) {
	rsp, err := c.RuleGroupsServiceGetRuleGroupModelMapping(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceGetRuleGroupModelMappingResponse(rsp)
}

// RuleGroupsServiceBulkDeleteRuleGroupWithResponse request returning *RuleGroupsServiceBulkDeleteRuleGroupResponse
func (c *ClientWithResponses) RuleGroupsServiceBulkDeleteRuleGroupWithResponse(ctx context.Context, params *RuleGroupsServiceBulkDeleteRuleGroupParams, reqEditors ...RequestEditorFn) (*RuleGroupsServiceBulkDeleteRuleGroupResponse, error) {
	rsp, err := c.RuleGroupsServiceBulkDeleteRuleGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceBulkDeleteRuleGroupResponse(rsp)
}

// RuleGroupsServiceListRuleGroupsWithResponse request returning *RuleGroupsServiceListRuleGroupsResponse
func (c *ClientWithResponses) RuleGroupsServiceListRuleGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuleGroupsServiceListRuleGroupsResponse, error) {
	rsp, err := c.RuleGroupsServiceListRuleGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceListRuleGroupsResponse(rsp)
}

// RuleGroupsServiceCreateRuleGroupWithBodyWithResponse request with arbitrary body returning *RuleGroupsServiceCreateRuleGroupResponse
func (c *ClientWithResponses) RuleGroupsServiceCreateRuleGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupsServiceCreateRuleGroupResponse, error) {
	rsp, err := c.RuleGroupsServiceCreateRuleGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceCreateRuleGroupResponse(rsp)
}

func (c *ClientWithResponses) RuleGroupsServiceCreateRuleGroupWithResponse(ctx context.Context, body RuleGroupsServiceCreateRuleGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupsServiceCreateRuleGroupResponse, error) {
	rsp, err := c.RuleGroupsServiceCreateRuleGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceCreateRuleGroupResponse(rsp)
}

// RuleGroupsServiceGetCompanyUsageLimitsWithBodyWithResponse request with arbitrary body returning *RuleGroupsServiceGetCompanyUsageLimitsResponse
func (c *ClientWithResponses) RuleGroupsServiceGetCompanyUsageLimitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetCompanyUsageLimitsResponse, error) {
	rsp, err := c.RuleGroupsServiceGetCompanyUsageLimitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceGetCompanyUsageLimitsResponse(rsp)
}

func (c *ClientWithResponses) RuleGroupsServiceGetCompanyUsageLimitsWithResponse(ctx context.Context, body RuleGroupsServiceGetCompanyUsageLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetCompanyUsageLimitsResponse, error) {
	rsp, err := c.RuleGroupsServiceGetCompanyUsageLimits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceGetCompanyUsageLimitsResponse(rsp)
}

// RuleGroupsServiceDeleteRuleGroupWithResponse request returning *RuleGroupsServiceDeleteRuleGroupResponse
func (c *ClientWithResponses) RuleGroupsServiceDeleteRuleGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*RuleGroupsServiceDeleteRuleGroupResponse, error) {
	rsp, err := c.RuleGroupsServiceDeleteRuleGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceDeleteRuleGroupResponse(rsp)
}

// RuleGroupsServiceGetRuleGroupWithResponse request returning *RuleGroupsServiceGetRuleGroupResponse
func (c *ClientWithResponses) RuleGroupsServiceGetRuleGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*RuleGroupsServiceGetRuleGroupResponse, error) {
	rsp, err := c.RuleGroupsServiceGetRuleGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceGetRuleGroupResponse(rsp)
}

// RuleGroupsServiceUpdateRuleGroupWithBodyWithResponse request with arbitrary body returning *RuleGroupsServiceUpdateRuleGroupResponse
func (c *ClientWithResponses) RuleGroupsServiceUpdateRuleGroupWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupsServiceUpdateRuleGroupResponse, error) {
	rsp, err := c.RuleGroupsServiceUpdateRuleGroupWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceUpdateRuleGroupResponse(rsp)
}

func (c *ClientWithResponses) RuleGroupsServiceUpdateRuleGroupWithResponse(ctx context.Context, groupId string, body RuleGroupsServiceUpdateRuleGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupsServiceUpdateRuleGroupResponse, error) {
	rsp, err := c.RuleGroupsServiceUpdateRuleGroup(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupsServiceUpdateRuleGroupResponse(rsp)
}

// Events2MetricServiceListE2MWithResponse request returning *Events2MetricServiceListE2MResponse
func (c *ClientWithResponses) Events2MetricServiceListE2MWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Events2MetricServiceListE2MResponse, error) {
	rsp, err := c.Events2MetricServiceListE2M(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceListE2MResponse(rsp)
}

// Events2MetricServiceCreateE2MWithBodyWithResponse request with arbitrary body returning *Events2MetricServiceCreateE2MResponse
func (c *ClientWithResponses) Events2MetricServiceCreateE2MWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Events2MetricServiceCreateE2MResponse, error) {
	rsp, err := c.Events2MetricServiceCreateE2MWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceCreateE2MResponse(rsp)
}

func (c *ClientWithResponses) Events2MetricServiceCreateE2MWithResponse(ctx context.Context, body Events2MetricServiceCreateE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*Events2MetricServiceCreateE2MResponse, error) {
	rsp, err := c.Events2MetricServiceCreateE2M(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceCreateE2MResponse(rsp)
}

// Events2MetricServiceReplaceE2MWithBodyWithResponse request with arbitrary body returning *Events2MetricServiceReplaceE2MResponse
func (c *ClientWithResponses) Events2MetricServiceReplaceE2MWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Events2MetricServiceReplaceE2MResponse, error) {
	rsp, err := c.Events2MetricServiceReplaceE2MWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceReplaceE2MResponse(rsp)
}

func (c *ClientWithResponses) Events2MetricServiceReplaceE2MWithResponse(ctx context.Context, body Events2MetricServiceReplaceE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*Events2MetricServiceReplaceE2MResponse, error) {
	rsp, err := c.Events2MetricServiceReplaceE2M(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceReplaceE2MResponse(rsp)
}

// Events2MetricServiceAtomicBatchExecuteE2MWithBodyWithResponse request with arbitrary body returning *Events2MetricServiceAtomicBatchExecuteE2MResponse
func (c *ClientWithResponses) Events2MetricServiceAtomicBatchExecuteE2MWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Events2MetricServiceAtomicBatchExecuteE2MResponse, error) {
	rsp, err := c.Events2MetricServiceAtomicBatchExecuteE2MWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceAtomicBatchExecuteE2MResponse(rsp)
}

func (c *ClientWithResponses) Events2MetricServiceAtomicBatchExecuteE2MWithResponse(ctx context.Context, body Events2MetricServiceAtomicBatchExecuteE2MJSONRequestBody, reqEditors ...RequestEditorFn) (*Events2MetricServiceAtomicBatchExecuteE2MResponse, error) {
	rsp, err := c.Events2MetricServiceAtomicBatchExecuteE2M(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceAtomicBatchExecuteE2MResponse(rsp)
}

// Events2MetricServiceListLabelsCardinalityWithResponse request returning *Events2MetricServiceListLabelsCardinalityResponse
func (c *ClientWithResponses) Events2MetricServiceListLabelsCardinalityWithResponse(ctx context.Context, params *Events2MetricServiceListLabelsCardinalityParams, reqEditors ...RequestEditorFn) (*Events2MetricServiceListLabelsCardinalityResponse, error) {
	rsp, err := c.Events2MetricServiceListLabelsCardinality(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceListLabelsCardinalityResponse(rsp)
}

// Events2MetricServiceGetLimitsWithResponse request returning *Events2MetricServiceGetLimitsResponse
func (c *ClientWithResponses) Events2MetricServiceGetLimitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Events2MetricServiceGetLimitsResponse, error) {
	rsp, err := c.Events2MetricServiceGetLimits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceGetLimitsResponse(rsp)
}

// Events2MetricServiceDeleteE2MWithResponse request returning *Events2MetricServiceDeleteE2MResponse
func (c *ClientWithResponses) Events2MetricServiceDeleteE2MWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Events2MetricServiceDeleteE2MResponse, error) {
	rsp, err := c.Events2MetricServiceDeleteE2M(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceDeleteE2MResponse(rsp)
}

// Events2MetricServiceGetE2MWithResponse request returning *Events2MetricServiceGetE2MResponse
func (c *ClientWithResponses) Events2MetricServiceGetE2MWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Events2MetricServiceGetE2MResponse, error) {
	rsp, err := c.Events2MetricServiceGetE2M(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvents2MetricServiceGetE2MResponse(rsp)
}

// EnrichmentServiceRemoveEnrichmentsWithResponse request returning *EnrichmentServiceRemoveEnrichmentsResponse
func (c *ClientWithResponses) EnrichmentServiceRemoveEnrichmentsWithResponse(ctx context.Context, params *EnrichmentServiceRemoveEnrichmentsParams, reqEditors ...RequestEditorFn) (*EnrichmentServiceRemoveEnrichmentsResponse, error) {
	rsp, err := c.EnrichmentServiceRemoveEnrichments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichmentServiceRemoveEnrichmentsResponse(rsp)
}

// EnrichmentServiceGetEnrichmentsWithResponse request returning *EnrichmentServiceGetEnrichmentsResponse
func (c *ClientWithResponses) EnrichmentServiceGetEnrichmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EnrichmentServiceGetEnrichmentsResponse, error) {
	rsp, err := c.EnrichmentServiceGetEnrichments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichmentServiceGetEnrichmentsResponse(rsp)
}

// EnrichmentServiceAddEnrichmentsWithBodyWithResponse request with arbitrary body returning *EnrichmentServiceAddEnrichmentsResponse
func (c *ClientWithResponses) EnrichmentServiceAddEnrichmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnrichmentServiceAddEnrichmentsResponse, error) {
	rsp, err := c.EnrichmentServiceAddEnrichmentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichmentServiceAddEnrichmentsResponse(rsp)
}

func (c *ClientWithResponses) EnrichmentServiceAddEnrichmentsWithResponse(ctx context.Context, body EnrichmentServiceAddEnrichmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnrichmentServiceAddEnrichmentsResponse, error) {
	rsp, err := c.EnrichmentServiceAddEnrichments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichmentServiceAddEnrichmentsResponse(rsp)
}

// EnrichmentServiceGetEnrichmentLimitWithResponse request returning *EnrichmentServiceGetEnrichmentLimitResponse
func (c *ClientWithResponses) EnrichmentServiceGetEnrichmentLimitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EnrichmentServiceGetEnrichmentLimitResponse, error) {
	rsp, err := c.EnrichmentServiceGetEnrichmentLimit(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichmentServiceGetEnrichmentLimitResponse(rsp)
}

// EnrichmentServiceGetCompanyEnrichmentSettingsWithResponse request returning *EnrichmentServiceGetCompanyEnrichmentSettingsResponse
func (c *ClientWithResponses) EnrichmentServiceGetCompanyEnrichmentSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EnrichmentServiceGetCompanyEnrichmentSettingsResponse, error) {
	rsp, err := c.EnrichmentServiceGetCompanyEnrichmentSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichmentServiceGetCompanyEnrichmentSettingsResponse(rsp)
}

// EnrichmentServiceAtomicOverwriteEnrichmentsWithBodyWithResponse request with arbitrary body returning *EnrichmentServiceAtomicOverwriteEnrichmentsResponse
func (c *ClientWithResponses) EnrichmentServiceAtomicOverwriteEnrichmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnrichmentServiceAtomicOverwriteEnrichmentsResponse, error) {
	rsp, err := c.EnrichmentServiceAtomicOverwriteEnrichmentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichmentServiceAtomicOverwriteEnrichmentsResponse(rsp)
}

func (c *ClientWithResponses) EnrichmentServiceAtomicOverwriteEnrichmentsWithResponse(ctx context.Context, body EnrichmentServiceAtomicOverwriteEnrichmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnrichmentServiceAtomicOverwriteEnrichmentsResponse, error) {
	rsp, err := c.EnrichmentServiceAtomicOverwriteEnrichments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichmentServiceAtomicOverwriteEnrichmentsResponse(rsp)
}

// MetricsTcoServiceGetWithResponse request returning *MetricsTcoServiceGetResponse
func (c *ClientWithResponses) MetricsTcoServiceGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsTcoServiceGetResponse, error) {
	rsp, err := c.MetricsTcoServiceGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsTcoServiceGetResponse(rsp)
}

// MetricsTcoServiceAddWithBodyWithResponse request with arbitrary body returning *MetricsTcoServiceAddResponse
func (c *ClientWithResponses) MetricsTcoServiceAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsTcoServiceAddResponse, error) {
	rsp, err := c.MetricsTcoServiceAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsTcoServiceAddResponse(rsp)
}

func (c *ClientWithResponses) MetricsTcoServiceAddWithResponse(ctx context.Context, body MetricsTcoServiceAddJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsTcoServiceAddResponse, error) {
	rsp, err := c.MetricsTcoServiceAdd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsTcoServiceAddResponse(rsp)
}

// MetricsTcoServiceDeleteWithBodyWithResponse request with arbitrary body returning *MetricsTcoServiceDeleteResponse
func (c *ClientWithResponses) MetricsTcoServiceDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsTcoServiceDeleteResponse, error) {
	rsp, err := c.MetricsTcoServiceDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsTcoServiceDeleteResponse(rsp)
}

func (c *ClientWithResponses) MetricsTcoServiceDeleteWithResponse(ctx context.Context, body MetricsTcoServiceDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsTcoServiceDeleteResponse, error) {
	rsp, err := c.MetricsTcoServiceDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsTcoServiceDeleteResponse(rsp)
}

// AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithBodyWithResponse request with arbitrary body returning *AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse
func (c *ClientWithResponses) AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse(rsp)
}

func (c *ClientWithResponses) AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithResponse(ctx context.Context, body AlertSchedulerRuleServiceCreateAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceCreateAlertSchedulerRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse(rsp)
}

// AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithBodyWithResponse request with arbitrary body returning *AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse
func (c *ClientWithResponses) AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse(rsp)
}

func (c *ClientWithResponses) AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithResponse(ctx context.Context, body AlertSchedulerRuleServiceUpdateAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceUpdateAlertSchedulerRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse(rsp)
}

// AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleWithResponse request returning *AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse
func (c *ClientWithResponses) AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleWithResponse(ctx context.Context, params *AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleParams, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceGetBulkAlertSchedulerRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse(rsp)
}

// AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithBodyWithResponse request with arbitrary body returning *AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse
func (c *ClientWithResponses) AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse(rsp)
}

func (c *ClientWithResponses) AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithResponse(ctx context.Context, body AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceCreateBulkAlertSchedulerRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse(rsp)
}

// AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithBodyWithResponse request with arbitrary body returning *AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse
func (c *ClientWithResponses) AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse(rsp)
}

func (c *ClientWithResponses) AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithResponse(ctx context.Context, body AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse(rsp)
}

// AlertSchedulerRuleServiceDeleteAlertSchedulerRuleWithResponse request returning *AlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse
func (c *ClientWithResponses) AlertSchedulerRuleServiceDeleteAlertSchedulerRuleWithResponse(ctx context.Context, alertSchedulerRuleId string, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceDeleteAlertSchedulerRule(ctx, alertSchedulerRuleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse(rsp)
}

// AlertSchedulerRuleServiceGetAlertSchedulerRuleWithResponse request returning *AlertSchedulerRuleServiceGetAlertSchedulerRuleResponse
func (c *ClientWithResponses) AlertSchedulerRuleServiceGetAlertSchedulerRuleWithResponse(ctx context.Context, alertSchedulerRuleId string, reqEditors ...RequestEditorFn) (*AlertSchedulerRuleServiceGetAlertSchedulerRuleResponse, error) {
	rsp, err := c.AlertSchedulerRuleServiceGetAlertSchedulerRule(ctx, alertSchedulerRuleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertSchedulerRuleServiceGetAlertSchedulerRuleResponse(rsp)
}

// ContextualDataIntegrationServiceSaveContextualDataIntegrationWithBodyWithResponse request with arbitrary body returning *ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse
func (c *ClientWithResponses) ContextualDataIntegrationServiceSaveContextualDataIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceSaveContextualDataIntegrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceSaveContextualDataIntegrationResponse(rsp)
}

func (c *ClientWithResponses) ContextualDataIntegrationServiceSaveContextualDataIntegrationWithResponse(ctx context.Context, body ContextualDataIntegrationServiceSaveContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceSaveContextualDataIntegration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceSaveContextualDataIntegrationResponse(rsp)
}

// ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithBodyWithResponse request with arbitrary body returning *ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse
func (c *ClientWithResponses) ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse(rsp)
}

func (c *ClientWithResponses) ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithResponse(ctx context.Context, body ContextualDataIntegrationServiceUpdateContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceUpdateContextualDataIntegration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse(rsp)
}

// ContextualDataIntegrationServiceTestContextualDataIntegrationWithBodyWithResponse request with arbitrary body returning *ContextualDataIntegrationServiceTestContextualDataIntegrationResponse
func (c *ClientWithResponses) ContextualDataIntegrationServiceTestContextualDataIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceTestContextualDataIntegrationResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceTestContextualDataIntegrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceTestContextualDataIntegrationResponse(rsp)
}

func (c *ClientWithResponses) ContextualDataIntegrationServiceTestContextualDataIntegrationWithResponse(ctx context.Context, body ContextualDataIntegrationServiceTestContextualDataIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceTestContextualDataIntegrationResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceTestContextualDataIntegration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceTestContextualDataIntegrationResponse(rsp)
}

// ContextualDataIntegrationServiceDeleteContextualDataIntegrationWithResponse request returning *ContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse
func (c *ClientWithResponses) ContextualDataIntegrationServiceDeleteContextualDataIntegrationWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceDeleteContextualDataIntegration(ctx, integrationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse(rsp)
}

// ContextualDataIntegrationServiceGetContextualDataIntegrationsWithResponse request returning *ContextualDataIntegrationServiceGetContextualDataIntegrationsResponse
func (c *ClientWithResponses) ContextualDataIntegrationServiceGetContextualDataIntegrationsWithResponse(ctx context.Context, params *ContextualDataIntegrationServiceGetContextualDataIntegrationsParams, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceGetContextualDataIntegrationsResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceGetContextualDataIntegrations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceGetContextualDataIntegrationsResponse(rsp)
}

// ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionWithResponse request returning *ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse
func (c *ClientWithResponses) ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionWithResponse(ctx context.Context, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionParams, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceGetContextualDataIntegrationDefinition(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse(rsp)
}

// ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsWithResponse request returning *ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse
func (c *ClientWithResponses) ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsWithResponse(ctx context.Context, id string, params *ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse, error) {
	rsp, err := c.ContextualDataIntegrationServiceGetContextualDataIntegrationDetails(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse(rsp)
}

// CustomEnrichmentServiceGetCustomEnrichmentsWithResponse request returning *CustomEnrichmentServiceGetCustomEnrichmentsResponse
func (c *ClientWithResponses) CustomEnrichmentServiceGetCustomEnrichmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceGetCustomEnrichmentsResponse, error) {
	rsp, err := c.CustomEnrichmentServiceGetCustomEnrichments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomEnrichmentServiceGetCustomEnrichmentsResponse(rsp)
}

// CustomEnrichmentServiceCreateCustomEnrichmentWithBodyWithResponse request with arbitrary body returning *CustomEnrichmentServiceCreateCustomEnrichmentResponse
func (c *ClientWithResponses) CustomEnrichmentServiceCreateCustomEnrichmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceCreateCustomEnrichmentResponse, error) {
	rsp, err := c.CustomEnrichmentServiceCreateCustomEnrichmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomEnrichmentServiceCreateCustomEnrichmentResponse(rsp)
}

func (c *ClientWithResponses) CustomEnrichmentServiceCreateCustomEnrichmentWithResponse(ctx context.Context, body CustomEnrichmentServiceCreateCustomEnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceCreateCustomEnrichmentResponse, error) {
	rsp, err := c.CustomEnrichmentServiceCreateCustomEnrichment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomEnrichmentServiceCreateCustomEnrichmentResponse(rsp)
}

// CustomEnrichmentServiceUpdateCustomEnrichmentWithBodyWithResponse request with arbitrary body returning *CustomEnrichmentServiceUpdateCustomEnrichmentResponse
func (c *ClientWithResponses) CustomEnrichmentServiceUpdateCustomEnrichmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceUpdateCustomEnrichmentResponse, error) {
	rsp, err := c.CustomEnrichmentServiceUpdateCustomEnrichmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomEnrichmentServiceUpdateCustomEnrichmentResponse(rsp)
}

func (c *ClientWithResponses) CustomEnrichmentServiceUpdateCustomEnrichmentWithResponse(ctx context.Context, body CustomEnrichmentServiceUpdateCustomEnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceUpdateCustomEnrichmentResponse, error) {
	rsp, err := c.CustomEnrichmentServiceUpdateCustomEnrichment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomEnrichmentServiceUpdateCustomEnrichmentResponse(rsp)
}

// CustomEnrichmentServiceSearchCustomEnrichmentDataWithResponse request returning *CustomEnrichmentServiceSearchCustomEnrichmentDataResponse
func (c *ClientWithResponses) CustomEnrichmentServiceSearchCustomEnrichmentDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceSearchCustomEnrichmentDataResponse, error) {
	rsp, err := c.CustomEnrichmentServiceSearchCustomEnrichmentData(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomEnrichmentServiceSearchCustomEnrichmentDataResponse(rsp)
}

// CustomEnrichmentServiceDeleteCustomEnrichmentWithResponse request returning *CustomEnrichmentServiceDeleteCustomEnrichmentResponse
func (c *ClientWithResponses) CustomEnrichmentServiceDeleteCustomEnrichmentWithResponse(ctx context.Context, customEnrichmentId int64, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceDeleteCustomEnrichmentResponse, error) {
	rsp, err := c.CustomEnrichmentServiceDeleteCustomEnrichment(ctx, customEnrichmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomEnrichmentServiceDeleteCustomEnrichmentResponse(rsp)
}

// CustomEnrichmentServiceGetCustomEnrichmentWithResponse request returning *CustomEnrichmentServiceGetCustomEnrichmentResponse
func (c *ClientWithResponses) CustomEnrichmentServiceGetCustomEnrichmentWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*CustomEnrichmentServiceGetCustomEnrichmentResponse, error) {
	rsp, err := c.CustomEnrichmentServiceGetCustomEnrichment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomEnrichmentServiceGetCustomEnrichmentResponse(rsp)
}

// DashboardsServiceGetDashboardBySlugWithResponse request returning *DashboardsServiceGetDashboardBySlugResponse
func (c *ClientWithResponses) DashboardsServiceGetDashboardBySlugWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*DashboardsServiceGetDashboardBySlugResponse, error) {
	rsp, err := c.DashboardsServiceGetDashboardBySlug(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceGetDashboardBySlugResponse(rsp)
}

// DashboardCatalogServiceGetDashboardCatalogWithResponse request returning *DashboardCatalogServiceGetDashboardCatalogResponse
func (c *ClientWithResponses) DashboardCatalogServiceGetDashboardCatalogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DashboardCatalogServiceGetDashboardCatalogResponse, error) {
	rsp, err := c.DashboardCatalogServiceGetDashboardCatalog(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardCatalogServiceGetDashboardCatalogResponse(rsp)
}

// DashboardsServiceCreateDashboardWithBodyWithResponse request with arbitrary body returning *DashboardsServiceCreateDashboardResponse
func (c *ClientWithResponses) DashboardsServiceCreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceCreateDashboardResponse, error) {
	rsp, err := c.DashboardsServiceCreateDashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceCreateDashboardResponse(rsp)
}

func (c *ClientWithResponses) DashboardsServiceCreateDashboardWithResponse(ctx context.Context, body DashboardsServiceCreateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceCreateDashboardResponse, error) {
	rsp, err := c.DashboardsServiceCreateDashboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceCreateDashboardResponse(rsp)
}

// DashboardsServiceReplaceDashboardWithBodyWithResponse request with arbitrary body returning *DashboardsServiceReplaceDashboardResponse
func (c *ClientWithResponses) DashboardsServiceReplaceDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceReplaceDashboardResponse, error) {
	rsp, err := c.DashboardsServiceReplaceDashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceReplaceDashboardResponse(rsp)
}

func (c *ClientWithResponses) DashboardsServiceReplaceDashboardWithResponse(ctx context.Context, body DashboardsServiceReplaceDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceReplaceDashboardResponse, error) {
	rsp, err := c.DashboardsServiceReplaceDashboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceReplaceDashboardResponse(rsp)
}

// DashboardsServiceDeleteDashboardWithResponse request returning *DashboardsServiceDeleteDashboardResponse
func (c *ClientWithResponses) DashboardsServiceDeleteDashboardWithResponse(ctx context.Context, dashboardId string, params *DashboardsServiceDeleteDashboardParams, reqEditors ...RequestEditorFn) (*DashboardsServiceDeleteDashboardResponse, error) {
	rsp, err := c.DashboardsServiceDeleteDashboard(ctx, dashboardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceDeleteDashboardResponse(rsp)
}

// DashboardsServiceGetDashboardWithResponse request returning *DashboardsServiceGetDashboardResponse
func (c *ClientWithResponses) DashboardsServiceGetDashboardWithResponse(ctx context.Context, dashboardId string, reqEditors ...RequestEditorFn) (*DashboardsServiceGetDashboardResponse, error) {
	rsp, err := c.DashboardsServiceGetDashboard(ctx, dashboardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceGetDashboardResponse(rsp)
}

// DashboardsServiceReplaceDefaultDashboardWithBodyWithResponse request with arbitrary body returning *DashboardsServiceReplaceDefaultDashboardResponse
func (c *ClientWithResponses) DashboardsServiceReplaceDefaultDashboardWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceReplaceDefaultDashboardResponse, error) {
	rsp, err := c.DashboardsServiceReplaceDefaultDashboardWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceReplaceDefaultDashboardResponse(rsp)
}

func (c *ClientWithResponses) DashboardsServiceReplaceDefaultDashboardWithResponse(ctx context.Context, dashboardId string, body DashboardsServiceReplaceDefaultDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceReplaceDefaultDashboardResponse, error) {
	rsp, err := c.DashboardsServiceReplaceDefaultDashboard(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceReplaceDefaultDashboardResponse(rsp)
}

// DashboardsServiceAssignDashboardFolderWithBodyWithResponse request with arbitrary body returning *DashboardsServiceAssignDashboardFolderResponse
func (c *ClientWithResponses) DashboardsServiceAssignDashboardFolderWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceAssignDashboardFolderResponse, error) {
	rsp, err := c.DashboardsServiceAssignDashboardFolderWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceAssignDashboardFolderResponse(rsp)
}

func (c *ClientWithResponses) DashboardsServiceAssignDashboardFolderWithResponse(ctx context.Context, dashboardId string, body DashboardsServiceAssignDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceAssignDashboardFolderResponse, error) {
	rsp, err := c.DashboardsServiceAssignDashboardFolder(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceAssignDashboardFolderResponse(rsp)
}

// DashboardsServicePinDashboardWithBodyWithResponse request with arbitrary body returning *DashboardsServicePinDashboardResponse
func (c *ClientWithResponses) DashboardsServicePinDashboardWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServicePinDashboardResponse, error) {
	rsp, err := c.DashboardsServicePinDashboardWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServicePinDashboardResponse(rsp)
}

func (c *ClientWithResponses) DashboardsServicePinDashboardWithResponse(ctx context.Context, dashboardId string, body DashboardsServicePinDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServicePinDashboardResponse, error) {
	rsp, err := c.DashboardsServicePinDashboard(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServicePinDashboardResponse(rsp)
}

// DashboardsServiceUnpinDashboardWithBodyWithResponse request with arbitrary body returning *DashboardsServiceUnpinDashboardResponse
func (c *ClientWithResponses) DashboardsServiceUnpinDashboardWithBodyWithResponse(ctx context.Context, dashboardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardsServiceUnpinDashboardResponse, error) {
	rsp, err := c.DashboardsServiceUnpinDashboardWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceUnpinDashboardResponse(rsp)
}

func (c *ClientWithResponses) DashboardsServiceUnpinDashboardWithResponse(ctx context.Context, dashboardId string, body DashboardsServiceUnpinDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardsServiceUnpinDashboardResponse, error) {
	rsp, err := c.DashboardsServiceUnpinDashboard(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardsServiceUnpinDashboardResponse(rsp)
}

// DashboardFoldersServiceListDashboardFoldersWithResponse request returning *DashboardFoldersServiceListDashboardFoldersResponse
func (c *ClientWithResponses) DashboardFoldersServiceListDashboardFoldersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceListDashboardFoldersResponse, error) {
	rsp, err := c.DashboardFoldersServiceListDashboardFolders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardFoldersServiceListDashboardFoldersResponse(rsp)
}

// DashboardFoldersServiceCreateDashboardFolderWithBodyWithResponse request with arbitrary body returning *DashboardFoldersServiceCreateDashboardFolderResponse
func (c *ClientWithResponses) DashboardFoldersServiceCreateDashboardFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceCreateDashboardFolderResponse, error) {
	rsp, err := c.DashboardFoldersServiceCreateDashboardFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardFoldersServiceCreateDashboardFolderResponse(rsp)
}

func (c *ClientWithResponses) DashboardFoldersServiceCreateDashboardFolderWithResponse(ctx context.Context, body DashboardFoldersServiceCreateDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceCreateDashboardFolderResponse, error) {
	rsp, err := c.DashboardFoldersServiceCreateDashboardFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardFoldersServiceCreateDashboardFolderResponse(rsp)
}

// DashboardFoldersServiceReplaceDashboardFolderWithBodyWithResponse request with arbitrary body returning *DashboardFoldersServiceReplaceDashboardFolderResponse
func (c *ClientWithResponses) DashboardFoldersServiceReplaceDashboardFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceReplaceDashboardFolderResponse, error) {
	rsp, err := c.DashboardFoldersServiceReplaceDashboardFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardFoldersServiceReplaceDashboardFolderResponse(rsp)
}

func (c *ClientWithResponses) DashboardFoldersServiceReplaceDashboardFolderWithResponse(ctx context.Context, body DashboardFoldersServiceReplaceDashboardFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceReplaceDashboardFolderResponse, error) {
	rsp, err := c.DashboardFoldersServiceReplaceDashboardFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardFoldersServiceReplaceDashboardFolderResponse(rsp)
}

// DashboardFoldersServiceDeleteDashboardFolderWithResponse request returning *DashboardFoldersServiceDeleteDashboardFolderResponse
func (c *ClientWithResponses) DashboardFoldersServiceDeleteDashboardFolderWithResponse(ctx context.Context, folderId string, params *DashboardFoldersServiceDeleteDashboardFolderParams, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceDeleteDashboardFolderResponse, error) {
	rsp, err := c.DashboardFoldersServiceDeleteDashboardFolder(ctx, folderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardFoldersServiceDeleteDashboardFolderResponse(rsp)
}

// DashboardFoldersServiceGetDashboardFolderWithResponse request returning *DashboardFoldersServiceGetDashboardFolderResponse
func (c *ClientWithResponses) DashboardFoldersServiceGetDashboardFolderWithResponse(ctx context.Context, folderId string, params *DashboardFoldersServiceGetDashboardFolderParams, reqEditors ...RequestEditorFn) (*DashboardFoldersServiceGetDashboardFolderResponse, error) {
	rsp, err := c.DashboardFoldersServiceGetDashboardFolder(ctx, folderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDashboardFoldersServiceGetDashboardFolderResponse(rsp)
}

// ExtensionDeploymentServiceDeployExtensionWithBodyWithResponse request with arbitrary body returning *ExtensionDeploymentServiceDeployExtensionResponse
func (c *ClientWithResponses) ExtensionDeploymentServiceDeployExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceDeployExtensionResponse, error) {
	rsp, err := c.ExtensionDeploymentServiceDeployExtensionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionDeploymentServiceDeployExtensionResponse(rsp)
}

func (c *ClientWithResponses) ExtensionDeploymentServiceDeployExtensionWithResponse(ctx context.Context, body ExtensionDeploymentServiceDeployExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceDeployExtensionResponse, error) {
	rsp, err := c.ExtensionDeploymentServiceDeployExtension(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionDeploymentServiceDeployExtensionResponse(rsp)
}

// ExtensionDeploymentServiceGetDeployedExtensionsWithResponse request returning *ExtensionDeploymentServiceGetDeployedExtensionsResponse
func (c *ClientWithResponses) ExtensionDeploymentServiceGetDeployedExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceGetDeployedExtensionsResponse, error) {
	rsp, err := c.ExtensionDeploymentServiceGetDeployedExtensions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionDeploymentServiceGetDeployedExtensionsResponse(rsp)
}

// ExtensionDeploymentServiceUndeployExtensionWithBodyWithResponse request with arbitrary body returning *ExtensionDeploymentServiceUndeployExtensionResponse
func (c *ClientWithResponses) ExtensionDeploymentServiceUndeployExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceUndeployExtensionResponse, error) {
	rsp, err := c.ExtensionDeploymentServiceUndeployExtensionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionDeploymentServiceUndeployExtensionResponse(rsp)
}

func (c *ClientWithResponses) ExtensionDeploymentServiceUndeployExtensionWithResponse(ctx context.Context, body ExtensionDeploymentServiceUndeployExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceUndeployExtensionResponse, error) {
	rsp, err := c.ExtensionDeploymentServiceUndeployExtension(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionDeploymentServiceUndeployExtensionResponse(rsp)
}

// ExtensionDeploymentServiceUpdateExtensionWithBodyWithResponse request with arbitrary body returning *ExtensionDeploymentServiceUpdateExtensionResponse
func (c *ClientWithResponses) ExtensionDeploymentServiceUpdateExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceUpdateExtensionResponse, error) {
	rsp, err := c.ExtensionDeploymentServiceUpdateExtensionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionDeploymentServiceUpdateExtensionResponse(rsp)
}

func (c *ClientWithResponses) ExtensionDeploymentServiceUpdateExtensionWithResponse(ctx context.Context, body ExtensionDeploymentServiceUpdateExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionDeploymentServiceUpdateExtensionResponse, error) {
	rsp, err := c.ExtensionDeploymentServiceUpdateExtension(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionDeploymentServiceUpdateExtensionResponse(rsp)
}

// ExtensionTestingServiceCleanupTestingRevisionWithBodyWithResponse request with arbitrary body returning *ExtensionTestingServiceCleanupTestingRevisionResponse
func (c *ClientWithResponses) ExtensionTestingServiceCleanupTestingRevisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceCleanupTestingRevisionResponse, error) {
	rsp, err := c.ExtensionTestingServiceCleanupTestingRevisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionTestingServiceCleanupTestingRevisionResponse(rsp)
}

func (c *ClientWithResponses) ExtensionTestingServiceCleanupTestingRevisionWithResponse(ctx context.Context, body ExtensionTestingServiceCleanupTestingRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceCleanupTestingRevisionResponse, error) {
	rsp, err := c.ExtensionTestingServiceCleanupTestingRevision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionTestingServiceCleanupTestingRevisionResponse(rsp)
}

// ExtensionTestingServiceInitializeTestingRevisionWithBodyWithResponse request with arbitrary body returning *ExtensionTestingServiceInitializeTestingRevisionResponse
func (c *ClientWithResponses) ExtensionTestingServiceInitializeTestingRevisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceInitializeTestingRevisionResponse, error) {
	rsp, err := c.ExtensionTestingServiceInitializeTestingRevisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionTestingServiceInitializeTestingRevisionResponse(rsp)
}

func (c *ClientWithResponses) ExtensionTestingServiceInitializeTestingRevisionWithResponse(ctx context.Context, body ExtensionTestingServiceInitializeTestingRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceInitializeTestingRevisionResponse, error) {
	rsp, err := c.ExtensionTestingServiceInitializeTestingRevision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionTestingServiceInitializeTestingRevisionResponse(rsp)
}

// ExtensionTestingServiceTestExtensionRevisionWithBodyWithResponse request with arbitrary body returning *ExtensionTestingServiceTestExtensionRevisionResponse
func (c *ClientWithResponses) ExtensionTestingServiceTestExtensionRevisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceTestExtensionRevisionResponse, error) {
	rsp, err := c.ExtensionTestingServiceTestExtensionRevisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionTestingServiceTestExtensionRevisionResponse(rsp)
}

func (c *ClientWithResponses) ExtensionTestingServiceTestExtensionRevisionWithResponse(ctx context.Context, body ExtensionTestingServiceTestExtensionRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionTestingServiceTestExtensionRevisionResponse, error) {
	rsp, err := c.ExtensionTestingServiceTestExtensionRevision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionTestingServiceTestExtensionRevisionResponse(rsp)
}

// ExtensionServiceGetAllExtensionsWithBodyWithResponse request with arbitrary body returning *ExtensionServiceGetAllExtensionsResponse
func (c *ClientWithResponses) ExtensionServiceGetAllExtensionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtensionServiceGetAllExtensionsResponse, error) {
	rsp, err := c.ExtensionServiceGetAllExtensionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionServiceGetAllExtensionsResponse(rsp)
}

func (c *ClientWithResponses) ExtensionServiceGetAllExtensionsWithResponse(ctx context.Context, body ExtensionServiceGetAllExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtensionServiceGetAllExtensionsResponse, error) {
	rsp, err := c.ExtensionServiceGetAllExtensions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionServiceGetAllExtensionsResponse(rsp)
}

// ExtensionServiceGetExtensionWithResponse request returning *ExtensionServiceGetExtensionResponse
func (c *ClientWithResponses) ExtensionServiceGetExtensionWithResponse(ctx context.Context, id string, params *ExtensionServiceGetExtensionParams, reqEditors ...RequestEditorFn) (*ExtensionServiceGetExtensionResponse, error) {
	rsp, err := c.ExtensionServiceGetExtension(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtensionServiceGetExtensionResponse(rsp)
}

// IncidentsServiceListIncidentsWithBodyWithResponse request with arbitrary body returning *IncidentsServiceListIncidentsResponse
func (c *ClientWithResponses) IncidentsServiceListIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentsResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceListIncidentsWithResponse(ctx context.Context, body IncidentsServiceListIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceListIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentsResponse(rsp)
}

// IncidentsServiceGetIncidentWithResponse request returning *IncidentsServiceGetIncidentResponse
func (c *ClientWithResponses) IncidentsServiceGetIncidentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsServiceGetIncidentResponse, error) {
	rsp, err := c.IncidentsServiceGetIncident(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceGetIncidentResponse(rsp)
}

// IncidentsServiceGetIncidentEventsWithResponse request returning *IncidentsServiceGetIncidentEventsResponse
func (c *ClientWithResponses) IncidentsServiceGetIncidentEventsWithResponse(ctx context.Context, incidentId string, reqEditors ...RequestEditorFn) (*IncidentsServiceGetIncidentEventsResponse, error) {
	rsp, err := c.IncidentsServiceGetIncidentEvents(ctx, incidentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceGetIncidentEventsResponse(rsp)
}

// IncidentsServiceAcknowledgeIncidentsWithBodyWithResponse request with arbitrary body returning *IncidentsServiceAcknowledgeIncidentsResponse
func (c *ClientWithResponses) IncidentsServiceAcknowledgeIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceAcknowledgeIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceAcknowledgeIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceAcknowledgeIncidentsResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceAcknowledgeIncidentsWithResponse(ctx context.Context, body IncidentsServiceAcknowledgeIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceAcknowledgeIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceAcknowledgeIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceAcknowledgeIncidentsResponse(rsp)
}

// IncidentsServiceAssignIncidentsWithBodyWithResponse request with arbitrary body returning *IncidentsServiceAssignIncidentsResponse
func (c *ClientWithResponses) IncidentsServiceAssignIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceAssignIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceAssignIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceAssignIncidentsResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceAssignIncidentsWithResponse(ctx context.Context, body IncidentsServiceAssignIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceAssignIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceAssignIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceAssignIncidentsResponse(rsp)
}

// IncidentsServiceBatchGetIncidentWithResponse request returning *IncidentsServiceBatchGetIncidentResponse
func (c *ClientWithResponses) IncidentsServiceBatchGetIncidentWithResponse(ctx context.Context, params *IncidentsServiceBatchGetIncidentParams, reqEditors ...RequestEditorFn) (*IncidentsServiceBatchGetIncidentResponse, error) {
	rsp, err := c.IncidentsServiceBatchGetIncident(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceBatchGetIncidentResponse(rsp)
}

// IncidentsServiceCloseIncidentsWithBodyWithResponse request with arbitrary body returning *IncidentsServiceCloseIncidentsResponse
func (c *ClientWithResponses) IncidentsServiceCloseIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceCloseIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceCloseIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceCloseIncidentsResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceCloseIncidentsWithResponse(ctx context.Context, body IncidentsServiceCloseIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceCloseIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceCloseIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceCloseIncidentsResponse(rsp)
}

// IncidentsServiceGetFilterValuesWithBodyWithResponse request with arbitrary body returning *IncidentsServiceGetFilterValuesResponse
func (c *ClientWithResponses) IncidentsServiceGetFilterValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceGetFilterValuesResponse, error) {
	rsp, err := c.IncidentsServiceGetFilterValuesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceGetFilterValuesResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceGetFilterValuesWithResponse(ctx context.Context, body IncidentsServiceGetFilterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceGetFilterValuesResponse, error) {
	rsp, err := c.IncidentsServiceGetFilterValues(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceGetFilterValuesResponse(rsp)
}

// IncidentsServiceListIncidentEventsWithBodyWithResponse request with arbitrary body returning *IncidentsServiceListIncidentEventsResponse
func (c *ClientWithResponses) IncidentsServiceListIncidentEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentEventsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentEventsResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceListIncidentEventsWithResponse(ctx context.Context, body IncidentsServiceListIncidentEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentEvents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentEventsResponse(rsp)
}

// IncidentsServiceListIncidentEventsFilterValuesWithBodyWithResponse request with arbitrary body returning *IncidentsServiceListIncidentEventsFilterValuesResponse
func (c *ClientWithResponses) IncidentsServiceListIncidentEventsFilterValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsFilterValuesResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentEventsFilterValuesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentEventsFilterValuesResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceListIncidentEventsFilterValuesWithResponse(ctx context.Context, body IncidentsServiceListIncidentEventsFilterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsFilterValuesResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentEventsFilterValues(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentEventsFilterValuesResponse(rsp)
}

// IncidentsServiceListIncidentEventsTotalCountWithBodyWithResponse request with arbitrary body returning *IncidentsServiceListIncidentEventsTotalCountResponse
func (c *ClientWithResponses) IncidentsServiceListIncidentEventsTotalCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsTotalCountResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentEventsTotalCountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentEventsTotalCountResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceListIncidentEventsTotalCountWithResponse(ctx context.Context, body IncidentsServiceListIncidentEventsTotalCountJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentEventsTotalCountResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentEventsTotalCount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentEventsTotalCountResponse(rsp)
}

// IncidentsServiceListIncidentAggregationsWithBodyWithResponse request with arbitrary body returning *IncidentsServiceListIncidentAggregationsResponse
func (c *ClientWithResponses) IncidentsServiceListIncidentAggregationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentAggregationsResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentAggregationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentAggregationsResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceListIncidentAggregationsWithResponse(ctx context.Context, body IncidentsServiceListIncidentAggregationsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceListIncidentAggregationsResponse, error) {
	rsp, err := c.IncidentsServiceListIncidentAggregations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceListIncidentAggregationsResponse(rsp)
}

// IncidentsServiceResolveIncidentsWithBodyWithResponse request with arbitrary body returning *IncidentsServiceResolveIncidentsResponse
func (c *ClientWithResponses) IncidentsServiceResolveIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceResolveIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceResolveIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceResolveIncidentsResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceResolveIncidentsWithResponse(ctx context.Context, body IncidentsServiceResolveIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceResolveIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceResolveIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceResolveIncidentsResponse(rsp)
}

// IncidentsServiceUnassignIncidentsWithBodyWithResponse request with arbitrary body returning *IncidentsServiceUnassignIncidentsResponse
func (c *ClientWithResponses) IncidentsServiceUnassignIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsServiceUnassignIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceUnassignIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceUnassignIncidentsResponse(rsp)
}

func (c *ClientWithResponses) IncidentsServiceUnassignIncidentsWithResponse(ctx context.Context, body IncidentsServiceUnassignIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsServiceUnassignIncidentsResponse, error) {
	rsp, err := c.IncidentsServiceUnassignIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsServiceUnassignIncidentsResponse(rsp)
}

// IntegrationServiceGetIntegrationsWithResponse request returning *IntegrationServiceGetIntegrationsResponse
func (c *ClientWithResponses) IntegrationServiceGetIntegrationsWithResponse(ctx context.Context, params *IntegrationServiceGetIntegrationsParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetIntegrationsResponse, error) {
	rsp, err := c.IntegrationServiceGetIntegrations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceGetIntegrationsResponse(rsp)
}

// IntegrationServiceGetIntegrationDefinitionWithResponse request returning *IntegrationServiceGetIntegrationDefinitionResponse
func (c *ClientWithResponses) IntegrationServiceGetIntegrationDefinitionWithResponse(ctx context.Context, id string, params *IntegrationServiceGetIntegrationDefinitionParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetIntegrationDefinitionResponse, error) {
	rsp, err := c.IntegrationServiceGetIntegrationDefinition(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceGetIntegrationDefinitionResponse(rsp)
}

// IntegrationServiceGetDeployedIntegrationWithResponse request returning *IntegrationServiceGetDeployedIntegrationResponse
func (c *ClientWithResponses) IntegrationServiceGetDeployedIntegrationWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*IntegrationServiceGetDeployedIntegrationResponse, error) {
	rsp, err := c.IntegrationServiceGetDeployedIntegration(ctx, integrationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceGetDeployedIntegrationResponse(rsp)
}

// IntegrationServiceDeleteIntegrationWithResponse request returning *IntegrationServiceDeleteIntegrationResponse
func (c *ClientWithResponses) IntegrationServiceDeleteIntegrationWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*IntegrationServiceDeleteIntegrationResponse, error) {
	rsp, err := c.IntegrationServiceDeleteIntegration(ctx, integrationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceDeleteIntegrationResponse(rsp)
}

// IntegrationServiceListManagedIntegrationKeysWithResponse request returning *IntegrationServiceListManagedIntegrationKeysResponse
func (c *ClientWithResponses) IntegrationServiceListManagedIntegrationKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IntegrationServiceListManagedIntegrationKeysResponse, error) {
	rsp, err := c.IntegrationServiceListManagedIntegrationKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceListManagedIntegrationKeysResponse(rsp)
}

// IntegrationServiceGetManagedIntegrationStatusWithResponse request returning *IntegrationServiceGetManagedIntegrationStatusResponse
func (c *ClientWithResponses) IntegrationServiceGetManagedIntegrationStatusWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*IntegrationServiceGetManagedIntegrationStatusResponse, error) {
	rsp, err := c.IntegrationServiceGetManagedIntegrationStatus(ctx, integrationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceGetManagedIntegrationStatusResponse(rsp)
}

// IntegrationServiceSaveIntegrationWithBodyWithResponse request with arbitrary body returning *IntegrationServiceSaveIntegrationResponse
func (c *ClientWithResponses) IntegrationServiceSaveIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationServiceSaveIntegrationResponse, error) {
	rsp, err := c.IntegrationServiceSaveIntegrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceSaveIntegrationResponse(rsp)
}

func (c *ClientWithResponses) IntegrationServiceSaveIntegrationWithResponse(ctx context.Context, body IntegrationServiceSaveIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationServiceSaveIntegrationResponse, error) {
	rsp, err := c.IntegrationServiceSaveIntegration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceSaveIntegrationResponse(rsp)
}

// IntegrationServiceUpdateIntegrationWithBodyWithResponse request with arbitrary body returning *IntegrationServiceUpdateIntegrationResponse
func (c *ClientWithResponses) IntegrationServiceUpdateIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationServiceUpdateIntegrationResponse, error) {
	rsp, err := c.IntegrationServiceUpdateIntegrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceUpdateIntegrationResponse(rsp)
}

func (c *ClientWithResponses) IntegrationServiceUpdateIntegrationWithResponse(ctx context.Context, body IntegrationServiceUpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationServiceUpdateIntegrationResponse, error) {
	rsp, err := c.IntegrationServiceUpdateIntegration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceUpdateIntegrationResponse(rsp)
}

// IntegrationServiceTestIntegrationWithBodyWithResponse request with arbitrary body returning *IntegrationServiceTestIntegrationResponse
func (c *ClientWithResponses) IntegrationServiceTestIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationServiceTestIntegrationResponse, error) {
	rsp, err := c.IntegrationServiceTestIntegrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceTestIntegrationResponse(rsp)
}

func (c *ClientWithResponses) IntegrationServiceTestIntegrationWithResponse(ctx context.Context, body IntegrationServiceTestIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationServiceTestIntegrationResponse, error) {
	rsp, err := c.IntegrationServiceTestIntegration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceTestIntegrationResponse(rsp)
}

// IntegrationServiceGetRumApplicationVersionDataWithResponse request returning *IntegrationServiceGetRumApplicationVersionDataResponse
func (c *ClientWithResponses) IntegrationServiceGetRumApplicationVersionDataWithResponse(ctx context.Context, params *IntegrationServiceGetRumApplicationVersionDataParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetRumApplicationVersionDataResponse, error) {
	rsp, err := c.IntegrationServiceGetRumApplicationVersionData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceGetRumApplicationVersionDataResponse(rsp)
}

// IntegrationServiceSyncRumDataWithBodyWithResponse request with arbitrary body returning *IntegrationServiceSyncRumDataResponse
func (c *ClientWithResponses) IntegrationServiceSyncRumDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationServiceSyncRumDataResponse, error) {
	rsp, err := c.IntegrationServiceSyncRumDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceSyncRumDataResponse(rsp)
}

func (c *ClientWithResponses) IntegrationServiceSyncRumDataWithResponse(ctx context.Context, body IntegrationServiceSyncRumDataJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationServiceSyncRumDataResponse, error) {
	rsp, err := c.IntegrationServiceSyncRumData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceSyncRumDataResponse(rsp)
}

// IntegrationServiceGetTemplateWithResponse request returning *IntegrationServiceGetTemplateResponse
func (c *ClientWithResponses) IntegrationServiceGetTemplateWithResponse(ctx context.Context, params *IntegrationServiceGetTemplateParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetTemplateResponse, error) {
	rsp, err := c.IntegrationServiceGetTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceGetTemplateResponse(rsp)
}

// IntegrationServiceGetIntegrationDetailsWithResponse request returning *IntegrationServiceGetIntegrationDetailsResponse
func (c *ClientWithResponses) IntegrationServiceGetIntegrationDetailsWithResponse(ctx context.Context, id string, params *IntegrationServiceGetIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*IntegrationServiceGetIntegrationDetailsResponse, error) {
	rsp, err := c.IntegrationServiceGetIntegrationDetails(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationServiceGetIntegrationDetailsResponse(rsp)
}

// MetricsConfiguratorPublicServiceGetTenantConfigWithResponse request returning *MetricsConfiguratorPublicServiceGetTenantConfigResponse
func (c *ClientWithResponses) MetricsConfiguratorPublicServiceGetTenantConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceGetTenantConfigResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceGetTenantConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceGetTenantConfigResponse(rsp)
}

// MetricsConfiguratorPublicServiceConfigureTenantWithBodyWithResponse request with arbitrary body returning *MetricsConfiguratorPublicServiceConfigureTenantResponse
func (c *ClientWithResponses) MetricsConfiguratorPublicServiceConfigureTenantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceConfigureTenantResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceConfigureTenantWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceConfigureTenantResponse(rsp)
}

func (c *ClientWithResponses) MetricsConfiguratorPublicServiceConfigureTenantWithResponse(ctx context.Context, body MetricsConfiguratorPublicServiceConfigureTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceConfigureTenantResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceConfigureTenant(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceConfigureTenantResponse(rsp)
}

// MetricsConfiguratorPublicServiceUpdateWithBodyWithResponse request with arbitrary body returning *MetricsConfiguratorPublicServiceUpdateResponse
func (c *ClientWithResponses) MetricsConfiguratorPublicServiceUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceUpdateResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetricsConfiguratorPublicServiceUpdateWithResponse(ctx context.Context, body MetricsConfiguratorPublicServiceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceUpdateResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceUpdateResponse(rsp)
}

// MetricsConfiguratorPublicServiceDisableArchiveWithResponse request returning *MetricsConfiguratorPublicServiceDisableArchiveResponse
func (c *ClientWithResponses) MetricsConfiguratorPublicServiceDisableArchiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceDisableArchiveResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceDisableArchive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceDisableArchiveResponse(rsp)
}

// MetricsConfiguratorPublicServiceEnableArchiveWithResponse request returning *MetricsConfiguratorPublicServiceEnableArchiveResponse
func (c *ClientWithResponses) MetricsConfiguratorPublicServiceEnableArchiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceEnableArchiveResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceEnableArchive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceEnableArchiveResponse(rsp)
}

// MetricsConfiguratorPublicServiceValidateBucketWithBodyWithResponse request with arbitrary body returning *MetricsConfiguratorPublicServiceValidateBucketResponse
func (c *ClientWithResponses) MetricsConfiguratorPublicServiceValidateBucketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceValidateBucketResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceValidateBucketWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceValidateBucketResponse(rsp)
}

func (c *ClientWithResponses) MetricsConfiguratorPublicServiceValidateBucketWithResponse(ctx context.Context, body MetricsConfiguratorPublicServiceValidateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsConfiguratorPublicServiceValidateBucketResponse, error) {
	rsp, err := c.MetricsConfiguratorPublicServiceValidateBucket(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsConfiguratorPublicServiceValidateBucketResponse(rsp)
}

// ConnectorsServiceReplaceConnectorWithBodyWithResponse request with arbitrary body returning *ConnectorsServiceReplaceConnectorResponse
func (c *ClientWithResponses) ConnectorsServiceReplaceConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConnectorsServiceReplaceConnectorResponse, error) {
	rsp, err := c.ConnectorsServiceReplaceConnectorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceReplaceConnectorResponse(rsp)
}

func (c *ClientWithResponses) ConnectorsServiceReplaceConnectorWithResponse(ctx context.Context, body ConnectorsServiceReplaceConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*ConnectorsServiceReplaceConnectorResponse, error) {
	rsp, err := c.ConnectorsServiceReplaceConnector(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceReplaceConnectorResponse(rsp)
}

// ConnectorsServiceListConnectorsWithResponse request returning *ConnectorsServiceListConnectorsResponse
func (c *ClientWithResponses) ConnectorsServiceListConnectorsWithResponse(ctx context.Context, params *ConnectorsServiceListConnectorsParams, reqEditors ...RequestEditorFn) (*ConnectorsServiceListConnectorsResponse, error) {
	rsp, err := c.ConnectorsServiceListConnectors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceListConnectorsResponse(rsp)
}

// ConnectorsServiceCreateConnectorWithBodyWithResponse request with arbitrary body returning *ConnectorsServiceCreateConnectorResponse
func (c *ClientWithResponses) ConnectorsServiceCreateConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConnectorsServiceCreateConnectorResponse, error) {
	rsp, err := c.ConnectorsServiceCreateConnectorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceCreateConnectorResponse(rsp)
}

func (c *ClientWithResponses) ConnectorsServiceCreateConnectorWithResponse(ctx context.Context, body ConnectorsServiceCreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*ConnectorsServiceCreateConnectorResponse, error) {
	rsp, err := c.ConnectorsServiceCreateConnector(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceCreateConnectorResponse(rsp)
}

// ConnectorsServiceDeleteConnectorWithResponse request returning *ConnectorsServiceDeleteConnectorResponse
func (c *ClientWithResponses) ConnectorsServiceDeleteConnectorWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ConnectorsServiceDeleteConnectorResponse, error) {
	rsp, err := c.ConnectorsServiceDeleteConnector(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceDeleteConnectorResponse(rsp)
}

// ConnectorsServiceGetConnectorWithResponse request returning *ConnectorsServiceGetConnectorResponse
func (c *ClientWithResponses) ConnectorsServiceGetConnectorWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ConnectorsServiceGetConnectorResponse, error) {
	rsp, err := c.ConnectorsServiceGetConnector(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceGetConnectorResponse(rsp)
}

// ConnectorsServiceBatchGetConnectorsWithResponse request returning *ConnectorsServiceBatchGetConnectorsResponse
func (c *ClientWithResponses) ConnectorsServiceBatchGetConnectorsWithResponse(ctx context.Context, params *ConnectorsServiceBatchGetConnectorsParams, reqEditors ...RequestEditorFn) (*ConnectorsServiceBatchGetConnectorsResponse, error) {
	rsp, err := c.ConnectorsServiceBatchGetConnectors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceBatchGetConnectorsResponse(rsp)
}

// ConnectorsServiceBatchGetConnectorSummariesWithResponse request returning *ConnectorsServiceBatchGetConnectorSummariesResponse
func (c *ClientWithResponses) ConnectorsServiceBatchGetConnectorSummariesWithResponse(ctx context.Context, params *ConnectorsServiceBatchGetConnectorSummariesParams, reqEditors ...RequestEditorFn) (*ConnectorsServiceBatchGetConnectorSummariesResponse, error) {
	rsp, err := c.ConnectorsServiceBatchGetConnectorSummaries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceBatchGetConnectorSummariesResponse(rsp)
}

// ConnectorsServiceGetConnectorTypeSummariesWithResponse request returning *ConnectorsServiceGetConnectorTypeSummariesResponse
func (c *ClientWithResponses) ConnectorsServiceGetConnectorTypeSummariesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConnectorsServiceGetConnectorTypeSummariesResponse, error) {
	rsp, err := c.ConnectorsServiceGetConnectorTypeSummaries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceGetConnectorTypeSummariesResponse(rsp)
}

// ConnectorsServiceListConnectorSummariesWithResponse request returning *ConnectorsServiceListConnectorSummariesResponse
func (c *ClientWithResponses) ConnectorsServiceListConnectorSummariesWithResponse(ctx context.Context, params *ConnectorsServiceListConnectorSummariesParams, reqEditors ...RequestEditorFn) (*ConnectorsServiceListConnectorSummariesResponse, error) {
	rsp, err := c.ConnectorsServiceListConnectorSummaries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectorsServiceListConnectorSummariesResponse(rsp)
}

// EntitiesServiceListEntityTypesWithResponse request returning *EntitiesServiceListEntityTypesResponse
func (c *ClientWithResponses) EntitiesServiceListEntityTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EntitiesServiceListEntityTypesResponse, error) {
	rsp, err := c.EntitiesServiceListEntityTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntitiesServiceListEntityTypesResponse(rsp)
}

// EntitiesServiceListEntitySubTypesWithResponse request returning *EntitiesServiceListEntitySubTypesResponse
func (c *ClientWithResponses) EntitiesServiceListEntitySubTypesWithResponse(ctx context.Context, entityType EntitiesServiceListEntitySubTypesParamsEntityType, reqEditors ...RequestEditorFn) (*EntitiesServiceListEntitySubTypesResponse, error) {
	rsp, err := c.EntitiesServiceListEntitySubTypes(ctx, entityType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEntitiesServiceListEntitySubTypesResponse(rsp)
}

// TestingServiceTestConnectorConfigWithBodyWithResponse request with arbitrary body returning *TestingServiceTestConnectorConfigResponse
func (c *ClientWithResponses) TestingServiceTestConnectorConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestConnectorConfigResponse, error) {
	rsp, err := c.TestingServiceTestConnectorConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestConnectorConfigResponse(rsp)
}

func (c *ClientWithResponses) TestingServiceTestConnectorConfigWithResponse(ctx context.Context, body TestingServiceTestConnectorConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestConnectorConfigResponse, error) {
	rsp, err := c.TestingServiceTestConnectorConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestConnectorConfigResponse(rsp)
}

// TestingServiceTestDestinationWithBodyWithResponse request with arbitrary body returning *TestingServiceTestDestinationResponse
func (c *ClientWithResponses) TestingServiceTestDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestDestinationResponse, error) {
	rsp, err := c.TestingServiceTestDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestDestinationResponse(rsp)
}

func (c *ClientWithResponses) TestingServiceTestDestinationWithResponse(ctx context.Context, body TestingServiceTestDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestDestinationResponse, error) {
	rsp, err := c.TestingServiceTestDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestDestinationResponse(rsp)
}

// TestingServiceTestExistingConnectorWithBodyWithResponse request with arbitrary body returning *TestingServiceTestExistingConnectorResponse
func (c *ClientWithResponses) TestingServiceTestExistingConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestExistingConnectorResponse, error) {
	rsp, err := c.TestingServiceTestExistingConnectorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestExistingConnectorResponse(rsp)
}

func (c *ClientWithResponses) TestingServiceTestExistingConnectorWithResponse(ctx context.Context, body TestingServiceTestExistingConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestExistingConnectorResponse, error) {
	rsp, err := c.TestingServiceTestExistingConnector(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestExistingConnectorResponse(rsp)
}

// TestingServiceTestExistingPresetWithBodyWithResponse request with arbitrary body returning *TestingServiceTestExistingPresetResponse
func (c *ClientWithResponses) TestingServiceTestExistingPresetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestExistingPresetResponse, error) {
	rsp, err := c.TestingServiceTestExistingPresetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestExistingPresetResponse(rsp)
}

func (c *ClientWithResponses) TestingServiceTestExistingPresetWithResponse(ctx context.Context, body TestingServiceTestExistingPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestExistingPresetResponse, error) {
	rsp, err := c.TestingServiceTestExistingPreset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestExistingPresetResponse(rsp)
}

// TestingServiceTestPresetConfigWithBodyWithResponse request with arbitrary body returning *TestingServiceTestPresetConfigResponse
func (c *ClientWithResponses) TestingServiceTestPresetConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestPresetConfigResponse, error) {
	rsp, err := c.TestingServiceTestPresetConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestPresetConfigResponse(rsp)
}

func (c *ClientWithResponses) TestingServiceTestPresetConfigWithResponse(ctx context.Context, body TestingServiceTestPresetConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestPresetConfigResponse, error) {
	rsp, err := c.TestingServiceTestPresetConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestPresetConfigResponse(rsp)
}

// TestingServiceTestRoutingConditionValidWithBodyWithResponse request with arbitrary body returning *TestingServiceTestRoutingConditionValidResponse
func (c *ClientWithResponses) TestingServiceTestRoutingConditionValidWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestRoutingConditionValidResponse, error) {
	rsp, err := c.TestingServiceTestRoutingConditionValidWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestRoutingConditionValidResponse(rsp)
}

func (c *ClientWithResponses) TestingServiceTestRoutingConditionValidWithResponse(ctx context.Context, body TestingServiceTestRoutingConditionValidJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestRoutingConditionValidResponse, error) {
	rsp, err := c.TestingServiceTestRoutingConditionValid(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestRoutingConditionValidResponse(rsp)
}

// TestingServiceTestTemplateRenderWithBodyWithResponse request with arbitrary body returning *TestingServiceTestTemplateRenderResponse
func (c *ClientWithResponses) TestingServiceTestTemplateRenderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestingServiceTestTemplateRenderResponse, error) {
	rsp, err := c.TestingServiceTestTemplateRenderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestTemplateRenderResponse(rsp)
}

func (c *ClientWithResponses) TestingServiceTestTemplateRenderWithResponse(ctx context.Context, body TestingServiceTestTemplateRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*TestingServiceTestTemplateRenderResponse, error) {
	rsp, err := c.TestingServiceTestTemplateRender(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestingServiceTestTemplateRenderResponse(rsp)
}

// PresetsServiceCreateCustomPresetWithBodyWithResponse request with arbitrary body returning *PresetsServiceCreateCustomPresetResponse
func (c *ClientWithResponses) PresetsServiceCreateCustomPresetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PresetsServiceCreateCustomPresetResponse, error) {
	rsp, err := c.PresetsServiceCreateCustomPresetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceCreateCustomPresetResponse(rsp)
}

func (c *ClientWithResponses) PresetsServiceCreateCustomPresetWithResponse(ctx context.Context, body PresetsServiceCreateCustomPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*PresetsServiceCreateCustomPresetResponse, error) {
	rsp, err := c.PresetsServiceCreateCustomPreset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceCreateCustomPresetResponse(rsp)
}

// PresetsServiceReplaceCustomPresetWithBodyWithResponse request with arbitrary body returning *PresetsServiceReplaceCustomPresetResponse
func (c *ClientWithResponses) PresetsServiceReplaceCustomPresetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PresetsServiceReplaceCustomPresetResponse, error) {
	rsp, err := c.PresetsServiceReplaceCustomPresetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceReplaceCustomPresetResponse(rsp)
}

func (c *ClientWithResponses) PresetsServiceReplaceCustomPresetWithResponse(ctx context.Context, body PresetsServiceReplaceCustomPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*PresetsServiceReplaceCustomPresetResponse, error) {
	rsp, err := c.PresetsServiceReplaceCustomPreset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceReplaceCustomPresetResponse(rsp)
}

// PresetsServiceDeleteCustomPresetWithResponse request returning *PresetsServiceDeleteCustomPresetResponse
func (c *ClientWithResponses) PresetsServiceDeleteCustomPresetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PresetsServiceDeleteCustomPresetResponse, error) {
	rsp, err := c.PresetsServiceDeleteCustomPreset(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceDeleteCustomPresetResponse(rsp)
}

// PresetsServiceSetCustomPresetAsDefaultWithResponse request returning *PresetsServiceSetCustomPresetAsDefaultResponse
func (c *ClientWithResponses) PresetsServiceSetCustomPresetAsDefaultWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PresetsServiceSetCustomPresetAsDefaultResponse, error) {
	rsp, err := c.PresetsServiceSetCustomPresetAsDefault(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceSetCustomPresetAsDefaultResponse(rsp)
}

// PresetsServiceGetPresetWithResponse request returning *PresetsServiceGetPresetResponse
func (c *ClientWithResponses) PresetsServiceGetPresetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PresetsServiceGetPresetResponse, error) {
	rsp, err := c.PresetsServiceGetPreset(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceGetPresetResponse(rsp)
}

// PresetsServiceSetPresetAsDefaultWithResponse request returning *PresetsServiceSetPresetAsDefaultResponse
func (c *ClientWithResponses) PresetsServiceSetPresetAsDefaultWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PresetsServiceSetPresetAsDefaultResponse, error) {
	rsp, err := c.PresetsServiceSetPresetAsDefault(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceSetPresetAsDefaultResponse(rsp)
}

// PresetsServiceBatchGetPresetsWithResponse request returning *PresetsServiceBatchGetPresetsResponse
func (c *ClientWithResponses) PresetsServiceBatchGetPresetsWithResponse(ctx context.Context, params *PresetsServiceBatchGetPresetsParams, reqEditors ...RequestEditorFn) (*PresetsServiceBatchGetPresetsResponse, error) {
	rsp, err := c.PresetsServiceBatchGetPresets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceBatchGetPresetsResponse(rsp)
}

// PresetsServiceGetDefaultPresetSummaryWithResponse request returning *PresetsServiceGetDefaultPresetSummaryResponse
func (c *ClientWithResponses) PresetsServiceGetDefaultPresetSummaryWithResponse(ctx context.Context, params *PresetsServiceGetDefaultPresetSummaryParams, reqEditors ...RequestEditorFn) (*PresetsServiceGetDefaultPresetSummaryResponse, error) {
	rsp, err := c.PresetsServiceGetDefaultPresetSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceGetDefaultPresetSummaryResponse(rsp)
}

// PresetsServiceListPresetSummariesWithResponse request returning *PresetsServiceListPresetSummariesResponse
func (c *ClientWithResponses) PresetsServiceListPresetSummariesWithResponse(ctx context.Context, params *PresetsServiceListPresetSummariesParams, reqEditors ...RequestEditorFn) (*PresetsServiceListPresetSummariesResponse, error) {
	rsp, err := c.PresetsServiceListPresetSummaries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceListPresetSummariesResponse(rsp)
}

// PresetsServiceGetSystemDefaultPresetSummaryWithResponse request returning *PresetsServiceGetSystemDefaultPresetSummaryResponse
func (c *ClientWithResponses) PresetsServiceGetSystemDefaultPresetSummaryWithResponse(ctx context.Context, params *PresetsServiceGetSystemDefaultPresetSummaryParams, reqEditors ...RequestEditorFn) (*PresetsServiceGetSystemDefaultPresetSummaryResponse, error) {
	rsp, err := c.PresetsServiceGetSystemDefaultPresetSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresetsServiceGetSystemDefaultPresetSummaryResponse(rsp)
}

// GlobalRoutersServiceListGlobalRoutersWithResponse request returning *GlobalRoutersServiceListGlobalRoutersResponse
func (c *ClientWithResponses) GlobalRoutersServiceListGlobalRoutersWithResponse(ctx context.Context, params *GlobalRoutersServiceListGlobalRoutersParams, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceListGlobalRoutersResponse, error) {
	rsp, err := c.GlobalRoutersServiceListGlobalRouters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRoutersServiceListGlobalRoutersResponse(rsp)
}

// GlobalRoutersServiceCreateGlobalRouterWithBodyWithResponse request with arbitrary body returning *GlobalRoutersServiceCreateGlobalRouterResponse
func (c *ClientWithResponses) GlobalRoutersServiceCreateGlobalRouterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceCreateGlobalRouterResponse, error) {
	rsp, err := c.GlobalRoutersServiceCreateGlobalRouterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRoutersServiceCreateGlobalRouterResponse(rsp)
}

func (c *ClientWithResponses) GlobalRoutersServiceCreateGlobalRouterWithResponse(ctx context.Context, body GlobalRoutersServiceCreateGlobalRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceCreateGlobalRouterResponse, error) {
	rsp, err := c.GlobalRoutersServiceCreateGlobalRouter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRoutersServiceCreateGlobalRouterResponse(rsp)
}

// GlobalRoutersServiceReplaceGlobalRouterWithBodyWithResponse request with arbitrary body returning *GlobalRoutersServiceReplaceGlobalRouterResponse
func (c *ClientWithResponses) GlobalRoutersServiceReplaceGlobalRouterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceReplaceGlobalRouterResponse, error) {
	rsp, err := c.GlobalRoutersServiceReplaceGlobalRouterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRoutersServiceReplaceGlobalRouterResponse(rsp)
}

func (c *ClientWithResponses) GlobalRoutersServiceReplaceGlobalRouterWithResponse(ctx context.Context, body GlobalRoutersServiceReplaceGlobalRouterJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceReplaceGlobalRouterResponse, error) {
	rsp, err := c.GlobalRoutersServiceReplaceGlobalRouter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRoutersServiceReplaceGlobalRouterResponse(rsp)
}

// GlobalRoutersServiceDeleteGlobalRouterWithResponse request returning *GlobalRoutersServiceDeleteGlobalRouterResponse
func (c *ClientWithResponses) GlobalRoutersServiceDeleteGlobalRouterWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceDeleteGlobalRouterResponse, error) {
	rsp, err := c.GlobalRoutersServiceDeleteGlobalRouter(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRoutersServiceDeleteGlobalRouterResponse(rsp)
}

// GlobalRoutersServiceGetGlobalRouterWithResponse request returning *GlobalRoutersServiceGetGlobalRouterResponse
func (c *ClientWithResponses) GlobalRoutersServiceGetGlobalRouterWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceGetGlobalRouterResponse, error) {
	rsp, err := c.GlobalRoutersServiceGetGlobalRouter(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRoutersServiceGetGlobalRouterResponse(rsp)
}

// GlobalRoutersServiceBatchGetGlobalRoutersWithResponse request returning *GlobalRoutersServiceBatchGetGlobalRoutersResponse
func (c *ClientWithResponses) GlobalRoutersServiceBatchGetGlobalRoutersWithResponse(ctx context.Context, params *GlobalRoutersServiceBatchGetGlobalRoutersParams, reqEditors ...RequestEditorFn) (*GlobalRoutersServiceBatchGetGlobalRoutersResponse, error) {
	rsp, err := c.GlobalRoutersServiceBatchGetGlobalRouters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRoutersServiceBatchGetGlobalRoutersResponse(rsp)
}

// OutgoingWebhooksServiceCreateOutgoingWebhookWithBodyWithResponse request with arbitrary body returning *OutgoingWebhooksServiceCreateOutgoingWebhookResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceCreateOutgoingWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceCreateOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceCreateOutgoingWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceCreateOutgoingWebhookResponse(rsp)
}

func (c *ClientWithResponses) OutgoingWebhooksServiceCreateOutgoingWebhookWithResponse(ctx context.Context, body OutgoingWebhooksServiceCreateOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceCreateOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceCreateOutgoingWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceCreateOutgoingWebhookResponse(rsp)
}

// OutgoingWebhooksServiceUpdateOutgoingWebhookWithBodyWithResponse request with arbitrary body returning *OutgoingWebhooksServiceUpdateOutgoingWebhookResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceUpdateOutgoingWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceUpdateOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceUpdateOutgoingWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceUpdateOutgoingWebhookResponse(rsp)
}

func (c *ClientWithResponses) OutgoingWebhooksServiceUpdateOutgoingWebhookWithResponse(ctx context.Context, body OutgoingWebhooksServiceUpdateOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceUpdateOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceUpdateOutgoingWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceUpdateOutgoingWebhookResponse(rsp)
}

// OutgoingWebhooksServiceListOutgoingWebhookTypesWithResponse request returning *OutgoingWebhooksServiceListOutgoingWebhookTypesResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceListOutgoingWebhookTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListOutgoingWebhookTypesResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceListOutgoingWebhookTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceListOutgoingWebhookTypesResponse(rsp)
}

// OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsWithResponse request returning *OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsWithResponse(ctx context.Context, pType OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsParamsType, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceGetOutgoingWebhookTypeDetails(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse(rsp)
}

// OutgoingWebhooksServiceListIbmEventNotificationsInstancesWithResponse request returning *OutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceListIbmEventNotificationsInstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceListIbmEventNotificationsInstances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse(rsp)
}

// OutgoingWebhooksServiceTestOutgoingWebhookWithBodyWithResponse request with arbitrary body returning *OutgoingWebhooksServiceTestOutgoingWebhookResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceTestOutgoingWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceTestOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceTestOutgoingWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceTestOutgoingWebhookResponse(rsp)
}

func (c *ClientWithResponses) OutgoingWebhooksServiceTestOutgoingWebhookWithResponse(ctx context.Context, body OutgoingWebhooksServiceTestOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceTestOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceTestOutgoingWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceTestOutgoingWebhookResponse(rsp)
}

// OutgoingWebhooksServiceTestExistingOutgoingWebhookWithBodyWithResponse request with arbitrary body returning *OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceTestExistingOutgoingWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceTestExistingOutgoingWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceTestExistingOutgoingWebhookResponse(rsp)
}

func (c *ClientWithResponses) OutgoingWebhooksServiceTestExistingOutgoingWebhookWithResponse(ctx context.Context, body OutgoingWebhooksServiceTestExistingOutgoingWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceTestExistingOutgoingWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceTestExistingOutgoingWebhookResponse(rsp)
}

// OutgoingWebhooksServiceDeleteOutgoingWebhookWithResponse request returning *OutgoingWebhooksServiceDeleteOutgoingWebhookResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceDeleteOutgoingWebhookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceDeleteOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceDeleteOutgoingWebhook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceDeleteOutgoingWebhookResponse(rsp)
}

// OutgoingWebhooksServiceGetOutgoingWebhookWithResponse request returning *OutgoingWebhooksServiceGetOutgoingWebhookResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceGetOutgoingWebhookWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceGetOutgoingWebhookResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceGetOutgoingWebhook(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceGetOutgoingWebhookResponse(rsp)
}

// OutgoingWebhooksServiceListOutgoingWebhooksWithResponse request returning *OutgoingWebhooksServiceListOutgoingWebhooksResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceListOutgoingWebhooksWithResponse(ctx context.Context, params *OutgoingWebhooksServiceListOutgoingWebhooksParams, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListOutgoingWebhooksResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceListOutgoingWebhooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceListOutgoingWebhooksResponse(rsp)
}

// OutgoingWebhooksServiceListAllOutgoingWebhooksWithResponse request returning *OutgoingWebhooksServiceListAllOutgoingWebhooksResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceListAllOutgoingWebhooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListAllOutgoingWebhooksResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceListAllOutgoingWebhooks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceListAllOutgoingWebhooksResponse(rsp)
}

// OutgoingWebhooksServiceListOutboundWebhooksSummaryWithResponse request returning *OutgoingWebhooksServiceListOutboundWebhooksSummaryResponse
func (c *ClientWithResponses) OutgoingWebhooksServiceListOutboundWebhooksSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OutgoingWebhooksServiceListOutboundWebhooksSummaryResponse, error) {
	rsp, err := c.OutgoingWebhooksServiceListOutboundWebhooksSummary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOutgoingWebhooksServiceListOutboundWebhooksSummaryResponse(rsp)
}

// PoliciesServiceGetCompanyPoliciesWithResponse request returning *PoliciesServiceGetCompanyPoliciesResponse
func (c *ClientWithResponses) PoliciesServiceGetCompanyPoliciesWithResponse(ctx context.Context, params *PoliciesServiceGetCompanyPoliciesParams, reqEditors ...RequestEditorFn) (*PoliciesServiceGetCompanyPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceGetCompanyPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceGetCompanyPoliciesResponse(rsp)
}

// PoliciesServiceCreatePolicyWithBodyWithResponse request with arbitrary body returning *PoliciesServiceCreatePolicyResponse
func (c *ClientWithResponses) PoliciesServiceCreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceCreatePolicyResponse, error) {
	rsp, err := c.PoliciesServiceCreatePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceCreatePolicyResponse(rsp)
}

func (c *ClientWithResponses) PoliciesServiceCreatePolicyWithResponse(ctx context.Context, body PoliciesServiceCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceCreatePolicyResponse, error) {
	rsp, err := c.PoliciesServiceCreatePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceCreatePolicyResponse(rsp)
}

// PoliciesServiceUpdatePolicyWithBodyWithResponse request with arbitrary body returning *PoliciesServiceUpdatePolicyResponse
func (c *ClientWithResponses) PoliciesServiceUpdatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceUpdatePolicyResponse, error) {
	rsp, err := c.PoliciesServiceUpdatePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceUpdatePolicyResponse(rsp)
}

func (c *ClientWithResponses) PoliciesServiceUpdatePolicyWithResponse(ctx context.Context, body PoliciesServiceUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceUpdatePolicyResponse, error) {
	rsp, err := c.PoliciesServiceUpdatePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceUpdatePolicyResponse(rsp)
}

// PoliciesServiceDeletePolicyWithResponse request returning *PoliciesServiceDeletePolicyResponse
func (c *ClientWithResponses) PoliciesServiceDeletePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PoliciesServiceDeletePolicyResponse, error) {
	rsp, err := c.PoliciesServiceDeletePolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceDeletePolicyResponse(rsp)
}

// PoliciesServiceGetPolicyWithResponse request returning *PoliciesServiceGetPolicyResponse
func (c *ClientWithResponses) PoliciesServiceGetPolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PoliciesServiceGetPolicyResponse, error) {
	rsp, err := c.PoliciesServiceGetPolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceGetPolicyResponse(rsp)
}

// PoliciesServiceAtomicOverwriteLogPoliciesWithBodyWithResponse request with arbitrary body returning *PoliciesServiceAtomicOverwriteLogPoliciesResponse
func (c *ClientWithResponses) PoliciesServiceAtomicOverwriteLogPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicOverwriteLogPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceAtomicOverwriteLogPoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceAtomicOverwriteLogPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PoliciesServiceAtomicOverwriteLogPoliciesWithResponse(ctx context.Context, body PoliciesServiceAtomicOverwriteLogPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicOverwriteLogPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceAtomicOverwriteLogPolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceAtomicOverwriteLogPoliciesResponse(rsp)
}

// PoliciesServiceAtomicOverwriteSpanPoliciesWithBodyWithResponse request with arbitrary body returning *PoliciesServiceAtomicOverwriteSpanPoliciesResponse
func (c *ClientWithResponses) PoliciesServiceAtomicOverwriteSpanPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicOverwriteSpanPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceAtomicOverwriteSpanPoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceAtomicOverwriteSpanPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PoliciesServiceAtomicOverwriteSpanPoliciesWithResponse(ctx context.Context, body PoliciesServiceAtomicOverwriteSpanPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicOverwriteSpanPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceAtomicOverwriteSpanPolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceAtomicOverwriteSpanPoliciesResponse(rsp)
}

// PoliciesServiceAtomicBatchCreatePolicyWithBodyWithResponse request with arbitrary body returning *PoliciesServiceAtomicBatchCreatePolicyResponse
func (c *ClientWithResponses) PoliciesServiceAtomicBatchCreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicBatchCreatePolicyResponse, error) {
	rsp, err := c.PoliciesServiceAtomicBatchCreatePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceAtomicBatchCreatePolicyResponse(rsp)
}

func (c *ClientWithResponses) PoliciesServiceAtomicBatchCreatePolicyWithResponse(ctx context.Context, body PoliciesServiceAtomicBatchCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceAtomicBatchCreatePolicyResponse, error) {
	rsp, err := c.PoliciesServiceAtomicBatchCreatePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceAtomicBatchCreatePolicyResponse(rsp)
}

// PoliciesServiceBulkTestLogPoliciesWithBodyWithResponse request with arbitrary body returning *PoliciesServiceBulkTestLogPoliciesResponse
func (c *ClientWithResponses) PoliciesServiceBulkTestLogPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceBulkTestLogPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceBulkTestLogPoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceBulkTestLogPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PoliciesServiceBulkTestLogPoliciesWithResponse(ctx context.Context, body PoliciesServiceBulkTestLogPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceBulkTestLogPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceBulkTestLogPolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceBulkTestLogPoliciesResponse(rsp)
}

// PoliciesServiceReorderPoliciesWithBodyWithResponse request with arbitrary body returning *PoliciesServiceReorderPoliciesResponse
func (c *ClientWithResponses) PoliciesServiceReorderPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceReorderPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceReorderPoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceReorderPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PoliciesServiceReorderPoliciesWithResponse(ctx context.Context, body PoliciesServiceReorderPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceReorderPoliciesResponse, error) {
	rsp, err := c.PoliciesServiceReorderPolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceReorderPoliciesResponse(rsp)
}

// PoliciesServiceTogglePolicyWithBodyWithResponse request with arbitrary body returning *PoliciesServiceTogglePolicyResponse
func (c *ClientWithResponses) PoliciesServiceTogglePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesServiceTogglePolicyResponse, error) {
	rsp, err := c.PoliciesServiceTogglePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceTogglePolicyResponse(rsp)
}

func (c *ClientWithResponses) PoliciesServiceTogglePolicyWithResponse(ctx context.Context, body PoliciesServiceTogglePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesServiceTogglePolicyResponse, error) {
	rsp, err := c.PoliciesServiceTogglePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesServiceTogglePolicyResponse(rsp)
}

// RetentionsServiceGetRetentionsWithResponse request returning *RetentionsServiceGetRetentionsResponse
func (c *ClientWithResponses) RetentionsServiceGetRetentionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetentionsServiceGetRetentionsResponse, error) {
	rsp, err := c.RetentionsServiceGetRetentions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetentionsServiceGetRetentionsResponse(rsp)
}

// RetentionsServiceUpdateRetentionsWithBodyWithResponse request with arbitrary body returning *RetentionsServiceUpdateRetentionsResponse
func (c *ClientWithResponses) RetentionsServiceUpdateRetentionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetentionsServiceUpdateRetentionsResponse, error) {
	rsp, err := c.RetentionsServiceUpdateRetentionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetentionsServiceUpdateRetentionsResponse(rsp)
}

func (c *ClientWithResponses) RetentionsServiceUpdateRetentionsWithResponse(ctx context.Context, body RetentionsServiceUpdateRetentionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RetentionsServiceUpdateRetentionsResponse, error) {
	rsp, err := c.RetentionsServiceUpdateRetentions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetentionsServiceUpdateRetentionsResponse(rsp)
}

// RetentionsServiceGetRetentionsEnabledWithResponse request returning *RetentionsServiceGetRetentionsEnabledResponse
func (c *ClientWithResponses) RetentionsServiceGetRetentionsEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetentionsServiceGetRetentionsEnabledResponse, error) {
	rsp, err := c.RetentionsServiceGetRetentionsEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetentionsServiceGetRetentionsEnabledResponse(rsp)
}

// RetentionsServiceActivateRetentionsWithBodyWithResponse request with arbitrary body returning *RetentionsServiceActivateRetentionsResponse
func (c *ClientWithResponses) RetentionsServiceActivateRetentionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetentionsServiceActivateRetentionsResponse, error) {
	rsp, err := c.RetentionsServiceActivateRetentionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetentionsServiceActivateRetentionsResponse(rsp)
}

func (c *ClientWithResponses) RetentionsServiceActivateRetentionsWithResponse(ctx context.Context, body RetentionsServiceActivateRetentionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RetentionsServiceActivateRetentionsResponse, error) {
	rsp, err := c.RetentionsServiceActivateRetentions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetentionsServiceActivateRetentionsResponse(rsp)
}

// RuleGroupSetsListWithResponse request returning *RuleGroupSetsListResponse
func (c *ClientWithResponses) RuleGroupSetsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RuleGroupSetsListResponse, error) {
	rsp, err := c.RuleGroupSetsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupSetsListResponse(rsp)
}

// RuleGroupSetsCreateWithBodyWithResponse request with arbitrary body returning *RuleGroupSetsCreateResponse
func (c *ClientWithResponses) RuleGroupSetsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupSetsCreateResponse, error) {
	rsp, err := c.RuleGroupSetsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupSetsCreateResponse(rsp)
}

func (c *ClientWithResponses) RuleGroupSetsCreateWithResponse(ctx context.Context, body RuleGroupSetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupSetsCreateResponse, error) {
	rsp, err := c.RuleGroupSetsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupSetsCreateResponse(rsp)
}

// RuleGroupSetsDeleteWithResponse request returning *RuleGroupSetsDeleteResponse
func (c *ClientWithResponses) RuleGroupSetsDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RuleGroupSetsDeleteResponse, error) {
	rsp, err := c.RuleGroupSetsDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupSetsDeleteResponse(rsp)
}

// RuleGroupSetsFetchWithResponse request returning *RuleGroupSetsFetchResponse
func (c *ClientWithResponses) RuleGroupSetsFetchWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RuleGroupSetsFetchResponse, error) {
	rsp, err := c.RuleGroupSetsFetch(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupSetsFetchResponse(rsp)
}

// RuleGroupSetsUpdateWithBodyWithResponse request with arbitrary body returning *RuleGroupSetsUpdateResponse
func (c *ClientWithResponses) RuleGroupSetsUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RuleGroupSetsUpdateResponse, error) {
	rsp, err := c.RuleGroupSetsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupSetsUpdateResponse(rsp)
}

func (c *ClientWithResponses) RuleGroupSetsUpdateWithResponse(ctx context.Context, id string, body RuleGroupSetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RuleGroupSetsUpdateResponse, error) {
	rsp, err := c.RuleGroupSetsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRuleGroupSetsUpdateResponse(rsp)
}

// ScopesServiceGetTeamScopesByIdsWithResponse request returning *ScopesServiceGetTeamScopesByIdsResponse
func (c *ClientWithResponses) ScopesServiceGetTeamScopesByIdsWithResponse(ctx context.Context, params *ScopesServiceGetTeamScopesByIdsParams, reqEditors ...RequestEditorFn) (*ScopesServiceGetTeamScopesByIdsResponse, error) {
	rsp, err := c.ScopesServiceGetTeamScopesByIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScopesServiceGetTeamScopesByIdsResponse(rsp)
}

// ScopesServiceCreateScopeWithBodyWithResponse request with arbitrary body returning *ScopesServiceCreateScopeResponse
func (c *ClientWithResponses) ScopesServiceCreateScopeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScopesServiceCreateScopeResponse, error) {
	rsp, err := c.ScopesServiceCreateScopeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScopesServiceCreateScopeResponse(rsp)
}

func (c *ClientWithResponses) ScopesServiceCreateScopeWithResponse(ctx context.Context, body ScopesServiceCreateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*ScopesServiceCreateScopeResponse, error) {
	rsp, err := c.ScopesServiceCreateScope(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScopesServiceCreateScopeResponse(rsp)
}

// ScopesServiceUpdateScopeWithBodyWithResponse request with arbitrary body returning *ScopesServiceUpdateScopeResponse
func (c *ClientWithResponses) ScopesServiceUpdateScopeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScopesServiceUpdateScopeResponse, error) {
	rsp, err := c.ScopesServiceUpdateScopeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScopesServiceUpdateScopeResponse(rsp)
}

func (c *ClientWithResponses) ScopesServiceUpdateScopeWithResponse(ctx context.Context, body ScopesServiceUpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*ScopesServiceUpdateScopeResponse, error) {
	rsp, err := c.ScopesServiceUpdateScope(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScopesServiceUpdateScopeResponse(rsp)
}

// ScopesServiceGetTeamScopesWithResponse request returning *ScopesServiceGetTeamScopesResponse
func (c *ClientWithResponses) ScopesServiceGetTeamScopesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ScopesServiceGetTeamScopesResponse, error) {
	rsp, err := c.ScopesServiceGetTeamScopes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScopesServiceGetTeamScopesResponse(rsp)
}

// ScopesServiceDeleteScopeWithResponse request returning *ScopesServiceDeleteScopeResponse
func (c *ClientWithResponses) ScopesServiceDeleteScopeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ScopesServiceDeleteScopeResponse, error) {
	rsp, err := c.ScopesServiceDeleteScope(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScopesServiceDeleteScopeResponse(rsp)
}

// SlosServiceListSlosWithResponse request returning *SlosServiceListSlosResponse
func (c *ClientWithResponses) SlosServiceListSlosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlosServiceListSlosResponse, error) {
	rsp, err := c.SlosServiceListSlos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceListSlosResponse(rsp)
}

// SlosServiceCreateSloWithBodyWithResponse request with arbitrary body returning *SlosServiceCreateSloResponse
func (c *ClientWithResponses) SlosServiceCreateSloWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlosServiceCreateSloResponse, error) {
	rsp, err := c.SlosServiceCreateSloWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceCreateSloResponse(rsp)
}

func (c *ClientWithResponses) SlosServiceCreateSloWithResponse(ctx context.Context, body SlosServiceCreateSloJSONRequestBody, reqEditors ...RequestEditorFn) (*SlosServiceCreateSloResponse, error) {
	rsp, err := c.SlosServiceCreateSlo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceCreateSloResponse(rsp)
}

// SlosServiceReplaceSloWithBodyWithResponse request with arbitrary body returning *SlosServiceReplaceSloResponse
func (c *ClientWithResponses) SlosServiceReplaceSloWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlosServiceReplaceSloResponse, error) {
	rsp, err := c.SlosServiceReplaceSloWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceReplaceSloResponse(rsp)
}

func (c *ClientWithResponses) SlosServiceReplaceSloWithResponse(ctx context.Context, body SlosServiceReplaceSloJSONRequestBody, reqEditors ...RequestEditorFn) (*SlosServiceReplaceSloResponse, error) {
	rsp, err := c.SlosServiceReplaceSlo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceReplaceSloResponse(rsp)
}

// SlosServiceDeleteSloWithResponse request returning *SlosServiceDeleteSloResponse
func (c *ClientWithResponses) SlosServiceDeleteSloWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlosServiceDeleteSloResponse, error) {
	rsp, err := c.SlosServiceDeleteSlo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceDeleteSloResponse(rsp)
}

// SlosServiceGetSloWithResponse request returning *SlosServiceGetSloResponse
func (c *ClientWithResponses) SlosServiceGetSloWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlosServiceGetSloResponse, error) {
	rsp, err := c.SlosServiceGetSlo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceGetSloResponse(rsp)
}

// SlosServiceBatchExecuteSloWithResponse request returning *SlosServiceBatchExecuteSloResponse
func (c *ClientWithResponses) SlosServiceBatchExecuteSloWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlosServiceBatchExecuteSloResponse, error) {
	rsp, err := c.SlosServiceBatchExecuteSlo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceBatchExecuteSloResponse(rsp)
}

// SlosServiceBatchGetSlosWithResponse request returning *SlosServiceBatchGetSlosResponse
func (c *ClientWithResponses) SlosServiceBatchGetSlosWithResponse(ctx context.Context, params *SlosServiceBatchGetSlosParams, reqEditors ...RequestEditorFn) (*SlosServiceBatchGetSlosResponse, error) {
	rsp, err := c.SlosServiceBatchGetSlos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlosServiceBatchGetSlosResponse(rsp)
}

// SamlConfigurationServiceSetActiveWithBodyWithResponse request with arbitrary body returning *SamlConfigurationServiceSetActiveResponse
func (c *ClientWithResponses) SamlConfigurationServiceSetActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceSetActiveResponse, error) {
	rsp, err := c.SamlConfigurationServiceSetActiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSamlConfigurationServiceSetActiveResponse(rsp)
}

func (c *ClientWithResponses) SamlConfigurationServiceSetActiveWithResponse(ctx context.Context, body SamlConfigurationServiceSetActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceSetActiveResponse, error) {
	rsp, err := c.SamlConfigurationServiceSetActive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSamlConfigurationServiceSetActiveResponse(rsp)
}

// SamlConfigurationServiceGetConfigurationWithResponse request returning *SamlConfigurationServiceGetConfigurationResponse
func (c *ClientWithResponses) SamlConfigurationServiceGetConfigurationWithResponse(ctx context.Context, params *SamlConfigurationServiceGetConfigurationParams, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceGetConfigurationResponse, error) {
	rsp, err := c.SamlConfigurationServiceGetConfiguration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSamlConfigurationServiceGetConfigurationResponse(rsp)
}

// SamlConfigurationServiceSetIDPParametersWithBodyWithResponse request with arbitrary body returning *SamlConfigurationServiceSetIDPParametersResponse
func (c *ClientWithResponses) SamlConfigurationServiceSetIDPParametersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceSetIDPParametersResponse, error) {
	rsp, err := c.SamlConfigurationServiceSetIDPParametersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSamlConfigurationServiceSetIDPParametersResponse(rsp)
}

func (c *ClientWithResponses) SamlConfigurationServiceSetIDPParametersWithResponse(ctx context.Context, body SamlConfigurationServiceSetIDPParametersJSONRequestBody, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceSetIDPParametersResponse, error) {
	rsp, err := c.SamlConfigurationServiceSetIDPParameters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSamlConfigurationServiceSetIDPParametersResponse(rsp)
}

// SamlConfigurationServiceGetSPParametersWithResponse request returning *SamlConfigurationServiceGetSPParametersResponse
func (c *ClientWithResponses) SamlConfigurationServiceGetSPParametersWithResponse(ctx context.Context, params *SamlConfigurationServiceGetSPParametersParams, reqEditors ...RequestEditorFn) (*SamlConfigurationServiceGetSPParametersResponse, error) {
	rsp, err := c.SamlConfigurationServiceGetSPParameters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSamlConfigurationServiceGetSPParametersResponse(rsp)
}

// TeamPermissionsMgmtServiceGetTeamGroupByNameWithResponse request returning *TeamPermissionsMgmtServiceGetTeamGroupByNameResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceGetTeamGroupByNameWithResponse(ctx context.Context, params *TeamPermissionsMgmtServiceGetTeamGroupByNameParams, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetTeamGroupByNameResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceGetTeamGroupByName(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceGetTeamGroupByNameResponse(rsp)
}

// TeamPermissionsMgmtServiceCreateTeamGroupWithBodyWithResponse request with arbitrary body returning *TeamPermissionsMgmtServiceCreateTeamGroupResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceCreateTeamGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceCreateTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceCreateTeamGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceCreateTeamGroupResponse(rsp)
}

func (c *ClientWithResponses) TeamPermissionsMgmtServiceCreateTeamGroupWithResponse(ctx context.Context, body TeamPermissionsMgmtServiceCreateTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceCreateTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceCreateTeamGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceCreateTeamGroupResponse(rsp)
}

// TeamPermissionsMgmtServiceUpdateTeamGroupWithBodyWithResponse request with arbitrary body returning *TeamPermissionsMgmtServiceUpdateTeamGroupResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceUpdateTeamGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceUpdateTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceUpdateTeamGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceUpdateTeamGroupResponse(rsp)
}

func (c *ClientWithResponses) TeamPermissionsMgmtServiceUpdateTeamGroupWithResponse(ctx context.Context, body TeamPermissionsMgmtServiceUpdateTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceUpdateTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceUpdateTeamGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceUpdateTeamGroupResponse(rsp)
}

// TeamPermissionsMgmtServiceGetTeamGroupsWithResponse request returning *TeamPermissionsMgmtServiceGetTeamGroupsResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceGetTeamGroupsWithResponse(ctx context.Context, params *TeamPermissionsMgmtServiceGetTeamGroupsParams, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetTeamGroupsResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceGetTeamGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceGetTeamGroupsResponse(rsp)
}

// TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsWithResponse request returning *TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsWithResponse(ctx context.Context, params *TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsParams, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceRemoveUsersFromTeamGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse(rsp)
}

// TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithBodyWithResponse request with arbitrary body returning *TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse(rsp)
}

func (c *ClientWithResponses) TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithResponse(ctx context.Context, body TeamPermissionsMgmtServiceAddUsersToTeamGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceAddUsersToTeamGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse(rsp)
}

// TeamPermissionsMgmtServiceDeleteTeamGroupWithResponse request returning *TeamPermissionsMgmtServiceDeleteTeamGroupResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceDeleteTeamGroupWithResponse(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceDeleteTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceDeleteTeamGroup(ctx, groupIdId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceDeleteTeamGroupResponse(rsp)
}

// TeamPermissionsMgmtServiceGetTeamGroupWithResponse request returning *TeamPermissionsMgmtServiceGetTeamGroupResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceGetTeamGroupWithResponse(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceGetTeamGroup(ctx, groupIdId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceGetTeamGroupResponse(rsp)
}

// TeamPermissionsMgmtServiceGetTeamGroupScopeWithResponse request returning *TeamPermissionsMgmtServiceGetTeamGroupScopeResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceGetTeamGroupScopeWithResponse(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetTeamGroupScopeResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceGetTeamGroupScope(ctx, groupIdId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceGetTeamGroupScopeResponse(rsp)
}

// TeamPermissionsMgmtServiceSetTeamGroupScopeWithBodyWithResponse request with arbitrary body returning *TeamPermissionsMgmtServiceSetTeamGroupScopeResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceSetTeamGroupScopeWithBodyWithResponse(ctx context.Context, groupIdId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceSetTeamGroupScopeResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceSetTeamGroupScopeWithBody(ctx, groupIdId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceSetTeamGroupScopeResponse(rsp)
}

func (c *ClientWithResponses) TeamPermissionsMgmtServiceSetTeamGroupScopeWithResponse(ctx context.Context, groupIdId int64, body TeamPermissionsMgmtServiceSetTeamGroupScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceSetTeamGroupScopeResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceSetTeamGroupScope(ctx, groupIdId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceSetTeamGroupScopeResponse(rsp)
}

// TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupWithResponse request returning *TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupWithResponse(ctx context.Context, groupIdId int64, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceRemoveUsersFromTeamGroup(ctx, groupIdId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse(rsp)
}

// TeamPermissionsMgmtServiceGetGroupUsersWithResponse request returning *TeamPermissionsMgmtServiceGetGroupUsersResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceGetGroupUsersWithResponse(ctx context.Context, groupIdId int64, params *TeamPermissionsMgmtServiceGetGroupUsersParams, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceGetGroupUsersResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceGetGroupUsers(ctx, groupIdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceGetGroupUsersResponse(rsp)
}

// TeamPermissionsMgmtServiceAddUsersToTeamGroupWithBodyWithResponse request with arbitrary body returning *TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse
func (c *ClientWithResponses) TeamPermissionsMgmtServiceAddUsersToTeamGroupWithBodyWithResponse(ctx context.Context, groupIdId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceAddUsersToTeamGroupWithBody(ctx, groupIdId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceAddUsersToTeamGroupResponse(rsp)
}

func (c *ClientWithResponses) TeamPermissionsMgmtServiceAddUsersToTeamGroupWithResponse(ctx context.Context, groupIdId int64, body TeamPermissionsMgmtServiceAddUsersToTeamGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse, error) {
	rsp, err := c.TeamPermissionsMgmtServiceAddUsersToTeamGroup(ctx, groupIdId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamPermissionsMgmtServiceAddUsersToTeamGroupResponse(rsp)
}

// ViewsFoldersServiceListViewFoldersWithResponse request returning *ViewsFoldersServiceListViewFoldersResponse
func (c *ClientWithResponses) ViewsFoldersServiceListViewFoldersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceListViewFoldersResponse, error) {
	rsp, err := c.ViewsFoldersServiceListViewFolders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsFoldersServiceListViewFoldersResponse(rsp)
}

// ViewsFoldersServiceCreateViewFolderWithBodyWithResponse request with arbitrary body returning *ViewsFoldersServiceCreateViewFolderResponse
func (c *ClientWithResponses) ViewsFoldersServiceCreateViewFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceCreateViewFolderResponse, error) {
	rsp, err := c.ViewsFoldersServiceCreateViewFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsFoldersServiceCreateViewFolderResponse(rsp)
}

func (c *ClientWithResponses) ViewsFoldersServiceCreateViewFolderWithResponse(ctx context.Context, body ViewsFoldersServiceCreateViewFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceCreateViewFolderResponse, error) {
	rsp, err := c.ViewsFoldersServiceCreateViewFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsFoldersServiceCreateViewFolderResponse(rsp)
}

// ViewsFoldersServiceReplaceViewFolderWithBodyWithResponse request with arbitrary body returning *ViewsFoldersServiceReplaceViewFolderResponse
func (c *ClientWithResponses) ViewsFoldersServiceReplaceViewFolderWithBodyWithResponse(ctx context.Context, folderId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceReplaceViewFolderResponse, error) {
	rsp, err := c.ViewsFoldersServiceReplaceViewFolderWithBody(ctx, folderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsFoldersServiceReplaceViewFolderResponse(rsp)
}

func (c *ClientWithResponses) ViewsFoldersServiceReplaceViewFolderWithResponse(ctx context.Context, folderId openapi_types.UUID, body ViewsFoldersServiceReplaceViewFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceReplaceViewFolderResponse, error) {
	rsp, err := c.ViewsFoldersServiceReplaceViewFolder(ctx, folderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsFoldersServiceReplaceViewFolderResponse(rsp)
}

// ViewsFoldersServiceDeleteViewFolderWithResponse request returning *ViewsFoldersServiceDeleteViewFolderResponse
func (c *ClientWithResponses) ViewsFoldersServiceDeleteViewFolderWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceDeleteViewFolderResponse, error) {
	rsp, err := c.ViewsFoldersServiceDeleteViewFolder(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsFoldersServiceDeleteViewFolderResponse(rsp)
}

// ViewsFoldersServiceGetViewFolderWithResponse request returning *ViewsFoldersServiceGetViewFolderResponse
func (c *ClientWithResponses) ViewsFoldersServiceGetViewFolderWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ViewsFoldersServiceGetViewFolderResponse, error) {
	rsp, err := c.ViewsFoldersServiceGetViewFolder(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsFoldersServiceGetViewFolderResponse(rsp)
}

// ViewsServiceListViewsWithResponse request returning *ViewsServiceListViewsResponse
func (c *ClientWithResponses) ViewsServiceListViewsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ViewsServiceListViewsResponse, error) {
	rsp, err := c.ViewsServiceListViews(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsServiceListViewsResponse(rsp)
}

// ViewsServiceCreateViewWithBodyWithResponse request with arbitrary body returning *ViewsServiceCreateViewResponse
func (c *ClientWithResponses) ViewsServiceCreateViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ViewsServiceCreateViewResponse, error) {
	rsp, err := c.ViewsServiceCreateViewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsServiceCreateViewResponse(rsp)
}

func (c *ClientWithResponses) ViewsServiceCreateViewWithResponse(ctx context.Context, body ViewsServiceCreateViewJSONRequestBody, reqEditors ...RequestEditorFn) (*ViewsServiceCreateViewResponse, error) {
	rsp, err := c.ViewsServiceCreateView(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsServiceCreateViewResponse(rsp)
}

// ViewsServiceDeleteViewWithResponse request returning *ViewsServiceDeleteViewResponse
func (c *ClientWithResponses) ViewsServiceDeleteViewWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ViewsServiceDeleteViewResponse, error) {
	rsp, err := c.ViewsServiceDeleteView(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsServiceDeleteViewResponse(rsp)
}

// ViewsServiceGetViewWithResponse request returning *ViewsServiceGetViewResponse
func (c *ClientWithResponses) ViewsServiceGetViewWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ViewsServiceGetViewResponse, error) {
	rsp, err := c.ViewsServiceGetView(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsServiceGetViewResponse(rsp)
}

// ViewsServiceReplaceViewWithBodyWithResponse request with arbitrary body returning *ViewsServiceReplaceViewResponse
func (c *ClientWithResponses) ViewsServiceReplaceViewWithBodyWithResponse(ctx context.Context, viewId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ViewsServiceReplaceViewResponse, error) {
	rsp, err := c.ViewsServiceReplaceViewWithBody(ctx, viewId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsServiceReplaceViewResponse(rsp)
}

func (c *ClientWithResponses) ViewsServiceReplaceViewWithResponse(ctx context.Context, viewId int32, body ViewsServiceReplaceViewJSONRequestBody, reqEditors ...RequestEditorFn) (*ViewsServiceReplaceViewResponse, error) {
	rsp, err := c.ViewsServiceReplaceView(ctx, viewId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsServiceReplaceViewResponse(rsp)
}

// ActionsServiceListActionsWithResponse request returning *ActionsServiceListActionsResponse
func (c *ClientWithResponses) ActionsServiceListActionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ActionsServiceListActionsResponse, error) {
	rsp, err := c.ActionsServiceListActions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceListActionsResponse(rsp)
}

// ActionsServiceCreateActionWithBodyWithResponse request with arbitrary body returning *ActionsServiceCreateActionResponse
func (c *ClientWithResponses) ActionsServiceCreateActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsServiceCreateActionResponse, error) {
	rsp, err := c.ActionsServiceCreateActionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceCreateActionResponse(rsp)
}

func (c *ClientWithResponses) ActionsServiceCreateActionWithResponse(ctx context.Context, body ActionsServiceCreateActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsServiceCreateActionResponse, error) {
	rsp, err := c.ActionsServiceCreateAction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceCreateActionResponse(rsp)
}

// ActionsServiceReplaceActionWithBodyWithResponse request with arbitrary body returning *ActionsServiceReplaceActionResponse
func (c *ClientWithResponses) ActionsServiceReplaceActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsServiceReplaceActionResponse, error) {
	rsp, err := c.ActionsServiceReplaceActionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceReplaceActionResponse(rsp)
}

func (c *ClientWithResponses) ActionsServiceReplaceActionWithResponse(ctx context.Context, body ActionsServiceReplaceActionJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsServiceReplaceActionResponse, error) {
	rsp, err := c.ActionsServiceReplaceAction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceReplaceActionResponse(rsp)
}

// ActionsServiceAtomicBatchExecuteActionsWithBodyWithResponse request with arbitrary body returning *ActionsServiceAtomicBatchExecuteActionsResponse
func (c *ClientWithResponses) ActionsServiceAtomicBatchExecuteActionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsServiceAtomicBatchExecuteActionsResponse, error) {
	rsp, err := c.ActionsServiceAtomicBatchExecuteActionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceAtomicBatchExecuteActionsResponse(rsp)
}

func (c *ClientWithResponses) ActionsServiceAtomicBatchExecuteActionsWithResponse(ctx context.Context, body ActionsServiceAtomicBatchExecuteActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsServiceAtomicBatchExecuteActionsResponse, error) {
	rsp, err := c.ActionsServiceAtomicBatchExecuteActions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceAtomicBatchExecuteActionsResponse(rsp)
}

// ActionsServiceOrderActionsWithBodyWithResponse request with arbitrary body returning *ActionsServiceOrderActionsResponse
func (c *ClientWithResponses) ActionsServiceOrderActionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsServiceOrderActionsResponse, error) {
	rsp, err := c.ActionsServiceOrderActionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceOrderActionsResponse(rsp)
}

func (c *ClientWithResponses) ActionsServiceOrderActionsWithResponse(ctx context.Context, body ActionsServiceOrderActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsServiceOrderActionsResponse, error) {
	rsp, err := c.ActionsServiceOrderActions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceOrderActionsResponse(rsp)
}

// ActionsServiceDeleteActionWithResponse request returning *ActionsServiceDeleteActionResponse
func (c *ClientWithResponses) ActionsServiceDeleteActionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsServiceDeleteActionResponse, error) {
	rsp, err := c.ActionsServiceDeleteAction(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceDeleteActionResponse(rsp)
}

// ActionsServiceGetActionWithResponse request returning *ActionsServiceGetActionResponse
func (c *ClientWithResponses) ActionsServiceGetActionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsServiceGetActionResponse, error) {
	rsp, err := c.ActionsServiceGetAction(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsServiceGetActionResponse(rsp)
}

// DataUsageServiceGetDataUsageWithResponse request returning *DataUsageServiceGetDataUsageResponse
func (c *ClientWithResponses) DataUsageServiceGetDataUsageWithResponse(ctx context.Context, params *DataUsageServiceGetDataUsageParams, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDataUsageResponse, error) {
	rsp, err := c.DataUsageServiceGetDataUsage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetDataUsageResponse(rsp)
}

// DataUsageServiceGetDailyUsageEvaluationTokensWithBodyWithResponse request with arbitrary body returning *DataUsageServiceGetDailyUsageEvaluationTokensResponse
func (c *ClientWithResponses) DataUsageServiceGetDailyUsageEvaluationTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageEvaluationTokensResponse, error) {
	rsp, err := c.DataUsageServiceGetDailyUsageEvaluationTokensWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetDailyUsageEvaluationTokensResponse(rsp)
}

func (c *ClientWithResponses) DataUsageServiceGetDailyUsageEvaluationTokensWithResponse(ctx context.Context, body DataUsageServiceGetDailyUsageEvaluationTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageEvaluationTokensResponse, error) {
	rsp, err := c.DataUsageServiceGetDailyUsageEvaluationTokens(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetDailyUsageEvaluationTokensResponse(rsp)
}

// DataUsageServiceGetDailyUsageProcessedGbsWithBodyWithResponse request with arbitrary body returning *DataUsageServiceGetDailyUsageProcessedGbsResponse
func (c *ClientWithResponses) DataUsageServiceGetDailyUsageProcessedGbsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageProcessedGbsResponse, error) {
	rsp, err := c.DataUsageServiceGetDailyUsageProcessedGbsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetDailyUsageProcessedGbsResponse(rsp)
}

func (c *ClientWithResponses) DataUsageServiceGetDailyUsageProcessedGbsWithResponse(ctx context.Context, body DataUsageServiceGetDailyUsageProcessedGbsJSONRequestBody, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageProcessedGbsResponse, error) {
	rsp, err := c.DataUsageServiceGetDailyUsageProcessedGbs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetDailyUsageProcessedGbsResponse(rsp)
}

// DataUsageServiceGetDailyUsageUnitsWithBodyWithResponse request with arbitrary body returning *DataUsageServiceGetDailyUsageUnitsResponse
func (c *ClientWithResponses) DataUsageServiceGetDailyUsageUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageUnitsResponse, error) {
	rsp, err := c.DataUsageServiceGetDailyUsageUnitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetDailyUsageUnitsResponse(rsp)
}

func (c *ClientWithResponses) DataUsageServiceGetDailyUsageUnitsWithResponse(ctx context.Context, body DataUsageServiceGetDailyUsageUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDailyUsageUnitsResponse, error) {
	rsp, err := c.DataUsageServiceGetDailyUsageUnits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetDailyUsageUnitsResponse(rsp)
}

// DataUsageServiceGetDataUsageMetricsExportStatusWithResponse request returning *DataUsageServiceGetDataUsageMetricsExportStatusResponse
func (c *ClientWithResponses) DataUsageServiceGetDataUsageMetricsExportStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DataUsageServiceGetDataUsageMetricsExportStatusResponse, error) {
	rsp, err := c.DataUsageServiceGetDataUsageMetricsExportStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetDataUsageMetricsExportStatusResponse(rsp)
}

// DataUsageServiceUpdateDataUsageMetricsExportStatusWithBodyWithResponse request with arbitrary body returning *DataUsageServiceUpdateDataUsageMetricsExportStatusResponse
func (c *ClientWithResponses) DataUsageServiceUpdateDataUsageMetricsExportStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DataUsageServiceUpdateDataUsageMetricsExportStatusResponse, error) {
	rsp, err := c.DataUsageServiceUpdateDataUsageMetricsExportStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceUpdateDataUsageMetricsExportStatusResponse(rsp)
}

func (c *ClientWithResponses) DataUsageServiceUpdateDataUsageMetricsExportStatusWithResponse(ctx context.Context, body DataUsageServiceUpdateDataUsageMetricsExportStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*DataUsageServiceUpdateDataUsageMetricsExportStatusResponse, error) {
	rsp, err := c.DataUsageServiceUpdateDataUsageMetricsExportStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceUpdateDataUsageMetricsExportStatusResponse(rsp)
}

// DataUsageServiceGetLogsCountWithResponse request returning *DataUsageServiceGetLogsCountResponse
func (c *ClientWithResponses) DataUsageServiceGetLogsCountWithResponse(ctx context.Context, params *DataUsageServiceGetLogsCountParams, reqEditors ...RequestEditorFn) (*DataUsageServiceGetLogsCountResponse, error) {
	rsp, err := c.DataUsageServiceGetLogsCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetLogsCountResponse(rsp)
}

// DataUsageServiceGetSpansCountWithResponse request returning *DataUsageServiceGetSpansCountResponse
func (c *ClientWithResponses) DataUsageServiceGetSpansCountWithResponse(ctx context.Context, params *DataUsageServiceGetSpansCountParams, reqEditors ...RequestEditorFn) (*DataUsageServiceGetSpansCountResponse, error) {
	rsp, err := c.DataUsageServiceGetSpansCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDataUsageServiceGetSpansCountResponse(rsp)
}

// TargetServiceGetTargetWithResponse request returning *TargetServiceGetTargetResponse
func (c *ClientWithResponses) TargetServiceGetTargetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TargetServiceGetTargetResponse, error) {
	rsp, err := c.TargetServiceGetTarget(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTargetServiceGetTargetResponse(rsp)
}

// TargetServiceSetTargetWithBodyWithResponse request with arbitrary body returning *TargetServiceSetTargetResponse
func (c *ClientWithResponses) TargetServiceSetTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TargetServiceSetTargetResponse, error) {
	rsp, err := c.TargetServiceSetTargetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTargetServiceSetTargetResponse(rsp)
}

func (c *ClientWithResponses) TargetServiceSetTargetWithResponse(ctx context.Context, body TargetServiceSetTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*TargetServiceSetTargetResponse, error) {
	rsp, err := c.TargetServiceSetTarget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTargetServiceSetTargetResponse(rsp)
}

// TargetServiceValidateTargetWithBodyWithResponse request with arbitrary body returning *TargetServiceValidateTargetResponse
func (c *ClientWithResponses) TargetServiceValidateTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TargetServiceValidateTargetResponse, error) {
	rsp, err := c.TargetServiceValidateTargetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTargetServiceValidateTargetResponse(rsp)
}

func (c *ClientWithResponses) TargetServiceValidateTargetWithResponse(ctx context.Context, body TargetServiceValidateTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*TargetServiceValidateTargetResponse, error) {
	rsp, err := c.TargetServiceValidateTarget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTargetServiceValidateTargetResponse(rsp)
}

// AlertDefsServiceListAlertDefsWithResponse request returning *AlertDefsServiceListAlertDefsResponse
func (c *ClientWithResponses) AlertDefsServiceListAlertDefsWithResponse(ctx context.Context, params *AlertDefsServiceListAlertDefsParams, reqEditors ...RequestEditorFn) (*AlertDefsServiceListAlertDefsResponse, error) {
	rsp, err := c.AlertDefsServiceListAlertDefs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceListAlertDefsResponse(rsp)
}

// AlertDefsServiceCreateAlertDefWithBodyWithResponse request with arbitrary body returning *AlertDefsServiceCreateAlertDefResponse
func (c *ClientWithResponses) AlertDefsServiceCreateAlertDefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertDefsServiceCreateAlertDefResponse, error) {
	rsp, err := c.AlertDefsServiceCreateAlertDefWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceCreateAlertDefResponse(rsp)
}

func (c *ClientWithResponses) AlertDefsServiceCreateAlertDefWithResponse(ctx context.Context, body AlertDefsServiceCreateAlertDefJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertDefsServiceCreateAlertDefResponse, error) {
	rsp, err := c.AlertDefsServiceCreateAlertDef(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceCreateAlertDefResponse(rsp)
}

// AlertDefsServiceReplaceAlertDefWithBodyWithResponse request with arbitrary body returning *AlertDefsServiceReplaceAlertDefResponse
func (c *ClientWithResponses) AlertDefsServiceReplaceAlertDefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertDefsServiceReplaceAlertDefResponse, error) {
	rsp, err := c.AlertDefsServiceReplaceAlertDefWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceReplaceAlertDefResponse(rsp)
}

func (c *ClientWithResponses) AlertDefsServiceReplaceAlertDefWithResponse(ctx context.Context, body AlertDefsServiceReplaceAlertDefJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertDefsServiceReplaceAlertDefResponse, error) {
	rsp, err := c.AlertDefsServiceReplaceAlertDef(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceReplaceAlertDefResponse(rsp)
}

// AlertDefsServiceGetAlertDefByVersionIdWithResponse request returning *AlertDefsServiceGetAlertDefByVersionIdResponse
func (c *ClientWithResponses) AlertDefsServiceGetAlertDefByVersionIdWithResponse(ctx context.Context, alertVersionId string, reqEditors ...RequestEditorFn) (*AlertDefsServiceGetAlertDefByVersionIdResponse, error) {
	rsp, err := c.AlertDefsServiceGetAlertDefByVersionId(ctx, alertVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceGetAlertDefByVersionIdResponse(rsp)
}

// AlertDefsServiceDeleteAlertDefWithResponse request returning *AlertDefsServiceDeleteAlertDefResponse
func (c *ClientWithResponses) AlertDefsServiceDeleteAlertDefWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AlertDefsServiceDeleteAlertDefResponse, error) {
	rsp, err := c.AlertDefsServiceDeleteAlertDef(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceDeleteAlertDefResponse(rsp)
}

// AlertDefsServiceGetAlertDefWithResponse request returning *AlertDefsServiceGetAlertDefResponse
func (c *ClientWithResponses) AlertDefsServiceGetAlertDefWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AlertDefsServiceGetAlertDefResponse, error) {
	rsp, err := c.AlertDefsServiceGetAlertDef(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceGetAlertDefResponse(rsp)
}

// AlertDefsServiceSetActiveWithResponse request returning *AlertDefsServiceSetActiveResponse
func (c *ClientWithResponses) AlertDefsServiceSetActiveWithResponse(ctx context.Context, id string, params *AlertDefsServiceSetActiveParams, reqEditors ...RequestEditorFn) (*AlertDefsServiceSetActiveResponse, error) {
	rsp, err := c.AlertDefsServiceSetActive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceSetActiveResponse(rsp)
}

// AlertEventServiceGetAlertEventsStatsWithResponse request returning *AlertEventServiceGetAlertEventsStatsResponse
func (c *ClientWithResponses) AlertEventServiceGetAlertEventsStatsWithResponse(ctx context.Context, params *AlertEventServiceGetAlertEventsStatsParams, reqEditors ...RequestEditorFn) (*AlertEventServiceGetAlertEventsStatsResponse, error) {
	rsp, err := c.AlertEventServiceGetAlertEventsStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertEventServiceGetAlertEventsStatsResponse(rsp)
}

// AlertEventServiceGetAlertEventWithResponse request returning *AlertEventServiceGetAlertEventResponse
func (c *ClientWithResponses) AlertEventServiceGetAlertEventWithResponse(ctx context.Context, id string, params *AlertEventServiceGetAlertEventParams, reqEditors ...RequestEditorFn) (*AlertEventServiceGetAlertEventResponse, error) {
	rsp, err := c.AlertEventServiceGetAlertEvent(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertEventServiceGetAlertEventResponse(rsp)
}

// AlertDefsServiceDownloadAlertsWithResponse request returning *AlertDefsServiceDownloadAlertsResponse
func (c *ClientWithResponses) AlertDefsServiceDownloadAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlertDefsServiceDownloadAlertsResponse, error) {
	rsp, err := c.AlertDefsServiceDownloadAlerts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDefsServiceDownloadAlertsResponse(rsp)
}

// ApiKeysServiceCreateApiKeyWithBodyWithResponse request with arbitrary body returning *ApiKeysServiceCreateApiKeyResponse
func (c *ClientWithResponses) ApiKeysServiceCreateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiKeysServiceCreateApiKeyResponse, error) {
	rsp, err := c.ApiKeysServiceCreateApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiKeysServiceCreateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) ApiKeysServiceCreateApiKeyWithResponse(ctx context.Context, body ApiKeysServiceCreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiKeysServiceCreateApiKeyResponse, error) {
	rsp, err := c.ApiKeysServiceCreateApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiKeysServiceCreateApiKeyResponse(rsp)
}

// ApiKeysServiceGetSendDataApiKeysWithResponse request returning *ApiKeysServiceGetSendDataApiKeysResponse
func (c *ClientWithResponses) ApiKeysServiceGetSendDataApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiKeysServiceGetSendDataApiKeysResponse, error) {
	rsp, err := c.ApiKeysServiceGetSendDataApiKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiKeysServiceGetSendDataApiKeysResponse(rsp)
}

// ApiKeysServiceDeleteApiKeyWithResponse request returning *ApiKeysServiceDeleteApiKeyResponse
func (c *ClientWithResponses) ApiKeysServiceDeleteApiKeyWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*ApiKeysServiceDeleteApiKeyResponse, error) {
	rsp, err := c.ApiKeysServiceDeleteApiKey(ctx, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiKeysServiceDeleteApiKeyResponse(rsp)
}

// ApiKeysServiceGetApiKeyWithResponse request returning *ApiKeysServiceGetApiKeyResponse
func (c *ClientWithResponses) ApiKeysServiceGetApiKeyWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*ApiKeysServiceGetApiKeyResponse, error) {
	rsp, err := c.ApiKeysServiceGetApiKey(ctx, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiKeysServiceGetApiKeyResponse(rsp)
}

// ApiKeysServiceUpdateApiKeyWithBodyWithResponse request with arbitrary body returning *ApiKeysServiceUpdateApiKeyResponse
func (c *ClientWithResponses) ApiKeysServiceUpdateApiKeyWithBodyWithResponse(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiKeysServiceUpdateApiKeyResponse, error) {
	rsp, err := c.ApiKeysServiceUpdateApiKeyWithBody(ctx, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiKeysServiceUpdateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) ApiKeysServiceUpdateApiKeyWithResponse(ctx context.Context, keyId string, body ApiKeysServiceUpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiKeysServiceUpdateApiKeyResponse, error) {
	rsp, err := c.ApiKeysServiceUpdateApiKey(ctx, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiKeysServiceUpdateApiKeyResponse(rsp)
}

// EventsServiceListEventsWithResponse request returning *EventsServiceListEventsResponse
func (c *ClientWithResponses) EventsServiceListEventsWithResponse(ctx context.Context, params *EventsServiceListEventsParams, reqEditors ...RequestEditorFn) (*EventsServiceListEventsResponse, error) {
	rsp, err := c.EventsServiceListEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsServiceListEventsResponse(rsp)
}

// EventsServiceBatchGetEventWithResponse request returning *EventsServiceBatchGetEventResponse
func (c *ClientWithResponses) EventsServiceBatchGetEventWithResponse(ctx context.Context, params *EventsServiceBatchGetEventParams, reqEditors ...RequestEditorFn) (*EventsServiceBatchGetEventResponse, error) {
	rsp, err := c.EventsServiceBatchGetEvent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsServiceBatchGetEventResponse(rsp)
}

// EventsServiceGetEventWithResponse request returning *EventsServiceGetEventResponse
func (c *ClientWithResponses) EventsServiceGetEventWithResponse(ctx context.Context, id string, params *EventsServiceGetEventParams, reqEditors ...RequestEditorFn) (*EventsServiceGetEventResponse, error) {
	rsp, err := c.EventsServiceGetEvent(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsServiceGetEventResponse(rsp)
}

// EventsServiceListEventsCountWithResponse request returning *EventsServiceListEventsCountResponse
func (c *ClientWithResponses) EventsServiceListEventsCountWithResponse(ctx context.Context, params *EventsServiceListEventsCountParams, reqEditors ...RequestEditorFn) (*EventsServiceListEventsCountResponse, error) {
	rsp, err := c.EventsServiceListEventsCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsServiceListEventsCountResponse(rsp)
}

// EventsServiceGetEventsStatisticsWithResponse request returning *EventsServiceGetEventsStatisticsResponse
func (c *ClientWithResponses) EventsServiceGetEventsStatisticsWithResponse(ctx context.Context, params *EventsServiceGetEventsStatisticsParams, reqEditors ...RequestEditorFn) (*EventsServiceGetEventsStatisticsResponse, error) {
	rsp, err := c.EventsServiceGetEventsStatistics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsServiceGetEventsStatisticsResponse(rsp)
}

// ParseRuleGroupsServiceGetRuleGroupModelMappingResponse parses an HTTP response from a RuleGroupsServiceGetRuleGroupModelMappingWithResponse call
func ParseRuleGroupsServiceGetRuleGroupModelMappingResponse(rsp *http.Response) (*RuleGroupsServiceGetRuleGroupModelMappingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupsServiceGetRuleGroupModelMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetRuleGroupModelMappingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupsServiceBulkDeleteRuleGroupResponse parses an HTTP response from a RuleGroupsServiceBulkDeleteRuleGroupWithResponse call
func ParseRuleGroupsServiceBulkDeleteRuleGroupResponse(rsp *http.Response) (*RuleGroupsServiceBulkDeleteRuleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupsServiceBulkDeleteRuleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BulkDeleteRuleGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupsServiceListRuleGroupsResponse parses an HTTP response from a RuleGroupsServiceListRuleGroupsWithResponse call
func ParseRuleGroupsServiceListRuleGroupsResponse(rsp *http.Response) (*RuleGroupsServiceListRuleGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupsServiceListRuleGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListRuleGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupsServiceCreateRuleGroupResponse parses an HTTP response from a RuleGroupsServiceCreateRuleGroupWithResponse call
func ParseRuleGroupsServiceCreateRuleGroupResponse(rsp *http.Response) (*RuleGroupsServiceCreateRuleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupsServiceCreateRuleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateRuleGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupsServiceGetCompanyUsageLimitsResponse parses an HTTP response from a RuleGroupsServiceGetCompanyUsageLimitsWithResponse call
func ParseRuleGroupsServiceGetCompanyUsageLimitsResponse(rsp *http.Response) (*RuleGroupsServiceGetCompanyUsageLimitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupsServiceGetCompanyUsageLimitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetCompanyUsageLimitsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupsServiceDeleteRuleGroupResponse parses an HTTP response from a RuleGroupsServiceDeleteRuleGroupWithResponse call
func ParseRuleGroupsServiceDeleteRuleGroupResponse(rsp *http.Response) (*RuleGroupsServiceDeleteRuleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupsServiceDeleteRuleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteRuleGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupsServiceGetRuleGroupResponse parses an HTTP response from a RuleGroupsServiceGetRuleGroupWithResponse call
func ParseRuleGroupsServiceGetRuleGroupResponse(rsp *http.Response) (*RuleGroupsServiceGetRuleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupsServiceGetRuleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetRuleGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupsServiceUpdateRuleGroupResponse parses an HTTP response from a RuleGroupsServiceUpdateRuleGroupWithResponse call
func ParseRuleGroupsServiceUpdateRuleGroupResponse(rsp *http.Response) (*RuleGroupsServiceUpdateRuleGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupsServiceUpdateRuleGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateRuleGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEvents2MetricServiceListE2MResponse parses an HTTP response from a Events2MetricServiceListE2MWithResponse call
func ParseEvents2MetricServiceListE2MResponse(rsp *http.Response) (*Events2MetricServiceListE2MResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Events2MetricServiceListE2MResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2ListE2MResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEvents2MetricServiceCreateE2MResponse parses an HTTP response from a Events2MetricServiceCreateE2MWithResponse call
func ParseEvents2MetricServiceCreateE2MResponse(rsp *http.Response) (*Events2MetricServiceCreateE2MResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Events2MetricServiceCreateE2MResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2CreateE2MResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEvents2MetricServiceReplaceE2MResponse parses an HTTP response from a Events2MetricServiceReplaceE2MWithResponse call
func ParseEvents2MetricServiceReplaceE2MResponse(rsp *http.Response) (*Events2MetricServiceReplaceE2MResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Events2MetricServiceReplaceE2MResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2ReplaceE2MResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEvents2MetricServiceAtomicBatchExecuteE2MResponse parses an HTTP response from a Events2MetricServiceAtomicBatchExecuteE2MWithResponse call
func ParseEvents2MetricServiceAtomicBatchExecuteE2MResponse(rsp *http.Response) (*Events2MetricServiceAtomicBatchExecuteE2MResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Events2MetricServiceAtomicBatchExecuteE2MResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2AtomicBatchExecuteE2MResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEvents2MetricServiceListLabelsCardinalityResponse parses an HTTP response from a Events2MetricServiceListLabelsCardinalityWithResponse call
func ParseEvents2MetricServiceListLabelsCardinalityResponse(rsp *http.Response) (*Events2MetricServiceListLabelsCardinalityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Events2MetricServiceListLabelsCardinalityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2ListLabelsCardinalityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEvents2MetricServiceGetLimitsResponse parses an HTTP response from a Events2MetricServiceGetLimitsWithResponse call
func ParseEvents2MetricServiceGetLimitsResponse(rsp *http.Response) (*Events2MetricServiceGetLimitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Events2MetricServiceGetLimitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetLimitsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEvents2MetricServiceDeleteE2MResponse parses an HTTP response from a Events2MetricServiceDeleteE2MWithResponse call
func ParseEvents2MetricServiceDeleteE2MResponse(rsp *http.Response) (*Events2MetricServiceDeleteE2MResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Events2MetricServiceDeleteE2MResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2DeleteE2MResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEvents2MetricServiceGetE2MResponse parses an HTTP response from a Events2MetricServiceGetE2MWithResponse call
func ParseEvents2MetricServiceGetE2MResponse(rsp *http.Response) (*Events2MetricServiceGetE2MResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Events2MetricServiceGetE2MResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetE2MResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEnrichmentServiceRemoveEnrichmentsResponse parses an HTTP response from a EnrichmentServiceRemoveEnrichmentsWithResponse call
func ParseEnrichmentServiceRemoveEnrichmentsResponse(rsp *http.Response) (*EnrichmentServiceRemoveEnrichmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnrichmentServiceRemoveEnrichmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1RemoveEnrichmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEnrichmentServiceGetEnrichmentsResponse parses an HTTP response from a EnrichmentServiceGetEnrichmentsWithResponse call
func ParseEnrichmentServiceGetEnrichmentsResponse(rsp *http.Response) (*EnrichmentServiceGetEnrichmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnrichmentServiceGetEnrichmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetEnrichmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEnrichmentServiceAddEnrichmentsResponse parses an HTTP response from a EnrichmentServiceAddEnrichmentsWithResponse call
func ParseEnrichmentServiceAddEnrichmentsResponse(rsp *http.Response) (*EnrichmentServiceAddEnrichmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnrichmentServiceAddEnrichmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AddEnrichmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEnrichmentServiceGetEnrichmentLimitResponse parses an HTTP response from a EnrichmentServiceGetEnrichmentLimitWithResponse call
func ParseEnrichmentServiceGetEnrichmentLimitResponse(rsp *http.Response) (*EnrichmentServiceGetEnrichmentLimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnrichmentServiceGetEnrichmentLimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetEnrichmentLimitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEnrichmentServiceGetCompanyEnrichmentSettingsResponse parses an HTTP response from a EnrichmentServiceGetCompanyEnrichmentSettingsWithResponse call
func ParseEnrichmentServiceGetCompanyEnrichmentSettingsResponse(rsp *http.Response) (*EnrichmentServiceGetCompanyEnrichmentSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnrichmentServiceGetCompanyEnrichmentSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetCompanyEnrichmentSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEnrichmentServiceAtomicOverwriteEnrichmentsResponse parses an HTTP response from a EnrichmentServiceAtomicOverwriteEnrichmentsWithResponse call
func ParseEnrichmentServiceAtomicOverwriteEnrichmentsResponse(rsp *http.Response) (*EnrichmentServiceAtomicOverwriteEnrichmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnrichmentServiceAtomicOverwriteEnrichmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AtomicOverwriteEnrichmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsTcoServiceGetResponse parses an HTTP response from a MetricsTcoServiceGetWithResponse call
func ParseMetricsTcoServiceGetResponse(rsp *http.Response) (*MetricsTcoServiceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsTcoServiceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetricsTcoGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsTcoServiceAddResponse parses an HTTP response from a MetricsTcoServiceAddWithResponse call
func ParseMetricsTcoServiceAddResponse(rsp *http.Response) (*MetricsTcoServiceAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsTcoServiceAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsTcoServiceDeleteResponse parses an HTTP response from a MetricsTcoServiceDeleteWithResponse call
func ParseMetricsTcoServiceDeleteResponse(rsp *http.Response) (*MetricsTcoServiceDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsTcoServiceDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse parses an HTTP response from a AlertSchedulerRuleServiceCreateAlertSchedulerRuleWithResponse call
func ParseAlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse(rsp *http.Response) (*AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertSchedulerRuleServiceCreateAlertSchedulerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateAlertSchedulerRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse parses an HTTP response from a AlertSchedulerRuleServiceUpdateAlertSchedulerRuleWithResponse call
func ParseAlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse(rsp *http.Response) (*AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertSchedulerRuleServiceUpdateAlertSchedulerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateAlertSchedulerRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse parses an HTTP response from a AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleWithResponse call
func ParseAlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse(rsp *http.Response) (*AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertSchedulerRuleServiceGetBulkAlertSchedulerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetBulkAlertSchedulerRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse parses an HTTP response from a AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleWithResponse call
func ParseAlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse(rsp *http.Response) (*AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertSchedulerRuleServiceCreateBulkAlertSchedulerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateBulkAlertSchedulerRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse parses an HTTP response from a AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleWithResponse call
func ParseAlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse(rsp *http.Response) (*AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertSchedulerRuleServiceUpdateBulkAlertSchedulerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateBulkAlertSchedulerRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse parses an HTTP response from a AlertSchedulerRuleServiceDeleteAlertSchedulerRuleWithResponse call
func ParseAlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse(rsp *http.Response) (*AlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertSchedulerRuleServiceDeleteAlertSchedulerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteAlertSchedulerRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertSchedulerRuleServiceGetAlertSchedulerRuleResponse parses an HTTP response from a AlertSchedulerRuleServiceGetAlertSchedulerRuleWithResponse call
func ParseAlertSchedulerRuleServiceGetAlertSchedulerRuleResponse(rsp *http.Response) (*AlertSchedulerRuleServiceGetAlertSchedulerRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertSchedulerRuleServiceGetAlertSchedulerRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetAlertSchedulerRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextualDataIntegrationServiceSaveContextualDataIntegrationResponse parses an HTTP response from a ContextualDataIntegrationServiceSaveContextualDataIntegrationWithResponse call
func ParseContextualDataIntegrationServiceSaveContextualDataIntegrationResponse(rsp *http.Response) (*ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextualDataIntegrationServiceSaveContextualDataIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1SaveContextualDataIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse parses an HTTP response from a ContextualDataIntegrationServiceUpdateContextualDataIntegrationWithResponse call
func ParseContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse(rsp *http.Response) (*ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextualDataIntegrationServiceUpdateContextualDataIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateContextualDataIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextualDataIntegrationServiceTestContextualDataIntegrationResponse parses an HTTP response from a ContextualDataIntegrationServiceTestContextualDataIntegrationWithResponse call
func ParseContextualDataIntegrationServiceTestContextualDataIntegrationResponse(rsp *http.Response) (*ContextualDataIntegrationServiceTestContextualDataIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextualDataIntegrationServiceTestContextualDataIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestContextualDataIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse parses an HTTP response from a ContextualDataIntegrationServiceDeleteContextualDataIntegrationWithResponse call
func ParseContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse(rsp *http.Response) (*ContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextualDataIntegrationServiceDeleteContextualDataIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteContextualDataIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextualDataIntegrationServiceGetContextualDataIntegrationsResponse parses an HTTP response from a ContextualDataIntegrationServiceGetContextualDataIntegrationsWithResponse call
func ParseContextualDataIntegrationServiceGetContextualDataIntegrationsResponse(rsp *http.Response) (*ContextualDataIntegrationServiceGetContextualDataIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextualDataIntegrationServiceGetContextualDataIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetContextualDataIntegrationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse parses an HTTP response from a ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionWithResponse call
func ParseContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse(rsp *http.Response) (*ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextualDataIntegrationServiceGetContextualDataIntegrationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetContextualDataIntegrationDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse parses an HTTP response from a ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsWithResponse call
func ParseContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse(rsp *http.Response) (*ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContextualDataIntegrationServiceGetContextualDataIntegrationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetContextualDataIntegrationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomEnrichmentServiceGetCustomEnrichmentsResponse parses an HTTP response from a CustomEnrichmentServiceGetCustomEnrichmentsWithResponse call
func ParseCustomEnrichmentServiceGetCustomEnrichmentsResponse(rsp *http.Response) (*CustomEnrichmentServiceGetCustomEnrichmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomEnrichmentServiceGetCustomEnrichmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetCustomEnrichmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomEnrichmentServiceCreateCustomEnrichmentResponse parses an HTTP response from a CustomEnrichmentServiceCreateCustomEnrichmentWithResponse call
func ParseCustomEnrichmentServiceCreateCustomEnrichmentResponse(rsp *http.Response) (*CustomEnrichmentServiceCreateCustomEnrichmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomEnrichmentServiceCreateCustomEnrichmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateCustomEnrichmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomEnrichmentServiceUpdateCustomEnrichmentResponse parses an HTTP response from a CustomEnrichmentServiceUpdateCustomEnrichmentWithResponse call
func ParseCustomEnrichmentServiceUpdateCustomEnrichmentResponse(rsp *http.Response) (*CustomEnrichmentServiceUpdateCustomEnrichmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomEnrichmentServiceUpdateCustomEnrichmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateCustomEnrichmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomEnrichmentServiceSearchCustomEnrichmentDataResponse parses an HTTP response from a CustomEnrichmentServiceSearchCustomEnrichmentDataWithResponse call
func ParseCustomEnrichmentServiceSearchCustomEnrichmentDataResponse(rsp *http.Response) (*CustomEnrichmentServiceSearchCustomEnrichmentDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomEnrichmentServiceSearchCustomEnrichmentDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1SearchCustomEnrichmentDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomEnrichmentServiceDeleteCustomEnrichmentResponse parses an HTTP response from a CustomEnrichmentServiceDeleteCustomEnrichmentWithResponse call
func ParseCustomEnrichmentServiceDeleteCustomEnrichmentResponse(rsp *http.Response) (*CustomEnrichmentServiceDeleteCustomEnrichmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomEnrichmentServiceDeleteCustomEnrichmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteCustomEnrichmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCustomEnrichmentServiceGetCustomEnrichmentResponse parses an HTTP response from a CustomEnrichmentServiceGetCustomEnrichmentWithResponse call
func ParseCustomEnrichmentServiceGetCustomEnrichmentResponse(rsp *http.Response) (*CustomEnrichmentServiceGetCustomEnrichmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomEnrichmentServiceGetCustomEnrichmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetCustomEnrichmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServiceGetDashboardBySlugResponse parses an HTTP response from a DashboardsServiceGetDashboardBySlugWithResponse call
func ParseDashboardsServiceGetDashboardBySlugResponse(rsp *http.Response) (*DashboardsServiceGetDashboardBySlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServiceGetDashboardBySlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesGetDashboardBySlugResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardCatalogServiceGetDashboardCatalogResponse parses an HTTP response from a DashboardCatalogServiceGetDashboardCatalogWithResponse call
func ParseDashboardCatalogServiceGetDashboardCatalogResponse(rsp *http.Response) (*DashboardCatalogServiceGetDashboardCatalogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardCatalogServiceGetDashboardCatalogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesGetDashboardCatalogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServiceCreateDashboardResponse parses an HTTP response from a DashboardsServiceCreateDashboardWithResponse call
func ParseDashboardsServiceCreateDashboardResponse(rsp *http.Response) (*DashboardsServiceCreateDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServiceCreateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesCreateDashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServiceReplaceDashboardResponse parses an HTTP response from a DashboardsServiceReplaceDashboardWithResponse call
func ParseDashboardsServiceReplaceDashboardResponse(rsp *http.Response) (*DashboardsServiceReplaceDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServiceReplaceDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesReplaceDashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServiceDeleteDashboardResponse parses an HTTP response from a DashboardsServiceDeleteDashboardWithResponse call
func ParseDashboardsServiceDeleteDashboardResponse(rsp *http.Response) (*DashboardsServiceDeleteDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServiceDeleteDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesDeleteDashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServiceGetDashboardResponse parses an HTTP response from a DashboardsServiceGetDashboardWithResponse call
func ParseDashboardsServiceGetDashboardResponse(rsp *http.Response) (*DashboardsServiceGetDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServiceGetDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesGetDashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServiceReplaceDefaultDashboardResponse parses an HTTP response from a DashboardsServiceReplaceDefaultDashboardWithResponse call
func ParseDashboardsServiceReplaceDefaultDashboardResponse(rsp *http.Response) (*DashboardsServiceReplaceDefaultDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServiceReplaceDefaultDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesReplaceDefaultDashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServiceAssignDashboardFolderResponse parses an HTTP response from a DashboardsServiceAssignDashboardFolderWithResponse call
func ParseDashboardsServiceAssignDashboardFolderResponse(rsp *http.Response) (*DashboardsServiceAssignDashboardFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServiceAssignDashboardFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesAssignDashboardFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServicePinDashboardResponse parses an HTTP response from a DashboardsServicePinDashboardWithResponse call
func ParseDashboardsServicePinDashboardResponse(rsp *http.Response) (*DashboardsServicePinDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServicePinDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesPinDashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardsServiceUnpinDashboardResponse parses an HTTP response from a DashboardsServiceUnpinDashboardWithResponse call
func ParseDashboardsServiceUnpinDashboardResponse(rsp *http.Response) (*DashboardsServiceUnpinDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardsServiceUnpinDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesUnpinDashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardFoldersServiceListDashboardFoldersResponse parses an HTTP response from a DashboardFoldersServiceListDashboardFoldersWithResponse call
func ParseDashboardFoldersServiceListDashboardFoldersResponse(rsp *http.Response) (*DashboardFoldersServiceListDashboardFoldersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardFoldersServiceListDashboardFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesListDashboardFoldersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardFoldersServiceCreateDashboardFolderResponse parses an HTTP response from a DashboardFoldersServiceCreateDashboardFolderWithResponse call
func ParseDashboardFoldersServiceCreateDashboardFolderResponse(rsp *http.Response) (*DashboardFoldersServiceCreateDashboardFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardFoldersServiceCreateDashboardFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesCreateDashboardFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardFoldersServiceReplaceDashboardFolderResponse parses an HTTP response from a DashboardFoldersServiceReplaceDashboardFolderWithResponse call
func ParseDashboardFoldersServiceReplaceDashboardFolderResponse(rsp *http.Response) (*DashboardFoldersServiceReplaceDashboardFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardFoldersServiceReplaceDashboardFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesReplaceDashboardFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardFoldersServiceDeleteDashboardFolderResponse parses an HTTP response from a DashboardFoldersServiceDeleteDashboardFolderWithResponse call
func ParseDashboardFoldersServiceDeleteDashboardFolderResponse(rsp *http.Response) (*DashboardFoldersServiceDeleteDashboardFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardFoldersServiceDeleteDashboardFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesDeleteDashboardFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDashboardFoldersServiceGetDashboardFolderResponse parses an HTTP response from a DashboardFoldersServiceGetDashboardFolderWithResponse call
func ParseDashboardFoldersServiceGetDashboardFolderResponse(rsp *http.Response) (*DashboardFoldersServiceGetDashboardFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DashboardFoldersServiceGetDashboardFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesGetDashboardFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionDeploymentServiceDeployExtensionResponse parses an HTTP response from a ExtensionDeploymentServiceDeployExtensionWithResponse call
func ParseExtensionDeploymentServiceDeployExtensionResponse(rsp *http.Response) (*ExtensionDeploymentServiceDeployExtensionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionDeploymentServiceDeployExtensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeployExtensionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionDeploymentServiceGetDeployedExtensionsResponse parses an HTTP response from a ExtensionDeploymentServiceGetDeployedExtensionsWithResponse call
func ParseExtensionDeploymentServiceGetDeployedExtensionsResponse(rsp *http.Response) (*ExtensionDeploymentServiceGetDeployedExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionDeploymentServiceGetDeployedExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetDeployedExtensionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionDeploymentServiceUndeployExtensionResponse parses an HTTP response from a ExtensionDeploymentServiceUndeployExtensionWithResponse call
func ParseExtensionDeploymentServiceUndeployExtensionResponse(rsp *http.Response) (*ExtensionDeploymentServiceUndeployExtensionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionDeploymentServiceUndeployExtensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UndeployExtensionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionDeploymentServiceUpdateExtensionResponse parses an HTTP response from a ExtensionDeploymentServiceUpdateExtensionWithResponse call
func ParseExtensionDeploymentServiceUpdateExtensionResponse(rsp *http.Response) (*ExtensionDeploymentServiceUpdateExtensionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionDeploymentServiceUpdateExtensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateExtensionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionTestingServiceCleanupTestingRevisionResponse parses an HTTP response from a ExtensionTestingServiceCleanupTestingRevisionWithResponse call
func ParseExtensionTestingServiceCleanupTestingRevisionResponse(rsp *http.Response) (*ExtensionTestingServiceCleanupTestingRevisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionTestingServiceCleanupTestingRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CleanupTestingRevisionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionTestingServiceInitializeTestingRevisionResponse parses an HTTP response from a ExtensionTestingServiceInitializeTestingRevisionWithResponse call
func ParseExtensionTestingServiceInitializeTestingRevisionResponse(rsp *http.Response) (*ExtensionTestingServiceInitializeTestingRevisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionTestingServiceInitializeTestingRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1InitializeTestingRevisionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionTestingServiceTestExtensionRevisionResponse parses an HTTP response from a ExtensionTestingServiceTestExtensionRevisionWithResponse call
func ParseExtensionTestingServiceTestExtensionRevisionResponse(rsp *http.Response) (*ExtensionTestingServiceTestExtensionRevisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionTestingServiceTestExtensionRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestExtensionRevisionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionServiceGetAllExtensionsResponse parses an HTTP response from a ExtensionServiceGetAllExtensionsWithResponse call
func ParseExtensionServiceGetAllExtensionsResponse(rsp *http.Response) (*ExtensionServiceGetAllExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionServiceGetAllExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetAllExtensionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExtensionServiceGetExtensionResponse parses an HTTP response from a ExtensionServiceGetExtensionWithResponse call
func ParseExtensionServiceGetExtensionResponse(rsp *http.Response) (*ExtensionServiceGetExtensionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtensionServiceGetExtensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Extensionsv1Extension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceListIncidentsResponse parses an HTTP response from a IncidentsServiceListIncidentsWithResponse call
func ParseIncidentsServiceListIncidentsResponse(rsp *http.Response) (*IncidentsServiceListIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListIncidentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceGetIncidentResponse parses an HTTP response from a IncidentsServiceGetIncidentWithResponse call
func ParseIncidentsServiceGetIncidentResponse(rsp *http.Response) (*IncidentsServiceGetIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceGetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetIncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceGetIncidentEventsResponse parses an HTTP response from a IncidentsServiceGetIncidentEventsWithResponse call
func ParseIncidentsServiceGetIncidentEventsResponse(rsp *http.Response) (*IncidentsServiceGetIncidentEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceGetIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetIncidentEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceAcknowledgeIncidentsResponse parses an HTTP response from a IncidentsServiceAcknowledgeIncidentsWithResponse call
func ParseIncidentsServiceAcknowledgeIncidentsResponse(rsp *http.Response) (*IncidentsServiceAcknowledgeIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceAcknowledgeIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AcknowledgeIncidentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceAssignIncidentsResponse parses an HTTP response from a IncidentsServiceAssignIncidentsWithResponse call
func ParseIncidentsServiceAssignIncidentsResponse(rsp *http.Response) (*IncidentsServiceAssignIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceAssignIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AssignIncidentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceBatchGetIncidentResponse parses an HTTP response from a IncidentsServiceBatchGetIncidentWithResponse call
func ParseIncidentsServiceBatchGetIncidentResponse(rsp *http.Response) (*IncidentsServiceBatchGetIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceBatchGetIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BatchGetIncidentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceCloseIncidentsResponse parses an HTTP response from a IncidentsServiceCloseIncidentsWithResponse call
func ParseIncidentsServiceCloseIncidentsResponse(rsp *http.Response) (*IncidentsServiceCloseIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceCloseIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CloseIncidentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceGetFilterValuesResponse parses an HTTP response from a IncidentsServiceGetFilterValuesWithResponse call
func ParseIncidentsServiceGetFilterValuesResponse(rsp *http.Response) (*IncidentsServiceGetFilterValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceGetFilterValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetFilterValuesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceListIncidentEventsResponse parses an HTTP response from a IncidentsServiceListIncidentEventsWithResponse call
func ParseIncidentsServiceListIncidentEventsResponse(rsp *http.Response) (*IncidentsServiceListIncidentEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceListIncidentEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListIncidentEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceListIncidentEventsFilterValuesResponse parses an HTTP response from a IncidentsServiceListIncidentEventsFilterValuesWithResponse call
func ParseIncidentsServiceListIncidentEventsFilterValuesResponse(rsp *http.Response) (*IncidentsServiceListIncidentEventsFilterValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceListIncidentEventsFilterValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListIncidentEventsFilterValuesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceListIncidentEventsTotalCountResponse parses an HTTP response from a IncidentsServiceListIncidentEventsTotalCountWithResponse call
func ParseIncidentsServiceListIncidentEventsTotalCountResponse(rsp *http.Response) (*IncidentsServiceListIncidentEventsTotalCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceListIncidentEventsTotalCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListIncidentEventsTotalCountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceListIncidentAggregationsResponse parses an HTTP response from a IncidentsServiceListIncidentAggregationsWithResponse call
func ParseIncidentsServiceListIncidentAggregationsResponse(rsp *http.Response) (*IncidentsServiceListIncidentAggregationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceListIncidentAggregationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListIncidentAggregationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceResolveIncidentsResponse parses an HTTP response from a IncidentsServiceResolveIncidentsWithResponse call
func ParseIncidentsServiceResolveIncidentsResponse(rsp *http.Response) (*IncidentsServiceResolveIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceResolveIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ResolveIncidentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIncidentsServiceUnassignIncidentsResponse parses an HTTP response from a IncidentsServiceUnassignIncidentsWithResponse call
func ParseIncidentsServiceUnassignIncidentsResponse(rsp *http.Response) (*IncidentsServiceUnassignIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsServiceUnassignIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UnassignIncidentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceGetIntegrationsResponse parses an HTTP response from a IntegrationServiceGetIntegrationsWithResponse call
func ParseIntegrationServiceGetIntegrationsResponse(rsp *http.Response) (*IntegrationServiceGetIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceGetIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetIntegrationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceGetIntegrationDefinitionResponse parses an HTTP response from a IntegrationServiceGetIntegrationDefinitionWithResponse call
func ParseIntegrationServiceGetIntegrationDefinitionResponse(rsp *http.Response) (*IntegrationServiceGetIntegrationDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceGetIntegrationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetIntegrationDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceGetDeployedIntegrationResponse parses an HTTP response from a IntegrationServiceGetDeployedIntegrationWithResponse call
func ParseIntegrationServiceGetDeployedIntegrationResponse(rsp *http.Response) (*IntegrationServiceGetDeployedIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceGetDeployedIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetDeployedIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceDeleteIntegrationResponse parses an HTTP response from a IntegrationServiceDeleteIntegrationWithResponse call
func ParseIntegrationServiceDeleteIntegrationResponse(rsp *http.Response) (*IntegrationServiceDeleteIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceDeleteIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceListManagedIntegrationKeysResponse parses an HTTP response from a IntegrationServiceListManagedIntegrationKeysWithResponse call
func ParseIntegrationServiceListManagedIntegrationKeysResponse(rsp *http.Response) (*IntegrationServiceListManagedIntegrationKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceListManagedIntegrationKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListManagedIntegrationKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceGetManagedIntegrationStatusResponse parses an HTTP response from a IntegrationServiceGetManagedIntegrationStatusWithResponse call
func ParseIntegrationServiceGetManagedIntegrationStatusResponse(rsp *http.Response) (*IntegrationServiceGetManagedIntegrationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceGetManagedIntegrationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetManagedIntegrationStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceSaveIntegrationResponse parses an HTTP response from a IntegrationServiceSaveIntegrationWithResponse call
func ParseIntegrationServiceSaveIntegrationResponse(rsp *http.Response) (*IntegrationServiceSaveIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceSaveIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1SaveIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceUpdateIntegrationResponse parses an HTTP response from a IntegrationServiceUpdateIntegrationWithResponse call
func ParseIntegrationServiceUpdateIntegrationResponse(rsp *http.Response) (*IntegrationServiceUpdateIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceUpdateIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceTestIntegrationResponse parses an HTTP response from a IntegrationServiceTestIntegrationWithResponse call
func ParseIntegrationServiceTestIntegrationResponse(rsp *http.Response) (*IntegrationServiceTestIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceTestIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceGetRumApplicationVersionDataResponse parses an HTTP response from a IntegrationServiceGetRumApplicationVersionDataWithResponse call
func ParseIntegrationServiceGetRumApplicationVersionDataResponse(rsp *http.Response) (*IntegrationServiceGetRumApplicationVersionDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceGetRumApplicationVersionDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetRumApplicationVersionDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceSyncRumDataResponse parses an HTTP response from a IntegrationServiceSyncRumDataWithResponse call
func ParseIntegrationServiceSyncRumDataResponse(rsp *http.Response) (*IntegrationServiceSyncRumDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceSyncRumDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1SyncRumDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceGetTemplateResponse parses an HTTP response from a IntegrationServiceGetTemplateWithResponse call
func ParseIntegrationServiceGetTemplateResponse(rsp *http.Response) (*IntegrationServiceGetTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceGetTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationServiceGetIntegrationDetailsResponse parses an HTTP response from a IntegrationServiceGetIntegrationDetailsWithResponse call
func ParseIntegrationServiceGetIntegrationDetailsResponse(rsp *http.Response) (*IntegrationServiceGetIntegrationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationServiceGetIntegrationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetIntegrationDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsConfiguratorPublicServiceGetTenantConfigResponse parses an HTTP response from a MetricsConfiguratorPublicServiceGetTenantConfigWithResponse call
func ParseMetricsConfiguratorPublicServiceGetTenantConfigResponse(rsp *http.Response) (*MetricsConfiguratorPublicServiceGetTenantConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsConfiguratorPublicServiceGetTenantConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetricsConfiguratorGetTenantConfigResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsConfiguratorPublicServiceConfigureTenantResponse parses an HTTP response from a MetricsConfiguratorPublicServiceConfigureTenantWithResponse call
func ParseMetricsConfiguratorPublicServiceConfigureTenantResponse(rsp *http.Response) (*MetricsConfiguratorPublicServiceConfigureTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsConfiguratorPublicServiceConfigureTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsConfiguratorPublicServiceUpdateResponse parses an HTTP response from a MetricsConfiguratorPublicServiceUpdateWithResponse call
func ParseMetricsConfiguratorPublicServiceUpdateResponse(rsp *http.Response) (*MetricsConfiguratorPublicServiceUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsConfiguratorPublicServiceUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsConfiguratorPublicServiceDisableArchiveResponse parses an HTTP response from a MetricsConfiguratorPublicServiceDisableArchiveWithResponse call
func ParseMetricsConfiguratorPublicServiceDisableArchiveResponse(rsp *http.Response) (*MetricsConfiguratorPublicServiceDisableArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsConfiguratorPublicServiceDisableArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsConfiguratorPublicServiceEnableArchiveResponse parses an HTTP response from a MetricsConfiguratorPublicServiceEnableArchiveWithResponse call
func ParseMetricsConfiguratorPublicServiceEnableArchiveResponse(rsp *http.Response) (*MetricsConfiguratorPublicServiceEnableArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsConfiguratorPublicServiceEnableArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMetricsConfiguratorPublicServiceValidateBucketResponse parses an HTTP response from a MetricsConfiguratorPublicServiceValidateBucketWithResponse call
func ParseMetricsConfiguratorPublicServiceValidateBucketResponse(rsp *http.Response) (*MetricsConfiguratorPublicServiceValidateBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsConfiguratorPublicServiceValidateBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceReplaceConnectorResponse parses an HTTP response from a ConnectorsServiceReplaceConnectorWithResponse call
func ParseConnectorsServiceReplaceConnectorResponse(rsp *http.Response) (*ConnectorsServiceReplaceConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceReplaceConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ReplaceConnectorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceListConnectorsResponse parses an HTTP response from a ConnectorsServiceListConnectorsWithResponse call
func ParseConnectorsServiceListConnectorsResponse(rsp *http.Response) (*ConnectorsServiceListConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceListConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListConnectorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceCreateConnectorResponse parses an HTTP response from a ConnectorsServiceCreateConnectorWithResponse call
func ParseConnectorsServiceCreateConnectorResponse(rsp *http.Response) (*ConnectorsServiceCreateConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceCreateConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateConnectorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceDeleteConnectorResponse parses an HTTP response from a ConnectorsServiceDeleteConnectorWithResponse call
func ParseConnectorsServiceDeleteConnectorResponse(rsp *http.Response) (*ConnectorsServiceDeleteConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceDeleteConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteConnectorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceGetConnectorResponse parses an HTTP response from a ConnectorsServiceGetConnectorWithResponse call
func ParseConnectorsServiceGetConnectorResponse(rsp *http.Response) (*ConnectorsServiceGetConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceGetConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetConnectorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceBatchGetConnectorsResponse parses an HTTP response from a ConnectorsServiceBatchGetConnectorsWithResponse call
func ParseConnectorsServiceBatchGetConnectorsResponse(rsp *http.Response) (*ConnectorsServiceBatchGetConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceBatchGetConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BatchGetConnectorsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceBatchGetConnectorSummariesResponse parses an HTTP response from a ConnectorsServiceBatchGetConnectorSummariesWithResponse call
func ParseConnectorsServiceBatchGetConnectorSummariesResponse(rsp *http.Response) (*ConnectorsServiceBatchGetConnectorSummariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceBatchGetConnectorSummariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BatchGetConnectorSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceGetConnectorTypeSummariesResponse parses an HTTP response from a ConnectorsServiceGetConnectorTypeSummariesWithResponse call
func ParseConnectorsServiceGetConnectorTypeSummariesResponse(rsp *http.Response) (*ConnectorsServiceGetConnectorTypeSummariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceGetConnectorTypeSummariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetConnectorTypeSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConnectorsServiceListConnectorSummariesResponse parses an HTTP response from a ConnectorsServiceListConnectorSummariesWithResponse call
func ParseConnectorsServiceListConnectorSummariesResponse(rsp *http.Response) (*ConnectorsServiceListConnectorSummariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectorsServiceListConnectorSummariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListConnectorSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEntitiesServiceListEntityTypesResponse parses an HTTP response from a EntitiesServiceListEntityTypesWithResponse call
func ParseEntitiesServiceListEntityTypesResponse(rsp *http.Response) (*EntitiesServiceListEntityTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EntitiesServiceListEntityTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListEntityTypesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEntitiesServiceListEntitySubTypesResponse parses an HTTP response from a EntitiesServiceListEntitySubTypesWithResponse call
func ParseEntitiesServiceListEntitySubTypesResponse(rsp *http.Response) (*EntitiesServiceListEntitySubTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EntitiesServiceListEntitySubTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListEntitySubTypesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestingServiceTestConnectorConfigResponse parses an HTTP response from a TestingServiceTestConnectorConfigWithResponse call
func ParseTestingServiceTestConnectorConfigResponse(rsp *http.Response) (*TestingServiceTestConnectorConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestingServiceTestConnectorConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestConnectorConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestingServiceTestDestinationResponse parses an HTTP response from a TestingServiceTestDestinationWithResponse call
func ParseTestingServiceTestDestinationResponse(rsp *http.Response) (*TestingServiceTestDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestingServiceTestDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestDestinationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestingServiceTestExistingConnectorResponse parses an HTTP response from a TestingServiceTestExistingConnectorWithResponse call
func ParseTestingServiceTestExistingConnectorResponse(rsp *http.Response) (*TestingServiceTestExistingConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestingServiceTestExistingConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestExistingConnectorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestingServiceTestExistingPresetResponse parses an HTTP response from a TestingServiceTestExistingPresetWithResponse call
func ParseTestingServiceTestExistingPresetResponse(rsp *http.Response) (*TestingServiceTestExistingPresetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestingServiceTestExistingPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestExistingPresetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestingServiceTestPresetConfigResponse parses an HTTP response from a TestingServiceTestPresetConfigWithResponse call
func ParseTestingServiceTestPresetConfigResponse(rsp *http.Response) (*TestingServiceTestPresetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestingServiceTestPresetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestPresetConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestingServiceTestRoutingConditionValidResponse parses an HTTP response from a TestingServiceTestRoutingConditionValidWithResponse call
func ParseTestingServiceTestRoutingConditionValidResponse(rsp *http.Response) (*TestingServiceTestRoutingConditionValidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestingServiceTestRoutingConditionValidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestRoutingConditionValidResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTestingServiceTestTemplateRenderResponse parses an HTTP response from a TestingServiceTestTemplateRenderWithResponse call
func ParseTestingServiceTestTemplateRenderResponse(rsp *http.Response) (*TestingServiceTestTemplateRenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestingServiceTestTemplateRenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestTemplateRenderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceCreateCustomPresetResponse parses an HTTP response from a PresetsServiceCreateCustomPresetWithResponse call
func ParsePresetsServiceCreateCustomPresetResponse(rsp *http.Response) (*PresetsServiceCreateCustomPresetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceCreateCustomPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateCustomPresetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceReplaceCustomPresetResponse parses an HTTP response from a PresetsServiceReplaceCustomPresetWithResponse call
func ParsePresetsServiceReplaceCustomPresetResponse(rsp *http.Response) (*PresetsServiceReplaceCustomPresetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceReplaceCustomPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ReplaceCustomPresetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceDeleteCustomPresetResponse parses an HTTP response from a PresetsServiceDeleteCustomPresetWithResponse call
func ParsePresetsServiceDeleteCustomPresetResponse(rsp *http.Response) (*PresetsServiceDeleteCustomPresetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceDeleteCustomPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteCustomPresetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceSetCustomPresetAsDefaultResponse parses an HTTP response from a PresetsServiceSetCustomPresetAsDefaultWithResponse call
func ParsePresetsServiceSetCustomPresetAsDefaultResponse(rsp *http.Response) (*PresetsServiceSetCustomPresetAsDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceSetCustomPresetAsDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1SetCustomPresetAsDefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceGetPresetResponse parses an HTTP response from a PresetsServiceGetPresetWithResponse call
func ParsePresetsServiceGetPresetResponse(rsp *http.Response) (*PresetsServiceGetPresetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceGetPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetPresetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceSetPresetAsDefaultResponse parses an HTTP response from a PresetsServiceSetPresetAsDefaultWithResponse call
func ParsePresetsServiceSetPresetAsDefaultResponse(rsp *http.Response) (*PresetsServiceSetPresetAsDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceSetPresetAsDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1SetPresetAsDefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceBatchGetPresetsResponse parses an HTTP response from a PresetsServiceBatchGetPresetsWithResponse call
func ParsePresetsServiceBatchGetPresetsResponse(rsp *http.Response) (*PresetsServiceBatchGetPresetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceBatchGetPresetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BatchGetPresetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceGetDefaultPresetSummaryResponse parses an HTTP response from a PresetsServiceGetDefaultPresetSummaryWithResponse call
func ParsePresetsServiceGetDefaultPresetSummaryResponse(rsp *http.Response) (*PresetsServiceGetDefaultPresetSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceGetDefaultPresetSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetDefaultPresetSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceListPresetSummariesResponse parses an HTTP response from a PresetsServiceListPresetSummariesWithResponse call
func ParsePresetsServiceListPresetSummariesResponse(rsp *http.Response) (*PresetsServiceListPresetSummariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceListPresetSummariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListPresetSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePresetsServiceGetSystemDefaultPresetSummaryResponse parses an HTTP response from a PresetsServiceGetSystemDefaultPresetSummaryWithResponse call
func ParsePresetsServiceGetSystemDefaultPresetSummaryResponse(rsp *http.Response) (*PresetsServiceGetSystemDefaultPresetSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresetsServiceGetSystemDefaultPresetSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetSystemDefaultPresetSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGlobalRoutersServiceListGlobalRoutersResponse parses an HTTP response from a GlobalRoutersServiceListGlobalRoutersWithResponse call
func ParseGlobalRoutersServiceListGlobalRoutersResponse(rsp *http.Response) (*GlobalRoutersServiceListGlobalRoutersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRoutersServiceListGlobalRoutersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListGlobalRoutersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGlobalRoutersServiceCreateGlobalRouterResponse parses an HTTP response from a GlobalRoutersServiceCreateGlobalRouterWithResponse call
func ParseGlobalRoutersServiceCreateGlobalRouterResponse(rsp *http.Response) (*GlobalRoutersServiceCreateGlobalRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRoutersServiceCreateGlobalRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateGlobalRouterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGlobalRoutersServiceReplaceGlobalRouterResponse parses an HTTP response from a GlobalRoutersServiceReplaceGlobalRouterWithResponse call
func ParseGlobalRoutersServiceReplaceGlobalRouterResponse(rsp *http.Response) (*GlobalRoutersServiceReplaceGlobalRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRoutersServiceReplaceGlobalRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ReplaceGlobalRouterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGlobalRoutersServiceDeleteGlobalRouterResponse parses an HTTP response from a GlobalRoutersServiceDeleteGlobalRouterWithResponse call
func ParseGlobalRoutersServiceDeleteGlobalRouterResponse(rsp *http.Response) (*GlobalRoutersServiceDeleteGlobalRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRoutersServiceDeleteGlobalRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteGlobalRouterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGlobalRoutersServiceGetGlobalRouterResponse parses an HTTP response from a GlobalRoutersServiceGetGlobalRouterWithResponse call
func ParseGlobalRoutersServiceGetGlobalRouterResponse(rsp *http.Response) (*GlobalRoutersServiceGetGlobalRouterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRoutersServiceGetGlobalRouterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetGlobalRouterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGlobalRoutersServiceBatchGetGlobalRoutersResponse parses an HTTP response from a GlobalRoutersServiceBatchGetGlobalRoutersWithResponse call
func ParseGlobalRoutersServiceBatchGetGlobalRoutersResponse(rsp *http.Response) (*GlobalRoutersServiceBatchGetGlobalRoutersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRoutersServiceBatchGetGlobalRoutersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BatchGetGlobalRoutersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceCreateOutgoingWebhookResponse parses an HTTP response from a OutgoingWebhooksServiceCreateOutgoingWebhookWithResponse call
func ParseOutgoingWebhooksServiceCreateOutgoingWebhookResponse(rsp *http.Response) (*OutgoingWebhooksServiceCreateOutgoingWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceCreateOutgoingWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateOutgoingWebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceUpdateOutgoingWebhookResponse parses an HTTP response from a OutgoingWebhooksServiceUpdateOutgoingWebhookWithResponse call
func ParseOutgoingWebhooksServiceUpdateOutgoingWebhookResponse(rsp *http.Response) (*OutgoingWebhooksServiceUpdateOutgoingWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceUpdateOutgoingWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateOutgoingWebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceListOutgoingWebhookTypesResponse parses an HTTP response from a OutgoingWebhooksServiceListOutgoingWebhookTypesWithResponse call
func ParseOutgoingWebhooksServiceListOutgoingWebhookTypesResponse(rsp *http.Response) (*OutgoingWebhooksServiceListOutgoingWebhookTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceListOutgoingWebhookTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListOutgoingWebhookTypesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse parses an HTTP response from a OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsWithResponse call
func ParseOutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse(rsp *http.Response) (*OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceGetOutgoingWebhookTypeDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetOutgoingWebhookTypeDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse parses an HTTP response from a OutgoingWebhooksServiceListIbmEventNotificationsInstancesWithResponse call
func ParseOutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse(rsp *http.Response) (*OutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceListIbmEventNotificationsInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListIbmEventNotificationsInstancesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceTestOutgoingWebhookResponse parses an HTTP response from a OutgoingWebhooksServiceTestOutgoingWebhookWithResponse call
func ParseOutgoingWebhooksServiceTestOutgoingWebhookResponse(rsp *http.Response) (*OutgoingWebhooksServiceTestOutgoingWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceTestOutgoingWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestOutgoingWebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceTestExistingOutgoingWebhookResponse parses an HTTP response from a OutgoingWebhooksServiceTestExistingOutgoingWebhookWithResponse call
func ParseOutgoingWebhooksServiceTestExistingOutgoingWebhookResponse(rsp *http.Response) (*OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceTestExistingOutgoingWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TestOutgoingWebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceDeleteOutgoingWebhookResponse parses an HTTP response from a OutgoingWebhooksServiceDeleteOutgoingWebhookWithResponse call
func ParseOutgoingWebhooksServiceDeleteOutgoingWebhookResponse(rsp *http.Response) (*OutgoingWebhooksServiceDeleteOutgoingWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceDeleteOutgoingWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteOutgoingWebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceGetOutgoingWebhookResponse parses an HTTP response from a OutgoingWebhooksServiceGetOutgoingWebhookWithResponse call
func ParseOutgoingWebhooksServiceGetOutgoingWebhookResponse(rsp *http.Response) (*OutgoingWebhooksServiceGetOutgoingWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceGetOutgoingWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetOutgoingWebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceListOutgoingWebhooksResponse parses an HTTP response from a OutgoingWebhooksServiceListOutgoingWebhooksWithResponse call
func ParseOutgoingWebhooksServiceListOutgoingWebhooksResponse(rsp *http.Response) (*OutgoingWebhooksServiceListOutgoingWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceListOutgoingWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListOutgoingWebhooksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceListAllOutgoingWebhooksResponse parses an HTTP response from a OutgoingWebhooksServiceListAllOutgoingWebhooksWithResponse call
func ParseOutgoingWebhooksServiceListAllOutgoingWebhooksResponse(rsp *http.Response) (*OutgoingWebhooksServiceListAllOutgoingWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceListAllOutgoingWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListAllOutgoingWebhooksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOutgoingWebhooksServiceListOutboundWebhooksSummaryResponse parses an HTTP response from a OutgoingWebhooksServiceListOutboundWebhooksSummaryWithResponse call
func ParseOutgoingWebhooksServiceListOutboundWebhooksSummaryResponse(rsp *http.Response) (*OutgoingWebhooksServiceListOutboundWebhooksSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OutgoingWebhooksServiceListOutboundWebhooksSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListOutboundWebhooksSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceGetCompanyPoliciesResponse parses an HTTP response from a PoliciesServiceGetCompanyPoliciesWithResponse call
func ParsePoliciesServiceGetCompanyPoliciesResponse(rsp *http.Response) (*PoliciesServiceGetCompanyPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceGetCompanyPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetCompanyPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceCreatePolicyResponse parses an HTTP response from a PoliciesServiceCreatePolicyWithResponse call
func ParsePoliciesServiceCreatePolicyResponse(rsp *http.Response) (*PoliciesServiceCreatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceCreatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreatePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceUpdatePolicyResponse parses an HTTP response from a PoliciesServiceUpdatePolicyWithResponse call
func ParsePoliciesServiceUpdatePolicyResponse(rsp *http.Response) (*PoliciesServiceUpdatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceUpdatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdatePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceDeletePolicyResponse parses an HTTP response from a PoliciesServiceDeletePolicyWithResponse call
func ParsePoliciesServiceDeletePolicyResponse(rsp *http.Response) (*PoliciesServiceDeletePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceDeletePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeletePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceGetPolicyResponse parses an HTTP response from a PoliciesServiceGetPolicyWithResponse call
func ParsePoliciesServiceGetPolicyResponse(rsp *http.Response) (*PoliciesServiceGetPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceGetPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceAtomicOverwriteLogPoliciesResponse parses an HTTP response from a PoliciesServiceAtomicOverwriteLogPoliciesWithResponse call
func ParsePoliciesServiceAtomicOverwriteLogPoliciesResponse(rsp *http.Response) (*PoliciesServiceAtomicOverwriteLogPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceAtomicOverwriteLogPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AtomicOverwriteLogPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceAtomicOverwriteSpanPoliciesResponse parses an HTTP response from a PoliciesServiceAtomicOverwriteSpanPoliciesWithResponse call
func ParsePoliciesServiceAtomicOverwriteSpanPoliciesResponse(rsp *http.Response) (*PoliciesServiceAtomicOverwriteSpanPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceAtomicOverwriteSpanPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AtomicOverwriteSpanPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceAtomicBatchCreatePolicyResponse parses an HTTP response from a PoliciesServiceAtomicBatchCreatePolicyWithResponse call
func ParsePoliciesServiceAtomicBatchCreatePolicyResponse(rsp *http.Response) (*PoliciesServiceAtomicBatchCreatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceAtomicBatchCreatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AtomicBatchCreatePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceBulkTestLogPoliciesResponse parses an HTTP response from a PoliciesServiceBulkTestLogPoliciesWithResponse call
func ParsePoliciesServiceBulkTestLogPoliciesResponse(rsp *http.Response) (*PoliciesServiceBulkTestLogPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceBulkTestLogPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BulkTestLogPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceReorderPoliciesResponse parses an HTTP response from a PoliciesServiceReorderPoliciesWithResponse call
func ParsePoliciesServiceReorderPoliciesResponse(rsp *http.Response) (*PoliciesServiceReorderPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceReorderPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ReorderPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePoliciesServiceTogglePolicyResponse parses an HTTP response from a PoliciesServiceTogglePolicyWithResponse call
func ParsePoliciesServiceTogglePolicyResponse(rsp *http.Response) (*PoliciesServiceTogglePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesServiceTogglePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1TogglePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRetentionsServiceGetRetentionsResponse parses an HTTP response from a RetentionsServiceGetRetentionsWithResponse call
func ParseRetentionsServiceGetRetentionsResponse(rsp *http.Response) (*RetentionsServiceGetRetentionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetentionsServiceGetRetentionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetRetentionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRetentionsServiceUpdateRetentionsResponse parses an HTTP response from a RetentionsServiceUpdateRetentionsWithResponse call
func ParseRetentionsServiceUpdateRetentionsResponse(rsp *http.Response) (*RetentionsServiceUpdateRetentionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetentionsServiceUpdateRetentionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateRetentionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRetentionsServiceGetRetentionsEnabledResponse parses an HTTP response from a RetentionsServiceGetRetentionsEnabledWithResponse call
func ParseRetentionsServiceGetRetentionsEnabledResponse(rsp *http.Response) (*RetentionsServiceGetRetentionsEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetentionsServiceGetRetentionsEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetRetentionsEnabledResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRetentionsServiceActivateRetentionsResponse parses an HTTP response from a RetentionsServiceActivateRetentionsWithResponse call
func ParseRetentionsServiceActivateRetentionsResponse(rsp *http.Response) (*RetentionsServiceActivateRetentionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetentionsServiceActivateRetentionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ActivateRetentionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupSetsListResponse parses an HTTP response from a RuleGroupSetsListWithResponse call
func ParseRuleGroupSetsListResponse(rsp *http.Response) (*RuleGroupSetsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupSetsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1RuleGroupSetListing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupSetsCreateResponse parses an HTTP response from a RuleGroupSetsCreateWithResponse call
func ParseRuleGroupSetsCreateResponse(rsp *http.Response) (*RuleGroupSetsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupSetsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateRuleGroupSetResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupSetsDeleteResponse parses an HTTP response from a RuleGroupSetsDeleteWithResponse call
func ParseRuleGroupSetsDeleteResponse(rsp *http.Response) (*RuleGroupSetsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupSetsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupSetsFetchResponse parses an HTTP response from a RuleGroupSetsFetchWithResponse call
func ParseRuleGroupSetsFetchResponse(rsp *http.Response) (*RuleGroupSetsFetchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupSetsFetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1OutRuleGroupSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRuleGroupSetsUpdateResponse parses an HTTP response from a RuleGroupSetsUpdateWithResponse call
func ParseRuleGroupSetsUpdateResponse(rsp *http.Response) (*RuleGroupSetsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RuleGroupSetsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScopesServiceGetTeamScopesByIdsResponse parses an HTTP response from a ScopesServiceGetTeamScopesByIdsWithResponse call
func ParseScopesServiceGetTeamScopesByIdsResponse(rsp *http.Response) (*ScopesServiceGetTeamScopesByIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScopesServiceGetTeamScopesByIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetScopesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScopesServiceCreateScopeResponse parses an HTTP response from a ScopesServiceCreateScopeWithResponse call
func ParseScopesServiceCreateScopeResponse(rsp *http.Response) (*ScopesServiceCreateScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScopesServiceCreateScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScopesServiceUpdateScopeResponse parses an HTTP response from a ScopesServiceUpdateScopeWithResponse call
func ParseScopesServiceUpdateScopeResponse(rsp *http.Response) (*ScopesServiceUpdateScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScopesServiceUpdateScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScopesServiceGetTeamScopesResponse parses an HTTP response from a ScopesServiceGetTeamScopesWithResponse call
func ParseScopesServiceGetTeamScopesResponse(rsp *http.Response) (*ScopesServiceGetTeamScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScopesServiceGetTeamScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetScopesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScopesServiceDeleteScopeResponse parses an HTTP response from a ScopesServiceDeleteScopeWithResponse call
func ParseScopesServiceDeleteScopeResponse(rsp *http.Response) (*ScopesServiceDeleteScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScopesServiceDeleteScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlosServiceListSlosResponse parses an HTTP response from a SlosServiceListSlosWithResponse call
func ParseSlosServiceListSlosResponse(rsp *http.Response) (*SlosServiceListSlosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlosServiceListSlosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListSlosResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlosServiceCreateSloResponse parses an HTTP response from a SlosServiceCreateSloWithResponse call
func ParseSlosServiceCreateSloResponse(rsp *http.Response) (*SlosServiceCreateSloResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlosServiceCreateSloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateSloResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlosServiceReplaceSloResponse parses an HTTP response from a SlosServiceReplaceSloWithResponse call
func ParseSlosServiceReplaceSloResponse(rsp *http.Response) (*SlosServiceReplaceSloResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlosServiceReplaceSloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ReplaceSloResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlosServiceDeleteSloResponse parses an HTTP response from a SlosServiceDeleteSloWithResponse call
func ParseSlosServiceDeleteSloResponse(rsp *http.Response) (*SlosServiceDeleteSloResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlosServiceDeleteSloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteSloResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlosServiceGetSloResponse parses an HTTP response from a SlosServiceGetSloWithResponse call
func ParseSlosServiceGetSloResponse(rsp *http.Response) (*SlosServiceGetSloResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlosServiceGetSloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetSloResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlosServiceBatchExecuteSloResponse parses an HTTP response from a SlosServiceBatchExecuteSloWithResponse call
func ParseSlosServiceBatchExecuteSloResponse(rsp *http.Response) (*SlosServiceBatchExecuteSloResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlosServiceBatchExecuteSloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BatchExecuteSloResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlosServiceBatchGetSlosResponse parses an HTTP response from a SlosServiceBatchGetSlosWithResponse call
func ParseSlosServiceBatchGetSlosResponse(rsp *http.Response) (*SlosServiceBatchGetSlosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlosServiceBatchGetSlosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1BatchGetSlosResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSamlConfigurationServiceSetActiveResponse parses an HTTP response from a SamlConfigurationServiceSetActiveWithResponse call
func ParseSamlConfigurationServiceSetActiveResponse(rsp *http.Response) (*SamlConfigurationServiceSetActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SamlConfigurationServiceSetActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ssov2SetActiveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSamlConfigurationServiceGetConfigurationResponse parses an HTTP response from a SamlConfigurationServiceGetConfigurationWithResponse call
func ParseSamlConfigurationServiceGetConfigurationResponse(rsp *http.Response) (*SamlConfigurationServiceGetConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SamlConfigurationServiceGetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSamlConfigurationServiceSetIDPParametersResponse parses an HTTP response from a SamlConfigurationServiceSetIDPParametersWithResponse call
func ParseSamlConfigurationServiceSetIDPParametersResponse(rsp *http.Response) (*SamlConfigurationServiceSetIDPParametersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SamlConfigurationServiceSetIDPParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2SetIDPParametersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSamlConfigurationServiceGetSPParametersResponse parses an HTTP response from a SamlConfigurationServiceGetSPParametersWithResponse call
func ParseSamlConfigurationServiceGetSPParametersResponse(rsp *http.Response) (*SamlConfigurationServiceGetSPParametersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SamlConfigurationServiceGetSPParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetSPParametersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceGetTeamGroupByNameResponse parses an HTTP response from a TeamPermissionsMgmtServiceGetTeamGroupByNameWithResponse call
func ParseTeamPermissionsMgmtServiceGetTeamGroupByNameResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceGetTeamGroupByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceGetTeamGroupByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetTeamGroupByNameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceCreateTeamGroupResponse parses an HTTP response from a TeamPermissionsMgmtServiceCreateTeamGroupWithResponse call
func ParseTeamPermissionsMgmtServiceCreateTeamGroupResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceCreateTeamGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceCreateTeamGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateTeamGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceUpdateTeamGroupResponse parses an HTTP response from a TeamPermissionsMgmtServiceUpdateTeamGroupWithResponse call
func ParseTeamPermissionsMgmtServiceUpdateTeamGroupResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceUpdateTeamGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceUpdateTeamGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateTeamGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceGetTeamGroupsResponse parses an HTTP response from a TeamPermissionsMgmtServiceGetTeamGroupsWithResponse call
func ParseTeamPermissionsMgmtServiceGetTeamGroupsResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceGetTeamGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceGetTeamGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetTeamGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse parses an HTTP response from a TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsWithResponse call
func ParseTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1RemoveUsersFromTeamGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse parses an HTTP response from a TeamPermissionsMgmtServiceAddUsersToTeamGroupsWithResponse call
func ParseTeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceAddUsersToTeamGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AddUsersToTeamGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceDeleteTeamGroupResponse parses an HTTP response from a TeamPermissionsMgmtServiceDeleteTeamGroupWithResponse call
func ParseTeamPermissionsMgmtServiceDeleteTeamGroupResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceDeleteTeamGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceDeleteTeamGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteTeamGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceGetTeamGroupResponse parses an HTTP response from a TeamPermissionsMgmtServiceGetTeamGroupWithResponse call
func ParseTeamPermissionsMgmtServiceGetTeamGroupResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceGetTeamGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceGetTeamGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetTeamGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceGetTeamGroupScopeResponse parses an HTTP response from a TeamPermissionsMgmtServiceGetTeamGroupScopeWithResponse call
func ParseTeamPermissionsMgmtServiceGetTeamGroupScopeResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceGetTeamGroupScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceGetTeamGroupScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetTeamGroupScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceSetTeamGroupScopeResponse parses an HTTP response from a TeamPermissionsMgmtServiceSetTeamGroupScopeWithResponse call
func ParseTeamPermissionsMgmtServiceSetTeamGroupScopeResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceSetTeamGroupScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceSetTeamGroupScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1SetTeamGroupScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse parses an HTTP response from a TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupWithResponse call
func ParseTeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceRemoveUsersFromTeamGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1RemoveUsersFromTeamGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceGetGroupUsersResponse parses an HTTP response from a TeamPermissionsMgmtServiceGetGroupUsersWithResponse call
func ParseTeamPermissionsMgmtServiceGetGroupUsersResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceGetGroupUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceGetGroupUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetGroupUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamPermissionsMgmtServiceAddUsersToTeamGroupResponse parses an HTTP response from a TeamPermissionsMgmtServiceAddUsersToTeamGroupWithResponse call
func ParseTeamPermissionsMgmtServiceAddUsersToTeamGroupResponse(rsp *http.Response) (*TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamPermissionsMgmtServiceAddUsersToTeamGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AddUsersToTeamGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsFoldersServiceListViewFoldersResponse parses an HTTP response from a ViewsFoldersServiceListViewFoldersWithResponse call
func ParseViewsFoldersServiceListViewFoldersResponse(rsp *http.Response) (*ViewsFoldersServiceListViewFoldersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsFoldersServiceListViewFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesListViewFoldersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsFoldersServiceCreateViewFolderResponse parses an HTTP response from a ViewsFoldersServiceCreateViewFolderWithResponse call
func ParseViewsFoldersServiceCreateViewFolderResponse(rsp *http.Response) (*ViewsFoldersServiceCreateViewFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsFoldersServiceCreateViewFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ViewFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsFoldersServiceReplaceViewFolderResponse parses an HTTP response from a ViewsFoldersServiceReplaceViewFolderWithResponse call
func ParseViewsFoldersServiceReplaceViewFolderResponse(rsp *http.Response) (*ViewsFoldersServiceReplaceViewFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsFoldersServiceReplaceViewFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ViewFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsFoldersServiceDeleteViewFolderResponse parses an HTTP response from a ViewsFoldersServiceDeleteViewFolderWithResponse call
func ParseViewsFoldersServiceDeleteViewFolderResponse(rsp *http.Response) (*ViewsFoldersServiceDeleteViewFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsFoldersServiceDeleteViewFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesDeleteViewFolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsFoldersServiceGetViewFolderResponse parses an HTTP response from a ViewsFoldersServiceGetViewFolderWithResponse call
func ParseViewsFoldersServiceGetViewFolderResponse(rsp *http.Response) (*ViewsFoldersServiceGetViewFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsFoldersServiceGetViewFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ViewFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsServiceListViewsResponse parses an HTTP response from a ViewsServiceListViewsWithResponse call
func ParseViewsServiceListViewsResponse(rsp *http.Response) (*ViewsServiceListViewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsServiceListViewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesListViewsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsServiceCreateViewResponse parses an HTTP response from a ViewsServiceCreateViewWithResponse call
func ParseViewsServiceCreateViewResponse(rsp *http.Response) (*ViewsServiceCreateViewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsServiceCreateViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsServiceDeleteViewResponse parses an HTTP response from a ViewsServiceDeleteViewWithResponse call
func ParseViewsServiceDeleteViewResponse(rsp *http.Response) (*ViewsServiceDeleteViewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsServiceDeleteViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesDeleteViewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsServiceGetViewResponse parses an HTTP response from a ViewsServiceGetViewWithResponse call
func ParseViewsServiceGetViewResponse(rsp *http.Response) (*ViewsServiceGetViewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsServiceGetViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsServiceReplaceViewResponse parses an HTTP response from a ViewsServiceReplaceViewWithResponse call
func ParseViewsServiceReplaceViewResponse(rsp *http.Response) (*ViewsServiceReplaceViewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsServiceReplaceViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsServiceListActionsResponse parses an HTTP response from a ActionsServiceListActionsWithResponse call
func ParseActionsServiceListActionsResponse(rsp *http.Response) (*ActionsServiceListActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsServiceListActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2ListActionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsServiceCreateActionResponse parses an HTTP response from a ActionsServiceCreateActionWithResponse call
func ParseActionsServiceCreateActionResponse(rsp *http.Response) (*ActionsServiceCreateActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsServiceCreateActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2CreateActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsServiceReplaceActionResponse parses an HTTP response from a ActionsServiceReplaceActionWithResponse call
func ParseActionsServiceReplaceActionResponse(rsp *http.Response) (*ActionsServiceReplaceActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsServiceReplaceActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2ReplaceActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsServiceAtomicBatchExecuteActionsResponse parses an HTTP response from a ActionsServiceAtomicBatchExecuteActionsWithResponse call
func ParseActionsServiceAtomicBatchExecuteActionsResponse(rsp *http.Response) (*ActionsServiceAtomicBatchExecuteActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsServiceAtomicBatchExecuteActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2AtomicBatchExecuteActionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsServiceOrderActionsResponse parses an HTTP response from a ActionsServiceOrderActionsWithResponse call
func ParseActionsServiceOrderActionsResponse(rsp *http.Response) (*ActionsServiceOrderActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsServiceOrderActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2OrderActionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsServiceDeleteActionResponse parses an HTTP response from a ActionsServiceDeleteActionWithResponse call
func ParseActionsServiceDeleteActionResponse(rsp *http.Response) (*ActionsServiceDeleteActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsServiceDeleteActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2DeleteActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsServiceGetActionResponse parses an HTTP response from a ActionsServiceGetActionWithResponse call
func ParseActionsServiceGetActionResponse(rsp *http.Response) (*ActionsServiceGetActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsServiceGetActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDataUsageServiceGetDataUsageResponse parses an HTTP response from a DataUsageServiceGetDataUsageWithResponse call
func ParseDataUsageServiceGetDataUsageResponse(rsp *http.Response) (*DataUsageServiceGetDataUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DataUsageServiceGetDataUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error *RpcStatus `json:"error,omitempty"`

			// Result This data structure is used to return data usage.
			Result *V2GetDataUsageResponse `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDataUsageServiceGetDailyUsageEvaluationTokensResponse parses an HTTP response from a DataUsageServiceGetDailyUsageEvaluationTokensWithResponse call
func ParseDataUsageServiceGetDailyUsageEvaluationTokensResponse(rsp *http.Response) (*DataUsageServiceGetDailyUsageEvaluationTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DataUsageServiceGetDailyUsageEvaluationTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetDailyUsageEvaluationTokensResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDataUsageServiceGetDailyUsageProcessedGbsResponse parses an HTTP response from a DataUsageServiceGetDailyUsageProcessedGbsWithResponse call
func ParseDataUsageServiceGetDailyUsageProcessedGbsResponse(rsp *http.Response) (*DataUsageServiceGetDailyUsageProcessedGbsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DataUsageServiceGetDailyUsageProcessedGbsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetDailyUsageProcessedGbsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDataUsageServiceGetDailyUsageUnitsResponse parses an HTTP response from a DataUsageServiceGetDailyUsageUnitsWithResponse call
func ParseDataUsageServiceGetDailyUsageUnitsResponse(rsp *http.Response) (*DataUsageServiceGetDailyUsageUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DataUsageServiceGetDailyUsageUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetDailyUsageUnitsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDataUsageServiceGetDataUsageMetricsExportStatusResponse parses an HTTP response from a DataUsageServiceGetDataUsageMetricsExportStatusWithResponse call
func ParseDataUsageServiceGetDataUsageMetricsExportStatusResponse(rsp *http.Response) (*DataUsageServiceGetDataUsageMetricsExportStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DataUsageServiceGetDataUsageMetricsExportStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetDataUsageMetricsExportStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDataUsageServiceUpdateDataUsageMetricsExportStatusResponse parses an HTTP response from a DataUsageServiceUpdateDataUsageMetricsExportStatusWithResponse call
func ParseDataUsageServiceUpdateDataUsageMetricsExportStatusResponse(rsp *http.Response) (*DataUsageServiceUpdateDataUsageMetricsExportStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DataUsageServiceUpdateDataUsageMetricsExportStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2UpdateDataUsageMetricsExportStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDataUsageServiceGetLogsCountResponse parses an HTTP response from a DataUsageServiceGetLogsCountWithResponse call
func ParseDataUsageServiceGetLogsCountResponse(rsp *http.Response) (*DataUsageServiceGetLogsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DataUsageServiceGetLogsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error *RpcStatus `json:"error,omitempty"`

			// Result This data structure is used to return logs count.
			Result *V2GetLogsCountResponse `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDataUsageServiceGetSpansCountResponse parses an HTTP response from a DataUsageServiceGetSpansCountWithResponse call
func ParseDataUsageServiceGetSpansCountResponse(rsp *http.Response) (*DataUsageServiceGetSpansCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DataUsageServiceGetSpansCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error *RpcStatus `json:"error,omitempty"`

			// Result This data structure is used to return spans count.
			Result *V2GetSpansCountResponse `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTargetServiceGetTargetResponse parses an HTTP response from a TargetServiceGetTargetWithResponse call
func ParseTargetServiceGetTargetResponse(rsp *http.Response) (*TargetServiceGetTargetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TargetServiceGetTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2GetTargetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTargetServiceSetTargetResponse parses an HTTP response from a TargetServiceSetTargetWithResponse call
func ParseTargetServiceSetTargetResponse(rsp *http.Response) (*TargetServiceSetTargetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TargetServiceSetTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2SetTargetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTargetServiceValidateTargetResponse parses an HTTP response from a TargetServiceValidateTargetWithResponse call
func ParseTargetServiceValidateTargetResponse(rsp *http.Response) (*TargetServiceValidateTargetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TargetServiceValidateTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2ValidateTargetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertDefsServiceListAlertDefsResponse parses an HTTP response from a AlertDefsServiceListAlertDefsWithResponse call
func ParseAlertDefsServiceListAlertDefsResponse(rsp *http.Response) (*AlertDefsServiceListAlertDefsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDefsServiceListAlertDefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3ListAlertDefsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertDefsServiceCreateAlertDefResponse parses an HTTP response from a AlertDefsServiceCreateAlertDefWithResponse call
func ParseAlertDefsServiceCreateAlertDefResponse(rsp *http.Response) (*AlertDefsServiceCreateAlertDefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDefsServiceCreateAlertDefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3CreateAlertDefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertDefsServiceReplaceAlertDefResponse parses an HTTP response from a AlertDefsServiceReplaceAlertDefWithResponse call
func ParseAlertDefsServiceReplaceAlertDefResponse(rsp *http.Response) (*AlertDefsServiceReplaceAlertDefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDefsServiceReplaceAlertDefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3ReplaceAlertDefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertDefsServiceGetAlertDefByVersionIdResponse parses an HTTP response from a AlertDefsServiceGetAlertDefByVersionIdWithResponse call
func ParseAlertDefsServiceGetAlertDefByVersionIdResponse(rsp *http.Response) (*AlertDefsServiceGetAlertDefByVersionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDefsServiceGetAlertDefByVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3GetAlertDefByVersionIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertDefsServiceDeleteAlertDefResponse parses an HTTP response from a AlertDefsServiceDeleteAlertDefWithResponse call
func ParseAlertDefsServiceDeleteAlertDefResponse(rsp *http.Response) (*AlertDefsServiceDeleteAlertDefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDefsServiceDeleteAlertDefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3DeleteAlertDefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertDefsServiceGetAlertDefResponse parses an HTTP response from a AlertDefsServiceGetAlertDefWithResponse call
func ParseAlertDefsServiceGetAlertDefResponse(rsp *http.Response) (*AlertDefsServiceGetAlertDefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDefsServiceGetAlertDefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3GetAlertDefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertDefsServiceSetActiveResponse parses an HTTP response from a AlertDefsServiceSetActiveWithResponse call
func ParseAlertDefsServiceSetActiveResponse(rsp *http.Response) (*AlertDefsServiceSetActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDefsServiceSetActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alertsv3SetActiveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertEventServiceGetAlertEventsStatsResponse parses an HTTP response from a AlertEventServiceGetAlertEventsStatsWithResponse call
func ParseAlertEventServiceGetAlertEventsStatsResponse(rsp *http.Response) (*AlertEventServiceGetAlertEventsStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertEventServiceGetAlertEventsStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3GetAlertEventStatsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertEventServiceGetAlertEventResponse parses an HTTP response from a AlertEventServiceGetAlertEventWithResponse call
func ParseAlertEventServiceGetAlertEventResponse(rsp *http.Response) (*AlertEventServiceGetAlertEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertEventServiceGetAlertEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3GetAlertEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAlertDefsServiceDownloadAlertsResponse parses an HTTP response from a AlertDefsServiceDownloadAlertsWithResponse call
func ParseAlertDefsServiceDownloadAlertsResponse(rsp *http.Response) (*AlertDefsServiceDownloadAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDefsServiceDownloadAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error *RpcStatus `json:"error,omitempty"`

			// Result A response containing the downloaded alert data
			Result *V3DownloadAlertsResponse `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiKeysServiceCreateApiKeyResponse parses an HTTP response from a ApiKeysServiceCreateApiKeyWithResponse call
func ParseApiKeysServiceCreateApiKeyResponse(rsp *http.Response) (*ApiKeysServiceCreateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiKeysServiceCreateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3CreateApiKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiKeysServiceGetSendDataApiKeysResponse parses an HTTP response from a ApiKeysServiceGetSendDataApiKeysWithResponse call
func ParseApiKeysServiceGetSendDataApiKeysResponse(rsp *http.Response) (*ApiKeysServiceGetSendDataApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiKeysServiceGetSendDataApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3GetSendDataApiKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiKeysServiceDeleteApiKeyResponse parses an HTTP response from a ApiKeysServiceDeleteApiKeyWithResponse call
func ParseApiKeysServiceDeleteApiKeyResponse(rsp *http.Response) (*ApiKeysServiceDeleteApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiKeysServiceDeleteApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3DeleteApiKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiKeysServiceGetApiKeyResponse parses an HTTP response from a ApiKeysServiceGetApiKeyWithResponse call
func ParseApiKeysServiceGetApiKeyResponse(rsp *http.Response) (*ApiKeysServiceGetApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiKeysServiceGetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3GetApiKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiKeysServiceUpdateApiKeyResponse parses an HTTP response from a ApiKeysServiceUpdateApiKeyWithResponse call
func ParseApiKeysServiceUpdateApiKeyResponse(rsp *http.Response) (*ApiKeysServiceUpdateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiKeysServiceUpdateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3UpdateApiKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventsServiceListEventsResponse parses an HTTP response from a EventsServiceListEventsWithResponse call
func ParseEventsServiceListEventsResponse(rsp *http.Response) (*EventsServiceListEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsServiceListEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3ListEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventsServiceBatchGetEventResponse parses an HTTP response from a EventsServiceBatchGetEventWithResponse call
func ParseEventsServiceBatchGetEventResponse(rsp *http.Response) (*EventsServiceBatchGetEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsServiceBatchGetEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3BatchGetEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventsServiceGetEventResponse parses an HTTP response from a EventsServiceGetEventWithResponse call
func ParseEventsServiceGetEventResponse(rsp *http.Response) (*EventsServiceGetEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsServiceGetEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3GetEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventsServiceListEventsCountResponse parses an HTTP response from a EventsServiceListEventsCountWithResponse call
func ParseEventsServiceListEventsCountResponse(rsp *http.Response) (*EventsServiceListEventsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsServiceListEventsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3ListEventsCountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEventsServiceGetEventsStatisticsResponse parses an HTTP response from a EventsServiceGetEventsStatisticsWithResponse call
func ParseEventsServiceGetEventsStatisticsResponse(rsp *http.Response) (*EventsServiceGetEventsStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsServiceGetEventsStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3GetEventsStatisticsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
